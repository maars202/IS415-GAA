---
title: "Hands-on_Ex02.qmd"
---

# Getting started

## Installing and loading R packages

In this section, I will install and load tidyverse and sf packages.

```{r}
pacman::p_load(tidyverse, sf)
```

Import data and assign to variable name 'mpsz'.

```{r}
mpsz <- st_read(dsn = "../../data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

Plot should appear here:

```{r}
plot(mpsz)
```

### Plotting Cycling Path 

```{r}
cyclingpath = st_read(dsn = "../../data/geospatial", 
                         layer = "CyclingPathGazette")
```

Personal Observations: For polyline features, it has only 2 fields as shown above by the summary. There are 2558 different points that define this polyline possibly.

### **Importing GIS data in kml format**

```{r}
preschool = st_read("../../data/geospatial/PreSchoolsLocation.kml")
```

It uses the wgs84 coordinates system which is different from the above two datasets. What other coordinate systems are better than this wgs84 coordinate system?

### **Working with glimpse()**

Glimpse() from dplyr package is similar to pd.describe() and pd.info() functions in python.

```{r}
glimpse(mpsz)
```

### **Working with *head()***

head() in R is similar to pd.head() function in python.

```{r}
head(mpsz, n=5)  
```

It gives the top 5 entries present in the dataset unlike top 10 given as default in python pandas's head() function.

## **Plotting the Geospatial Data**

```{r}
plot(mpsz)
```

Different types of geospatial data that can be visualised are:

-   geometry

-   specific attributes such as population (colors used to indicate which part of the range of population that region contains)

Plotting only the geometry:

```{r}
plot(st_geometry(mpsz))
```

Plotting specific attribute - PLN_AREA_N:

```{r}
plot(mpsz["PLN_AREA_N"])
```

## Map Projection

2 sets of geospatial data can be used to do map projection. An important step to map projection is converting both datasets to the same coordinate system. This step is called projection transformation.

Finding the coordinate system of the current dataset:

```{r}
st_crs(mpsz)
```

As shown above, the current map is projected using the SVY21 coordinate system and it uses EPSG of 9001. For SVY21 coordinate system, 3414 is the correct EPSG code to be used.

Changing the EPSG of the current dataset for its SVY21 coordinate system:

```{r}
mpsz3414 <- st_transform(mpsz, 3414)
```

Checking EPSG of dataset again:

```{r}
st_crs(mpsz3414)
```

It's ESPG has been changed to 3414.

### **Transforming the projection of preschool from wgs84 to svy21**

Summary of preschool dataset:

```{r}
glimpse(preschool)
```

Type of EPSG and coordinate system used in preschool dataset:

```{r}
st_crs(preschool)
```

Change the coordinate system of preschool data from WSG84 to SVY21 to match the above mpsz dataset:

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

Getting coordinate type of preschool3414:

```{r}
st_crs(preschool3414)
```

Notice that it is in svy21 projected coordinate system now.

## **Importing and Converting An Aspatial Data**

Importing Aspatial data 'listings.csv'. It uses read_csv(), a function similar to python pandas's read_csv().

```{r}
listings <- read_csv("../../data/aspatial/listings.csv", show_col_types = FALSE)
```

Using list() instead of glimpse() for getting summary of aspatial data:

```{r}
list(listings) 
```

### **Creating a simple feature data frame from an aspatial data frame**

Creating a dataframe from the listings.csv file:

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
st_transform(crs = 3414)
```

Getting summary of aspatial dataframe:

```{r}
glimpse(listings_sf)
```

Geometry field added but latitude and logitude fields have been dropped. Why?

## **Geoprocessing with sf package**

Important geoprocessing functions:

-   [buffering](https://www.gislounge.com/buffers-in-gis/)

-   point in polygon count

### Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

Personal observation: This increases the distance on either side of the polyline cycling path by 5m.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Perhaps this function breaks up the area into nice rectangles of area to be summed up later to get the total area of the required land.

```{r}
sum(buffer_cycling$AREA)
```

**YAY Mission Accomplished!**

### **Point-in-polygon count**

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

Getting the statistics of a single field using summary() instead of glimpse() or list():

```{r}
summary(mpsz3414$`PreSch Count`)
```

Getting top few entries of a single field using top_n() instead of head() for the entire dataframe:

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

**DIY: Calculate the density of pre-school by planning subzone.**

Get area of each subzones with st_area().

```{r}
mpsz3414$Area <- mpsz3414 %>%
st_area()
```

Get density with mutate() of dplyr package:

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## **Exploratory Data Analysis (EDA)**

Important ggplot2 functions for EDA:

-   hist()

Getting distribution of `PreSch Density from mpsz3414:`

```{r}
hist(mpsz3414$`PreSch Density`)
```

Customising histogram plot with titles and other attributes:

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

**DIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.**

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
