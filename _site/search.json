[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Welcome to IS415 Geo-spatial Analytics and Applications\nThis is the course website of IS415 I study this term. You will find my coursework on this website."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03_1.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03_1.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "install.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\n\npacman::p_load(tidyverse, sf, maptools, raster,spatstat, tmap)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03_1.html#geospatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03_1.html#geospatial-data-wrangling",
    "title": "In Class Exercise 3",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nCreating ppp objects: sf methods\nconverting sf dataframes to sp’s spatial classes. Changes to spatial point data frames. Then converting sp to ppp format.\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\n\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n\n\nchilcare_ppp is a list: Have window and the information in the data.\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\n\n\nHandling duplicated points\nWe can check the duplication in ppp objects by using the code chunk (Remember: Always remember to check for duplicates in data)\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nTo count the number of co-incidence point, we will use the mulitplicity() function as shown below:\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1814] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1851] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1888] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1925] 1\n\n\nIf we want to know how many locations have more than one point event:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\n\n\n\nCreating owin object: sf method\n\nsg_owin &lt;- as.owin(sg_sf)\n\nThe output object can be displayed by using the plot() function\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\nBelow the code in the sf way:\n\npg &lt;- mpsz_sf %&gt;% \n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% \n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% \n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% \n  filter(PLN_AREA_N == \"JURONG WEST\")\n\nPlotting target planning areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nLoad the relevant libraries:\n\npacman::p_load(sf, spNetwork, tmap, classInt, viridis, tidyverse)\n#pacman::p_load(sp, sf, rgdal, spNetwork, tmap)\n\nRead the punggol data:\n\nnetwork &lt;- st_read(dsn = \"../../data/geospatial\", layer = \"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\nchildcare &lt;- st_read(dsn = \"../../data/geospatial\", layer = \"Punggol_CC\")\n\nReading layer `Punggol_CC' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\n\n#childcare &lt;-spTransform(childcare,\n     #                   CRS(\"+init=epsg:3414\"))\n#network &lt;- spTransform(network,\n    #                   CRS(\"+init=epsg:3414\"))\n\nWe examine the structure.\nPersonal Note: The minimum and maximum of x and y needed to ensure we are doing the kernal density within the right WINDOW!\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare) + \n  tm_dots() + \n  tm_shape(network) + \n  tm_lines()\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nPersonal note:\n\ntm_shape(childcare) + tm_dots() + will plot first before tm_shape(network) + tm_lines() is plotted. So childcare data is added as dots first before network variable’s data is plotted as lines afterwards.\ntm_map library uses LEAFLET library underneath its library so no need to create a new leaflet map yourself\nthe different variables can be selected and deselected with the layers icons - using interactive mode!\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\nlixels &lt;- lixelize_lines(network, 750, mindist = 375)\n\n\nsamples = lines_center(lixels)\n\nOn average, people are only willing to walk 750m based on a childcare centre study in NTU.So, 750 is chosen as window length for analysis. So, mindist is chosen as midpoint of 750 –&gt; 750/2.\nTIP: OSM dataset: We can remove the pedastrians, walkpaths, cycling paths can be removed since it is unnecessary and it will increase computation time when running your notebooks.\n\ndensities &lt;- nkde(network,\n                   events = childcare,\n                   w = rep(1, nrow(childcare)),\n                  samples = samples,\n                   kernel_name = \"quartic\",\n                   bw = 300,\n                   div = \"bw\",\n                   method = \"simple\",\n                   digits = 1,\n                   tol = 1,\n                   grid_shape = c(1,1),\n                   max_depth = 8,\n                   agg = 5, #we aggregate the events within a 5m radius (faster calculation)\n                   sparse = TRUE,\n                   verbose = FALSE)\n\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\n\n# rescaling to help the mapping\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(lixels) + \n  tm_lines(col = \"density\") +\n  tm_shape(childcare) + \n  tm_dots()\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/Inclass_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/Inclass_Ex03.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "Reading the relevant spatial data:\n#childcare_sf &lt;- st_read(\"../../data/geospatial/ChildCareServices.geojson\") %&gt;%\n  #st_transform(crs = 3414)\n#sg_sf &lt;- st_read(dsn = \"../../data/geospatial\", layer=\"CostalOutline\")\n#mpsz_sf &lt;- st_read(dsn = \"../../data/geospatial\", \n               # layer = \"MP14_SUBZONE_WEB_PL\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/Inclass_Ex03.html#geospatial-wrangling",
    "href": "In-class_Ex/In-class_Ex03/Inclass_Ex03.html#geospatial-wrangling",
    "title": "In Class Exercise 3",
    "section": "Geospatial Wrangling",
    "text": "Geospatial Wrangling\n\nCreating ppp objects: sf method\n\n#childcare_ppp &lt;- as.ppp(childcare_sf)\n\n\n#summary(childcare_ppp)\n\nMust be a point type data\n\n#any(duplicate(childcare_ppp_jit))\n\nCreating owin object: sf mehthod\n\n#sg_owin &lt;- as.owin(sg_sf)\n\nPersonal note: need to be sf layer cannot be sp layer when converting to owin object!\nThe output objecct can be displayed by using plot() function.\n\n#summary(sg_owin)\n\n\npolygon boundary\nwindow area – unit of measurement should be meters since the other units are meters in the summary\n\n\n#pg &lt;- mpsz_sf %&gt;%\n  #filter(PLN_AREA_N == \"PUNGGOL\")\n#tm &lt;- mpsz_sf %&gt;%\n  #filter(PLN_AREA_N == \"TAMPINES\")\n#ck &lt;- mpsz_sf %&gt;%\n  #filter(PLN_AREA_N == \"CHUA CHU KANG\")\n#jw &lt;- mpsz_sf %&gt;%\n  #filter(PLN_AREA_N == \"JURONG WEST\")\n\n\nsimilar to sql: “select * from table where PLN_AREA_N ==”PUNGGOL”\n\nPlotting target planning areas\n\n#par(mfrow=c(2,2))\n#plot(pg, MAIN=\"PUNGGOL\")\n#plot(tm, MAIN=\"TAMPINES\")\n#plot(ck, MAIN=\"CHUA CHU KANG\")\n#plot(jw, MAIN=\"JURONG WEST\")\n\n\nplots will be slightly different since it is sf layer\n\ncorrect one:"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html",
    "title": "In Class Exercise 2",
    "section": "",
    "text": "In this hands-on exercise, the following R packages will be used.\nImporting the relevant packages using pacman:\nShow the code\npacman::p_load(arrow, lubridate, tidyverse, sf, tmap, readr)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html#extracting-trip-origin-locations",
    "href": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html#extracting-trip-origin-locations",
    "title": "In Class Exercise 2",
    "section": "Extracting trip origin locations",
    "text": "Extracting trip origin locations\n\n\nShow the code\norigin_df &lt;- df %&gt;%\n  group_by(trj_id) %&gt;%\n  arrange(pingtimestamp) %&gt;%\n  filter(row_number()==1) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\n\narrange() function is the same as pd.sort() in python pandas.\n\n❗ row_number() is generated after group_by() function is applied and its generated in all the entries within each group of trj_id.\n\nwday(), hour(), mday() defines which lubridation function to use to extract the weekday, hour, day (refer to lubridate library)\nfactor() converts it to ordinal scale"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html#extracting-trip-end-locations",
    "href": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html#extracting-trip-end-locations",
    "title": "In Class Exercise 2",
    "section": "Extracting trip end locations",
    "text": "Extracting trip end locations\nOwn attempt:\n\n\nShow the code\ndest_df &lt;- df %&gt;%\n  group_by(trj_id) %&gt;%\n  arrange(pingtimestamp) %&gt;%\n  filter(row_number()== n()) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\nCorrect solution uses different method of sorting pingtimestamps in descending order and getting the top entry instead of getting the last entry from ascending order in the above answer:\n\n\nShow the code\ndestination_df &lt;- df %&gt;%\n  group_by(trj_id) %&gt;%\n  arrange(desc(pingtimestamp)) %&gt;%\n  filter(row_number()==1) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         end_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html#saving-transformed-dataframe-results",
    "href": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html#saving-transformed-dataframe-results",
    "title": "In Class Exercise 2",
    "section": "Saving transformed dataframe results",
    "text": "Saving transformed dataframe results\nWriting the tranformed dataset as RDS (R Data Serialisation)\n\n\nShow the code\nwrite_rds(origin_df, \"../../data/rds/origin_df.rds\")\nwrite_rds(destination_df, \"../../data/rds/destination.rds\")\nwrite_rds(destination_df, \"../../data/rds/dest.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html#re-importing-previously-saved-work",
    "href": "In-class_Ex/In-class_Ex02/Inclass_Ex02.html#re-importing-previously-saved-work",
    "title": "In Class Exercise 2",
    "section": "Re-importing previously saved work",
    "text": "Re-importing previously saved work\nRe-importing previously saved data:\n\n\nShow the code\n# origin_df &lt;- read_rds(\"../../data/rds/origin_df.rds\")\n# destination_df &lt;- read_rds(\"../../data/rds/destination_df.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(tidyverse, sf)\n\nImport data and assign to variable name ‘mpsz’.\n\nmpsz &lt;- st_read(dsn = \"../../data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nPlot should appear here:\n\nplot(mpsz)\n\n\n\n\n\n\n\n\n\n\n\ncyclingpath = st_read(dsn = \"../../data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nPersonal Observations: For polyline features, it has only 2 fields as shown above by the summary. There are 2558 different points that define this polyline possibly.\n\n\n\n\npreschool = st_read(\"../../data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nIt uses the wgs84 coordinates system which is different from the above two datasets. What other coordinate systems are better than this wgs84 coordinate system?\n\n\n\nGlimpse() from dplyr package is similar to pd.describe() and pd.info() functions in python.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n\nhead() in R is similar to pd.head() function in python.\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nIt gives the top 5 entries present in the dataset unlike top 10 given as default in python pandas’s head() function.\n\n\n\n\n\nplot(mpsz)\n\n\n\n\n\n\n\n\nDifferent types of geospatial data that can be visualised are:\n\ngeometry\nspecific attributes such as population (colors used to indicate which part of the range of population that region contains)\n\nPlotting only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nPlotting specific attribute - PLN_AREA_N:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\n\n2 sets of geospatial data can be used to do map projection. An important step to map projection is converting both datasets to the same coordinate system. This step is called projection transformation.\nFinding the coordinate system of the current dataset:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAs shown above, the current map is projected using the SVY21 coordinate system and it uses EPSG of 9001. For SVY21 coordinate system, 3414 is the correct EPSG code to be used.\nChanging the EPSG of the current dataset for its SVY21 coordinate system:\n\nmpsz3414 &lt;- st_transform(mpsz, 3414)\n\nChecking EPSG of dataset again:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nIt’s ESPG has been changed to 3414.\n\n\nSummary of preschool dataset:\n\nglimpse(preschool)\n\nRows: 2,290\nColumns: 3\n$ Name        &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description &lt;chr&gt; \"&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Att…\n$ geometry    &lt;POINT [°]&gt; POINT Z (103.8072 1.299333 0), POINT Z (103.826 1.31…\n\n\nType of EPSG and coordinate system used in preschool dataset:\n\nst_crs(preschool)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nChange the coordinate system of preschool data from WSG84 to SVY21 to match the above mpsz dataset:\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\nGetting coordinate type of preschool3414:\n\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that it is in svy21 projected coordinate system now.\n\n\n\n\nImporting Aspatial data ‘listings.csv’. It uses read_csv(), a function similar to python pandas’s read_csv().\n\nlistings &lt;- read_csv(\"../../data/aspatial/listings.csv\", show_col_types = FALSE)\n\nUsing list() instead of glimpse() for getting summary of aspatial data:\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,457 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;lgl&gt;      \n 1  71609 https://www.airbnb.co…   2.02e13 2023-12-27   previ… Vill… NA         \n 2  71896 https://www.airbnb.co…   2.02e13 2023-12-26   city … Home… NA         \n 3  71903 https://www.airbnb.co…   2.02e13 2023-12-26   city … Home… NA         \n 4 275343 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n 5 275344 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n 6 289234 https://www.airbnb.co…   2.02e13 2023-12-27   previ… Home… NA         \n 7 294281 https://www.airbnb.co…   2.02e13 2023-12-27   city … Rent… NA         \n 8 324945 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n 9 330095 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n10 369141 https://www.airbnb.co…   2.02e13 2023-12-27   city … Plac… NA         \n# ℹ 3,447 more rows\n# ℹ 68 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\n\n\nCreating a dataframe from the listings.csv file:\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\nst_transform(crs = 3414)\n\nGetting summary of aspatial dataframe:\n\nglimpse(listings_sf)\n\nRows: 3,457\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.023123e+13, 2.023123e+1…\n$ last_scraped                                 &lt;date&gt; 2023-12-27, 2023-12-26, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Villa in Singapore · ★4.…\n$ description                                  &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"wit…\n$ host_response_rate                           &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"100…\n$ host_acceptance_rate                         &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51…\n$ host_total_listings_count                    &lt;dbl&gt; 15, 15, 15, 68, 68, 15, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ beds                                         &lt;dbl&gt; 3, 1, 2, 1, 1, 5, 1, 1, 1…\n$ amenities                                    &lt;chr&gt; \"[]\", \"[]\", \"[]\", \"[]\", \"…\n$ price                                        &lt;chr&gt; \"$150.00\", \"$80.00\", \"$80…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 6, 6, 29, 30,…\n$ availability_60                              &lt;dbl&gt; 34, 60, 60, 6, 6, 33, 60,…\n$ availability_90                              &lt;dbl&gt; 55, 90, 90, 6, 6, 54, 90,…\n$ availability_365                             &lt;dbl&gt; 55, 91, 91, 183, 183, 54,…\n$ calendar_last_scraped                        &lt;date&gt; 2023-12-27, 2023-12-26, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 2…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 6, 51…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.13, 0.16, 0.30, 0.15, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\n\nGeometry field added but latitude and logitude fields have been dropped. Why?\n\n\n\n\nImportant geoprocessing functions:\n\nbuffering\npoint in polygon count\n\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nPersonal observation: This increases the distance on either side of the polyline cycling path by 5m.\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nPerhaps this function breaks up the area into nice rectangles of area to be summed up later to get the total area of the required land.\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\nYAY Mission Accomplished!\n\n\n\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nGetting the statistics of a single field using summary() instead of glimpse() or list():\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nGetting top few entries of a single field using top_n() instead of head() for the entire dataframe:\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nDIY: Calculate the density of pre-school by planning subzone.\nGet area of each subzones with st_area().\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\nst_area()\n\nGet density with mutate() of dplyr package:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n\n\nImportant ggplot2 functions for EDA:\n\nhist()\n\nGetting distribution of PreSch Density from mpsz3414:\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nCustomising histogram plot with titles and other attributes:\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\nDIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 2: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(tidyverse, sf)\n\nImport data and assign to variable name ‘mpsz’.\n\nmpsz &lt;- st_read(dsn = \"../../data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nPlot should appear here:\n\nplot(mpsz)\n\n\n\n\n\n\n\n\n\n\n\ncyclingpath = st_read(dsn = \"../../data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nPersonal Observations: For polyline features, it has only 2 fields as shown above by the summary. There are 2558 different points that define this polyline possibly.\n\n\n\n\npreschool = st_read(\"../../data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nIt uses the wgs84 coordinates system which is different from the above two datasets. What other coordinate systems are better than this wgs84 coordinate system?\n\n\n\nGlimpse() from dplyr package is similar to pd.describe() and pd.info() functions in python.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n\nhead() in R is similar to pd.head() function in python.\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nIt gives the top 5 entries present in the dataset unlike top 10 given as default in python pandas’s head() function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 2: Geospatial Data Wrangling with R",
    "section": "",
    "text": "plot(mpsz)\n\n\n\n\n\n\n\n\nDifferent types of geospatial data that can be visualised are:\n\ngeometry\nspecific attributes such as population (colors used to indicate which part of the range of population that region contains)\n\nPlotting only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nPlotting specific attribute - PLN_AREA_N:\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#map-projection",
    "href": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#map-projection",
    "title": "Hands-on Exercise 2: Geospatial Data Wrangling with R",
    "section": "",
    "text": "2 sets of geospatial data can be used to do map projection. An important step to map projection is converting both datasets to the same coordinate system. This step is called projection transformation.\nFinding the coordinate system of the current dataset:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAs shown above, the current map is projected using the SVY21 coordinate system and it uses EPSG of 9001. For SVY21 coordinate system, 3414 is the correct EPSG code to be used.\nChanging the EPSG of the current dataset for its SVY21 coordinate system:\n\nmpsz3414 &lt;- st_transform(mpsz, 3414)\n\nChecking EPSG of dataset again:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nIt’s ESPG has been changed to 3414.\n\n\nSummary of preschool dataset:\n\nglimpse(preschool)\n\nRows: 2,290\nColumns: 3\n$ Name        &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description &lt;chr&gt; \"&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Att…\n$ geometry    &lt;POINT [°]&gt; POINT Z (103.8072 1.299333 0), POINT Z (103.826 1.31…\n\n\nType of EPSG and coordinate system used in preschool dataset:\n\nst_crs(preschool)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nChange the coordinate system of preschool data from WSG84 to SVY21 to match the above mpsz dataset:\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\nGetting coordinate type of preschool3414:\n\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that it is in svy21 projected coordinate system now."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 2: Geospatial Data Wrangling with R",
    "section": "",
    "text": "Importing Aspatial data ‘listings.csv’. It uses read_csv(), a function similar to python pandas’s read_csv().\n\nlistings &lt;- read_csv(\"../../data/aspatial/listings.csv\", show_col_types = FALSE)\n\nUsing list() instead of glimpse() for getting summary of aspatial data:\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,457 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;lgl&gt;      \n 1  71609 https://www.airbnb.co…   2.02e13 2023-12-27   previ… Vill… NA         \n 2  71896 https://www.airbnb.co…   2.02e13 2023-12-26   city … Home… NA         \n 3  71903 https://www.airbnb.co…   2.02e13 2023-12-26   city … Home… NA         \n 4 275343 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n 5 275344 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n 6 289234 https://www.airbnb.co…   2.02e13 2023-12-27   previ… Home… NA         \n 7 294281 https://www.airbnb.co…   2.02e13 2023-12-27   city … Rent… NA         \n 8 324945 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n 9 330095 https://www.airbnb.co…   2.02e13 2023-12-26   city … Rent… NA         \n10 369141 https://www.airbnb.co…   2.02e13 2023-12-27   city … Plac… NA         \n# ℹ 3,447 more rows\n# ℹ 68 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\n\n\nCreating a dataframe from the listings.csv file:\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\nst_transform(crs = 3414)\n\nGetting summary of aspatial dataframe:\n\nglimpse(listings_sf)\n\nRows: 3,457\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.023123e+13, 2.023123e+1…\n$ last_scraped                                 &lt;date&gt; 2023-12-27, 2023-12-26, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Villa in Singapore · ★4.…\n$ description                                  &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"wit…\n$ host_response_rate                           &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"100…\n$ host_acceptance_rate                         &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51…\n$ host_total_listings_count                    &lt;dbl&gt; 15, 15, 15, 68, 68, 15, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ beds                                         &lt;dbl&gt; 3, 1, 2, 1, 1, 5, 1, 1, 1…\n$ amenities                                    &lt;chr&gt; \"[]\", \"[]\", \"[]\", \"[]\", \"…\n$ price                                        &lt;chr&gt; \"$150.00\", \"$80.00\", \"$80…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 6, 6, 29, 30,…\n$ availability_60                              &lt;dbl&gt; 34, 60, 60, 6, 6, 33, 60,…\n$ availability_90                              &lt;dbl&gt; 55, 90, 90, 6, 6, 54, 90,…\n$ availability_365                             &lt;dbl&gt; 55, 91, 91, 183, 183, 54,…\n$ calendar_last_scraped                        &lt;date&gt; 2023-12-27, 2023-12-26, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 2…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 6, 51…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.13, 0.16, 0.30, 0.15, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\n\nGeometry field added but latitude and logitude fields have been dropped. Why?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 2: Geospatial Data Wrangling with R",
    "section": "",
    "text": "Important geoprocessing functions:\n\nbuffering\npoint in polygon count\n\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nPersonal observation: This increases the distance on either side of the polyline cycling path by 5m.\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nPerhaps this function breaks up the area into nice rectangles of area to be summed up later to get the total area of the required land.\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\nYAY Mission Accomplished!\n\n\n\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nGetting the statistics of a single field using summary() instead of glimpse() or list():\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nGetting top few entries of a single field using top_n() instead of head() for the entire dataframe:\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nDIY: Calculate the density of pre-school by planning subzone.\nGet area of each subzones with st_area().\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\nst_area()\n\nGet density with mutate() of dplyr package:\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex-02/Hands-on_Ex02.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 2: Geospatial Data Wrangling with R",
    "section": "",
    "text": "Important ggplot2 functions for EDA:\n\nhist()\n\nGetting distribution of PreSch Density from mpsz3414:\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\nCustomising histogram plot with titles and other attributes:\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\nDIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03_1.html#network",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03_1.html#network",
    "title": "In Class Exercise 3",
    "section": "Network",
    "text": "Network\n\nlixels &lt;- lixelize_lines(network, 750, mindist = 375)\n\nOn average, people are only willing to walk 750m based on a childcare centre study in NTU.So, 750 is chosen as window length for analysis. So, mindist is chosen as midpoint of 750 –&gt; 750/2.\nTIP: OSM dataset: We can remove the pedastrians, walkpaths, cycling paths can be removed since it is unnecessary and it will increase computation time when running your notebooks."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex-01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-01/Hands-on_Ex01.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex-01/Hands-on_Ex01.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex-01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\n\nplot(mpsz)\n\n\n\n\n\n\n\n\n\n‘#| eval: false’ —&gt; will make code not run and show output by default\n‘#| echo: false’ —&gt; hides code block in html page"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Questions we would like to explore:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Geospatial Data wrangling",
    "text": "Geospatial Data wrangling\nAlthough simple feature data frame is gaining popularity again sp’s Spatial* classes, there are, however, many geospatial analysis packages require the input geospatial data in sp’s Spatial* classes. In this section, you will learn how to convert simple feature data frame to sp’s Spatial* class.\n\nConverting sf data frames to sp’s Spatial* class\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nLets view the data generated:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, TELOK BLANGAH DRIVE, #01 - 19/51, SINGAPORE 100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;PCF SPARKLETOTS PRESCHOOL @ TELOK BLANGAH BLK 44 (CC)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;349C54F201805938&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                                            &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;99982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;35, ALLANBROOKE ROAD, SINGAPORE 099982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;ISLANDER PRE-SCHOOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;4F63ACF93EFABE7F&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\nPersonal observations: It has only 2 variables. Why is that so?\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nNotice that the geospatial data have been converted into their respective sp’s Spatial* classes now.\n\n\nConverting the Spatial* class into generic sp format\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nNext, you should display the sp objects properties as shown below.\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n\n\n\n\nConverting the generic sp format into spatstat’s ppp format\n\nchildcare_ppp &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1925 points\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\nNow, let us plot childcare_ppp and examine the different.\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\nNotice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\n\nHandling duplicated points\nWe can check the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    3    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    4    1    1    1    1    1    1    1    1    1    1    2 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    3    1    1    1    2    1   10    1    1    1    1    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    2    1    1    3    1    1    1    2    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    2    2    2    1    1    1    1    1    1    1    1    2    1    1    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    2    2    2    1    1    1    1    1    2    1    4    1    1    2 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   3    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   1    1    1    1    1   10    1    1    3    1    1    1    1    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    2    6    1    2    1    1    2    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   3    2    3    2    1    2    1    1    2    4    1    6    6    1    1    1 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   2    1    1    1    1    2    1    1    1    1    1    1    3    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    4    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    2    1    1    1    2    1    1    1    2    1    1    1    1    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    2    1    2    2    1    1    1    1    2    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   4    1    1    1    1    2    1    1    1    1    1    1    2    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   2    2    1    1    1    1    1   10    1    2    1    1    1    2    1    3 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1   10   10   10    1    1    1    1    1    1    1    1    1 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    2    1    2    1    1    1    1    3    1    2    1    1    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    3    1    1    1    1    1    2    1    1    2 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    3    1    1    1    1    1    1    1    1    2    2    2    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    3    1    1    1    2    1    1    1    2    2    1    1    1    1    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    4    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    4    1    1    1    1    1    1    4    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    2    1    1 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    3    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    1    1    1    1   10    1    1    1    1    1    2 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    1    2    1    2    1   10    1    4    1    2    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   3    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    3    1    1    3    1    1    1    1    2    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    2 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    2    1    1    1    1    1    2    2    1    1    1    1    2    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    2    1    2    1    1    1    2    1    1    1    2    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    2    1    1    2    1    1    1    1    1    1    1    1    2    1 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    2    2    1    1    1    1    2    1    1    1    1    2    1    1    2 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    2    4    1    1    1    1    1    1    2    1    2    2    2 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   2    1    1    1    1    2    1    1    2    2    2    2    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    2    2    2    1    1    1    1    1    2    1    1    2    2    2    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    2    1    1    2    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   2    1    2    1    2    1    1    1    1    1    1    2    2    1    1    2 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    2    1    2    1    2    1    1    1    1    1    2    1    1    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    2    1    2    2    2    2    2    1    1    1    1    1    2    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    2    1    1    2    1    1    1    1    2    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    3    1    1    1    1    1    1    1   10 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   2    1    3    2    1    2    1    1    2    3    2    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    2    1    2    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    4    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n  10    1    2    4    1    1    1    4    1    4    1    1    1    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    1    1    1    1    1    4    2    3    2    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   2    2    1    1    1    1    1    2    2    3    1    1    1    1    1    2 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   2    2    2    1    1    1    6    1    1    1    1    1    1    1    1    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    1    1    4    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    2    2    1    1    1    1    1    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    2    1    1    1    1    2    1    1    1    1    2    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   2    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 \n   1    1    1    1    1    1    1    1    1    6    1    1    1    1    1    1 \n1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 \n   1    1    1    1    1    1    1    3    1    1    4    1    1    2    1    1 \n1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 \n   2    1    1    1    2    1    4    1    2    1    1    1    1    1    1    1 \n1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 \n   1    1    1    1    1    1    1    1    2    1    1    2    1    1    1    1 \n1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 \n   1    1    1    1    2    1    1    3    1    1    1    2    1    1    1    1 \n1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 \n   2    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 \n   3    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 \n   1    1    1    4    1    1    1    6    1    1    1    1    1    1    1    1 \n1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 \n   1    1    1    2    1    1    1    2    1    1    1    1    1    2    1    1 \n1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 \n   1    2    1    1    1    1    1    1    1    1    2    2    2    1    1    1 \n1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 \n   2    1    2    1    2    1    2    1    1    2    1    2    2    2    2    1 \n1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 \n   1    1    1    1    1    2    1    1    1    2    1    1    1    1    2    1 \n1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 \n   1    4    1    4    1    4    1    1    2    1    1    1    1    1    3    1 \n1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 \n   1    1    1    2    2    2    2    2    2    2    2    1    1    2    2    2 \n1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 \n   1    2    1    1    1    1    1    2    2    2    1    2    2    2    2    1 \n1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 \n   2    1    1    1    1    1    1    1    2    2    1    2    1    1    1    1 \n1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 \n   1    1    1    1    2    1    2    2    2    2    2    2    1    1    2    1 \n1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 \n   1    1    1    2    2    2    2    2    1    1    1    2    1    1    2    2 \n1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 \n   1    2    1    1    2    1    1    2    2    2    1    2    1    2    1    1 \n1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 \n   1    1    1    1    1    1    2    1    1    1    1    4    1    1    1    1 \n1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 \n   3    1    1    2    1    1    1    2    1    1    1    1    1    2    2    1 \n1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 \n   1    1    2    1    2    2    1    1    1    1    1    2    1    1    2    1 \n1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 \n   1    3    2    2    2    1    2    1    3    1    1    1    1    1    1    1 \n1921 1922 1923 1924 1925 \n   1    1    1    1    3 \n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 338\n\n\nThe output shows that there are 128 duplicated point events.\nTo view the locations of these duplicate point events, we will plot childcare data by using the code chunk below.\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\nThere are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.\nThe second solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\nThe third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\nThe code chunk below implements the jittering approach.\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\nCreating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as(sg_sp, \"owin\")\n\nThe ouput object can be displayed by using plot() function\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\nand summary() function of Base R.\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\nNotice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\n\nHandling duplicated points\nWe can check the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    3    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    4    1    1    1    1    1    1    1    1    1    1    2 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    3    1    1    1    2    1   10    1    1    1    1    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    2    1    1    3    1    1    1    2    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    2    2    2    1    1    1    1    1    1    1    1    2    1    1    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    2    2    2    1    1    1    1    1    2    1    4    1    1    2 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   3    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   1    1    1    1    1   10    1    1    3    1    1    1    1    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    2    6    1    2    1    1    2    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   3    2    3    2    1    2    1    1    2    4    1    6    6    1    1    1 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   2    1    1    1    1    2    1    1    1    1    1    1    3    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    4    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    2    1    1    1    2    1    1    1    2    1    1    1    1    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    2    1    2    2    1    1    1    1    2    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   4    1    1    1    1    2    1    1    1    1    1    1    2    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   2    2    1    1    1    1    1   10    1    2    1    1    1    2    1    3 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1   10   10   10    1    1    1    1    1    1    1    1    1 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    2    1    2    1    1    1    1    3    1    2    1    1    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    3    1    1    1    1    1    2    1    1    2 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    3    1    1    1    1    1    1    1    1    2    2    2    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    3    1    1    1    2    1    1    1    2    2    1    1    1    1    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    4    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    4    1    1    1    1    1    1    4    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    2    1    1 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    3    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    1    1    1    1   10    1    1    1    1    1    2 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    1    2    1    2    1   10    1    4    1    2    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   3    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    3    1    1    3    1    1    1    1    2    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    2 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    2    1    1    1    1    1    2    2    1    1    1    1    2    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    2    1    2    1    1    1    2    1    1    1    2    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    2    1    1    2    1    1    1    1    1    1    1    1    2    1 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    2    2    1    1    1    1    2    1    1    1    1    2    1    1    2 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    2    4    1    1    1    1    1    1    2    1    2    2    2 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   2    1    1    1    1    2    1    1    2    2    2    2    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    2    2    2    1    1    1    1    1    2    1    1    2    2    2    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    2    1    1    2    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   2    1    2    1    2    1    1    1    1    1    1    2    2    1    1    2 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    2    1    2    1    2    1    1    1    1    1    2    1    1    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    2    1    2    2    2    2    2    1    1    1    1    1    2    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    2    1    1    2    1    1    1    1    2    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    3    1    1    1    1    1    1    1   10 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   2    1    3    2    1    2    1    1    2    3    2    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    2    1    2    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    4    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n  10    1    2    4    1    1    1    4    1    4    1    1    1    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    1    1    1    1    1    4    2    3    2    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   2    2    1    1    1    1    1    2    2    3    1    1    1    1    1    2 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   2    2    2    1    1    1    6    1    1    1    1    1    1    1    1    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    1    1    4    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    2    2    1    1    1    1    1    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    2    1    1    1    1    2    1    1    1    1    2    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   2    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 \n   1    1    1    1    1    1    1    1    1    6    1    1    1    1    1    1 \n1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 \n   1    1    1    1    1    1    1    3    1    1    4    1    1    2    1    1 \n1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 \n   2    1    1    1    2    1    4    1    2    1    1    1    1    1    1    1 \n1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 \n   1    1    1    1    1    1    1    1    2    1    1    2    1    1    1    1 \n1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 \n   1    1    1    1    2    1    1    3    1    1    1    2    1    1    1    1 \n1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 \n   2    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 \n   3    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 \n   1    1    1    4    1    1    1    6    1    1    1    1    1    1    1    1 \n1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 \n   1    1    1    2    1    1    1    2    1    1    1    1    1    2    1    1 \n1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 \n   1    2    1    1    1    1    1    1    1    1    2    2    2    1    1    1 \n1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 \n   2    1    2    1    2    1    2    1    1    2    1    2    2    2    2    1 \n1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 \n   1    1    1    1    1    2    1    1    1    2    1    1    1    1    2    1 \n1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 \n   1    4    1    4    1    4    1    1    2    1    1    1    1    1    3    1 \n1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 \n   1    1    1    2    2    2    2    2    2    2    2    1    1    2    2    2 \n1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 \n   1    2    1    1    1    1    1    2    2    2    1    2    2    2    2    1 \n1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 \n   2    1    1    1    1    1    1    1    2    2    1    2    1    1    1    1 \n1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 \n   1    1    1    1    2    1    2    2    2    2    2    2    1    1    2    1 \n1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 \n   1    1    1    2    2    2    2    2    1    1    1    2    1    1    2    2 \n1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 \n   1    2    1    1    2    1    1    2    2    2    1    2    1    2    1    1 \n1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 \n   1    1    1    1    1    1    2    1    1    1    1    4    1    1    1    1 \n1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 \n   3    1    1    2    1    1    1    2    1    1    1    1    1    2    2    1 \n1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 \n   1    1    2    1    2    2    1    1    1    1    1    2    1    1    2    1 \n1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 \n   1    3    2    2    2    1    2    1    3    1    1    1    1    1    1    1 \n1921 1922 1923 1924 1925 \n   1    1    1    1    3 \n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 338\n\n\nThe output shows that there are 128 duplicated point events.\nTo view the locations of these duplicate point events, we will plot childcare data by using the code chunk below.\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\nThere are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.\nThe second solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\nThe third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\nThe code chunk below implements the jittering approach.\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\nCreating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as(sg_sp, \"owin\")\n\nThe ouput object can be displayed by using plot() function\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\nand summary() function of Base R.\n\n\nCombining point events object and owin object\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.570982e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\nDIY: Using the method you learned in previous exercise, plot the newly derived childcareSG_ppp as shown below."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#first-order-spatial-point-patterns-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#first-order-spatial-point-patterns-analysis",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "First-order Spatial Point Patterns Analysis",
    "text": "First-order Spatial Point Patterns Analysis\nIn this section, you will learn how to perform first-order SPPA by using spatstat package. The hands-on exercise will focus on:\n\nderiving kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes,\nperforming Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour statistics.\n\n\nKernel Density Estimation\nIn this section, you will learn how to compute the kernel density estimation (KDE) of childcare services in Singapore.\n\nComputing kernel density estimation using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nThe plot() function of Base R is then used to display the kernel density derived.\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n306.6986 \n\n\n\n\nRescalling KDE values\nIn the code chunk below, rescale() is used to covert the unit of measurement from meter to kilometer.\n\nchildcareSG_ppp.km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\n\nNow, we can re-run density() using the resale data set and plot the output kde map.\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\nNotice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend).\n\n\n\nWorking with different automatic badwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.159749 1.396455 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.3066986 \n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\nThe code chunk beow will be used to compare the output of using bw.diggle and bw.ppl methods.\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\n\n\nWorking with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#fixed-and-adaptive-kde",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#fixed-and-adaptive-kde",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Fixed and Adaptive KDE",
    "text": "Fixed and Adaptive KDE\n\nComputing KDE by using fixed bandwidth\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\nComputing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, you will learn how to derive adaptive kernel density estimation by using density.adaptive() of spatstat.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\nConverting KDE output into grid object.\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\nConverting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\n\nLet us take a look at the properties of kde_childcareSG_bw_raster RasterLayer.\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -6.837601e-15, 32.45281  (min, max)\n\n\nNotice that the crs property is NA.\n\n\nAssigning projection systems\nThe code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -6.837601e-15, 32.45281  (min, max)\n\n\nNotice that the crs property is completed.\n\n\n\nVisualising the output in tmap\nFinally, we will display the raster in cartographic quality map using tmap package.\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nNotice that the raster values are encoded explicitly onto the raster pixel using the values in “v”” field.\n\n\nComparing Spatial Point Patterns using KDE\nIn this section, you will learn how to compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\nExtracting study area\nThe code chunk below will be used to extract the target planning areas.\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting target planning areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nConverting the spatial point data frame into generic sp format\nNext, we will convert these SpatialPolygonsDataFrame layers into generic spatialpolygons layers.\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\nCreating owin object\nNow, we will convert these SpatialPolygons objects into owin objects that is required by spatstat.\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\nCombining childcare points and the study area\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nComputing KDE\nThe code chunk below will be used to compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\n\n\n\n\nComputing fixed bandwidth KDE\nFor comparison purposes, we will use 250m as the bandwidth.\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Nearest Neighbour Analysis",
    "text": "Nearest Neighbour Analysis\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThe test hypotheses are:\nHo = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confident interval will be used.\n\nTesting spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.5062, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nWhat conclusion can you draw from the test result?\n\n\nClark and Evans Test: Choa Chu Kang planning area\nIn the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.89603, p-value = 0.08707\nalternative hypothesis: two-sided\n\n\n\n\nClark and Evans Test: Tampines planning area\nIn the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.67917, p-value = 3.161e-11\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#overview",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.1 Overview",
    "text": "7.1 Overview\nNetwork constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.\nIn this hands-on exercise, you are going to gain hands-on experience on using appropriate functions of spNetwork package:\n\nto derive network constrained kernel density estimation (NetKDE), and\nto perform network G-function and k-function analysis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#the-data",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.2 The Data",
    "text": "7.2 The Data\nIn this study, we will analyse the spatial distribution of childcare centre in Punggol planning area. For the purpose of this study, two geospatial data sets will be used. They are:\n\nPunggol_St, a line features geospatial data which store the road network within Punggol Planning Area.\nPunggol_CC, a point feature geospatial data which store the location of childcare centres within Punggol Planning Area.\n\nBoth data sets are in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#installing-and-loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#installing-and-loading-the-r-packages",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Installing and Loading the R packages",
    "text": "Installing and Loading the R packages\nIn this hands-on exercise, five R packages will be used, they are:\n\nsf, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nUse the code chunk below to install and launch the five R packages.\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#spatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#spatial-data-wrangling",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Spatial Data Wrangling",
    "text": "Spatial Data Wrangling\n\nImporting the spatial data\nIn this section, st_read() of sf package will be used to import these three geospatial data sets into R.\n\nchildcare_sf &lt;- st_read(\"../../data/geospatial/ChildCareServices.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `ChildCareServices' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf &lt;- st_read(dsn = \"../../data/geospatial\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"../../data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBefore we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.\nDIY: Using the appropriate sf function you learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.\nNotice that except childcare_sf, both mpsz_sf and sg_sf do not have proper crs information.\nDIY: Using the method you learned in Lesson 2, assign the correct crs to mpsz_sf and sg_sf simple feature data frames.\nDIY: If necessary, changing the referencing system to Singapore national projected coordinate system.\n\n\nMapping the geospatial data sets\nAfter checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.\nDIY: Using the mapping methods you learned in Hands-on Exercise 3, prepare a map as shown below.\nNotice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\nAlternatively, we can also prepare a pin map by using the code chunk below.\n\ntmap_mode('view')\n\n\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\ntmap_mode('plot')\n\nNotice that at the interactive mode, tmap is using leaflet for R API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\nReminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#geospatial-data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#geospatial-data-wrangling-1",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Geospatial Data wrangling",
    "text": "Geospatial Data wrangling\nAlthough simple feature data frame is gaining popularity again sp’s Spatial* classes, there are, however, many geospatial analysis packages require the input geospatial data in sp’s Spatial* classes. In this section, you will learn how to convert simple feature data frame to sp’s Spatial* class.\n\nConverting sf data frames to sp’s Spatial* class\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nDIY: Using appropriate function, display the information of these three Spatial* classes as shown below.\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, TELOK BLANGAH DRIVE, #01 - 19/51, SINGAPORE 100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;PCF SPARKLETOTS PRESCHOOL @ TELOK BLANGAH BLK 44 (CC)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;349C54F201805938&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                                            &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;99982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;35, ALLANBROOKE ROAD, SINGAPORE 099982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;ISLANDER PRE-SCHOOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;4F63ACF93EFABE7F&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nNotice that the geospatial data have been converted into their respective sp’s Spatial* classes now.\n\n\nConverting the Spatial* class into generic sp format\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nNext, you should display the sp objects properties as shown below.\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n\n\nChallenge: Do you know what are the differences between Spatial* classes and generic sp object?\n\n\nConverting the generic sp format into spatstat’s ppp format\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1925 points\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\nNow, let us plot childcare_ppp and examine the different.\n\nchildcare_ppp &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1925 points\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\nNow, let us plot childcare_ppp and examine the different.\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\nYou can take a quick look at the summary statistics of the newly created ppp object by using the code chunk below.\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\nNotice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\n\nHandling duplicated points\nWe can check the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    3    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    4    1    1    1    1    1    1    1    1    1    1    2 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    3    1    1    1    2    1   10    1    1    1    1    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    2    1    1    3    1    1    1    2    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    2    2    2    1    1    1    1    1    1    1    1    2    1    1    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    2    2    2    1    1    1    1    1    2    1    4    1    1    2 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   3    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   1    1    1    1    1   10    1    1    3    1    1    1    1    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    2    6    1    2    1    1    2    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   3    2    3    2    1    2    1    1    2    4    1    6    6    1    1    1 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   2    1    1    1    1    2    1    1    1    1    1    1    3    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    4    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    2    1    1    1    2    1    1    1    2    1    1    1    1    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    2    1    2    2    1    1    1    1    2    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   4    1    1    1    1    2    1    1    1    1    1    1    2    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   2    2    1    1    1    1    1   10    1    2    1    1    1    2    1    3 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1   10   10   10    1    1    1    1    1    1    1    1    1 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    2    1    2    1    1    1    1    3    1    2    1    1    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    3    1    1    1    1    1    2    1    1    2 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    3    1    1    1    1    1    1    1    1    2    2    2    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    3    1    1    1    2    1    1    1    2    2    1    1    1    1    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    4    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    4    1    1    1    1    1    1    4    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    2    1    1 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    3    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    1    1    1    1   10    1    1    1    1    1    2 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    1    2    1    2    1   10    1    4    1    2    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   3    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    3    1    1    3    1    1    1    1    2    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    2 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    2    1    1    1    1    1    2    2    1    1    1    1    2    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    2    1    2    1    1    1    2    1    1    1    2    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    2    1    1    2    1    1    1    1    1    1    1    1    2    1 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    2    2    1    1    1    1    2    1    1    1    1    2    1    1    2 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    2    4    1    1    1    1    1    1    2    1    2    2    2 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   2    1    1    1    1    2    1    1    2    2    2    2    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    2    2    2    1    1    1    1    1    2    1    1    2    2    2    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    2    1    1    2    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   2    1    2    1    2    1    1    1    1    1    1    2    2    1    1    2 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    2    1    2    1    2    1    1    1    1    1    2    1    1    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    2    1    2    2    2    2    2    1    1    1    1    1    2    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    2    1    1    2    1    1    1    1    2    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    3    1    1    1    1    1    1    1   10 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   2    1    3    2    1    2    1    1    2    3    2    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    2    1    2    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    4    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n  10    1    2    4    1    1    1    4    1    4    1    1    1    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    1    1    1    1    1    4    2    3    2    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   2    2    1    1    1    1    1    2    2    3    1    1    1    1    1    2 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   2    2    2    1    1    1    6    1    1    1    1    1    1    1    1    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    1    1    4    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    2    2    1    1    1    1    1    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    2    1    1    1    1    2    1    1    1    1    2    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   2    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 \n   1    1    1    1    1    1    1    1    1    6    1    1    1    1    1    1 \n1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 \n   1    1    1    1    1    1    1    3    1    1    4    1    1    2    1    1 \n1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 \n   2    1    1    1    2    1    4    1    2    1    1    1    1    1    1    1 \n1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 \n   1    1    1    1    1    1    1    1    2    1    1    2    1    1    1    1 \n1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 \n   1    1    1    1    2    1    1    3    1    1    1    2    1    1    1    1 \n1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 \n   2    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 \n   3    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 \n   1    1    1    4    1    1    1    6    1    1    1    1    1    1    1    1 \n1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 \n   1    1    1    2    1    1    1    2    1    1    1    1    1    2    1    1 \n1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 \n   1    2    1    1    1    1    1    1    1    1    2    2    2    1    1    1 \n1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 \n   2    1    2    1    2    1    2    1    1    2    1    2    2    2    2    1 \n1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 \n   1    1    1    1    1    2    1    1    1    2    1    1    1    1    2    1 \n1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 \n   1    4    1    4    1    4    1    1    2    1    1    1    1    1    3    1 \n1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 \n   1    1    1    2    2    2    2    2    2    2    2    1    1    2    2    2 \n1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 \n   1    2    1    1    1    1    1    2    2    2    1    2    2    2    2    1 \n1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 \n   2    1    1    1    1    1    1    1    2    2    1    2    1    1    1    1 \n1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 \n   1    1    1    1    2    1    2    2    2    2    2    2    1    1    2    1 \n1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 \n   1    1    1    2    2    2    2    2    1    1    1    2    1    1    2    2 \n1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 \n   1    2    1    1    2    1    1    2    2    2    1    2    1    2    1    1 \n1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 \n   1    1    1    1    1    1    2    1    1    1    1    4    1    1    1    1 \n1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 \n   3    1    1    2    1    1    1    2    1    1    1    1    1    2    2    1 \n1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 \n   1    1    2    1    2    2    1    1    1    1    1    2    1    1    2    1 \n1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 \n   1    3    2    2    2    1    2    1    3    1    1    1    1    1    1    1 \n1921 1922 1923 1924 1925 \n   1    1    1    1    3 \n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 338\n\n\nThe output shows that there are 128 duplicated point events.\nTo view the locations of these duplicate point events, we will plot childcare data by using the code chunk below.\n\ntmap_mode('view')\n\n\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\nThere are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.\nThe second solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\nThe third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\nThe code chunk below implements the jittering approach.\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nDIY: Using the method you learned in previous section, check if any dusplicated point in this geospatial data.\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\nCreating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as(sg_sp, \"owin\")\n\nThe ouput object can be displayed by using plot() function\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\nand summary() function of Base R.\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\n\nCombining point events object and owin object\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.570982e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nDIY: Using the method you learned in previous exercise, plot the newly derived childcareSG_ppp as shown below.\n\n\nExtracting study area\nThe code chunk below will be used to extract the target planning areas.\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting target planning areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nConverting the spatial point data frame into generic sp format\nNext, we will convert these SpatialPolygonsDataFrame layers into generic spatialpolygons layers.\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\n5.5.6.3 Creating owin object\nNow, we will convert these SpatialPolygons objects into owin objects that is required by spatstat.\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n5.5.6.4 Combining childcare points and the study area\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#installing-and-launching-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#installing-and-launching-the-r-packages",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.3 Installing and launching the R packages",
    "text": "7.3 Installing and launching the R packages\nIn this hands-on exercise, four R packages will be used, they are:\n\nspNetwork, which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\nrgdal, which provides bindings to the ‘Geospatial’ Data Abstraction Library (GDAL) (&gt;= 1.11.4) and access to projection/transformation operations from the PROJ library. In this exercise, rgdal will be used to import geospatial data in R and store as sp objects.\nsp, which provides classes and methods for dealing with spatial data in R. In this exercise, it will be used to manage SpatialPointsDataFrame and SpatiaLinesDataFrame, and for performing projection transformation.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nUse the code chunk below to install and launch the four R packages.\n\npacman::p_load(sp, sf, rgdal, spNetwork, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#data-import-and-preparation",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.4 Data Import and Preparation",
    "text": "7.4 Data Import and Preparation\nThe code chunk below uses st_read() of sf package to important Punggol_St and Punggol_CC geospatial data sets into RStudio as sf data frames.\n\nnetwork &lt;- st_read(dsn=\"../../data/geospatial\", \n                   layer=\"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\n\nchildcare &lt;- st_read(dsn=\"../../data/geospatial\",\n                     layer=\"Punggol_CC\")\n\nReading layer `Punggol_CC' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\nWe can examine the structure of the output SpatialDataFrame in RStudio. Alternative, code chunk below can be used to print the content of network SpatialLineDataFrame and childcare SpatialPointsDataFrame by using the code chunk below.\n\nstr(network)\n\nClasses 'sf' and 'data.frame':  2642 obs. of  3 variables:\n $ LINK_ID : num  1.16e+08 1.16e+08 1.16e+08 1.16e+08 1.16e+08 ...\n $ ST_NAME : chr  \"PUNGGOL RD\" \"PONGGOL TWENTY-FOURTH AVE\" \"PONGGOL SEVENTEENTH AVE\" \"PONGGOL SEVENTEENTH AVE\" ...\n $ geometry:sfc_LINESTRING of length 2642; first list element:  'XY' num [1:2, 1:2] 36547 36559 44575 44614\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA\n  ..- attr(*, \"names\")= chr [1:2] \"LINK_ID\" \"ST_NAME\"\n\nstr(childcare)\n\nClasses 'sf' and 'data.frame':  61 obs. of  2 variables:\n $ Name    : chr  \"kml_10\" \"kml_99\" \"kml_100\" \"kml_101\" ...\n $ geometry:sfc_POINT of length 61; first list element:  'XYZ' num  36174 42550 0\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA\n  ..- attr(*, \"names\")= chr \"Name\"\n\n\nWhen I exploring spNetwork’s functions, it came to my attention that spNetwork is expecting the geospatial data contains complete CRS information.\nIn the code chunk below, spTransform() of sp package is used to assign EPSG code to the SpatialDataFrames. The epsg:3414 is the code for svy21.\n\n#childcare &lt;-spTransform(childcare,\n#                        CRS(\"+init=epsg:3414\"))\n#network &lt;- spTransform(network,\n#                       CRS(\"+init=epsg:3414\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#visualising-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#visualising-the-geospatial-data",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.5 Visualising the Geospatial Data",
    "text": "7.5 Visualising the Geospatial Data\nBefore we jump into the analysis, it is a good practice to visualise the geospatial data. There are at least two ways to visualise the geospatial data. One way is by using plot() of Base R as shown in the code chunk below.\n\nplot(network)\nplot(childcare,add=T,col='red',pch = 19)\n\n\n\n\n\n\n\n\n\nTo visualise the geospatial data with high cartographic quality and interactive manner, the mapping function of tmap package can be used as shown in the code chunk below.\n\ntmap_mode('view')\ntm_shape(childcare) + \n  tm_dots() + \n  tm_shape(network) +\n  tm_lines()\n\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#network-constrained-kde-netkde-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#network-constrained-kde-netkde-analysis",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.6 Network Constrained KDE (NetKDE) Analysis",
    "text": "7.6 Network Constrained KDE (NetKDE) Analysis\nIn this section, we will perform NetKDE analysis by using appropriate functions provided in spNetwork package.\n\n7.6.1 Preparing the lixels objects\nBefore computing NetKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with lixelize_lines() of spNetwork as shown in the code chunk below.\n\nlixels &lt;- lixelize_lines(network, \n                         700, \n                         mindist = 350)\n\nWhat can we learned from the code chunk above:\n\nThe length of a lixel, lx_length is set to 700m, and\nThe minimum length of a lixel, mindist is set to 350m.\n\nAfter cut, if the length of the final lixel is shorter than the minimum distance, then it is added to the previous lixel. If NULL, then mindist = maxdist/10. Also note that the segments that are already shorter than the minimum distance are not modified\nNote: There is another function called lixelize_lines.mc() which provide multicore support.\n\n\n7.6.2 Generating line centre points\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.\n\nsamples &lt;- lines_center(lixels)\n\nThe points are located at center of the line based on the length of the line.\n\n\n7.6.3 Performing NetKDE\nWe are ready to computer the NetKDE by using the code chunk below.\n\ndensities &lt;- nkde(network, \n                  events = childcare,\n                  w = rep(1,nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 5, #we aggregate events within a 5m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n\nWhat can we learn from the code chunk above?\n\nkernel_name argument indicates that quartic kernel is used. Are possible kernel methods supported by spNetwork are: triangle, gaussian, scaled gaussian, tricube, cosine ,triweight, epanechnikov or uniform.\nmethod argument indicates that simple method is used to calculate the NKDE. Currently, spNetwork support three popular methods, they are:\n\nmethod=“simple”. This first method was presented by Xie et al. (2008) and proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an areal unit.\nmethod=“discontinuous”. The method is proposed by Okabe et al (2008), which equally “divides” the mass density of an event at intersections of lixels.\nmethod=“continuous”. If the discontinuous method is unbiased, it leads to a discontinuous kernel function which is a bit counter-intuitive. Okabe et al (2008) proposed another version of the kernel, that divide the mass of the density at intersection but adjusts the density before the intersection to make the function continuous.\n\n\nThe user guide of spNetwork package provide a comprehensive discussion of nkde(). You should read them at least once to have a basic understanding of the various parameters that can be used to calibrate the NetKDE model.\n\n7.6.3.1 Visualising NetKDE\nBefore we can visualise the NetKDE values, code chunk below will be used to insert the computed density values (i.e. densities) into samples and lixels objects as density field.\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\nSince svy21 projection system is in meter, the computed density values are very small i.e. 0.0000005. The code chunk below is used to resale the density values from number of events per meter to number of events per kilometer.\n\n# rescaling to help the mapping\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\nThe code below uses appropriate functions of tmap package to prepare interactive and high cartographic quality map visualisation.\n\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(childcare)+\n  tm_dots()\n\n\n\n\n\n\ntmap_mode('plot')\n\nThe interactive map above effectively reveals road segments (darker color) with relatively higher density of childcare centres than road segments with relatively lower density of childcare centres (lighter color)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#network-constrained-g--and-k-function-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex-03/Hands-on_Ex03.html#network-constrained-g--and-k-function-analysis",
    "title": "Hands-on Exercise 3: 1st Order Spatial Point Patterns Analysis Methods & 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "7.7 Network Constrained G- and K-Function Analysis",
    "text": "7.7 Network Constrained G- and K-Function Analysis\nIn this section, we are going to perform complete spatial randomness (CSR) test by using kfunctions() of spNetwork package. The null hypothesis is defined as:\nHo: The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.\nThe CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.\nIf this hypothesis is rejected, we may infer that the distribution of childcare centres are spatially interacting and dependent on each other; as a result, they may form nonrandom patterns.\n\nkfun_childcare &lt;- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, \n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)\n\nWhat can we learn from the code chunk above?\nThere are ten arguments used in the code chunk above they are:\n\nlines: A SpatialLinesDataFrame with the sampling points. The geometries must be a SpatialLinesDataFrame (may crash if some geometries are invalid).\npoints: A SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.\nstart: A double, the start value for evaluating the k and g functions.\nend: A double, the last value for evaluating the k and g functions.\nstep: A double, the jump between two evaluations of the k and g function.\nwidth: The width of each donut for the g-function.\nnsim: An integer indicating the number of Monte Carlo simulations required. In the above example, 50 simulation was performed. Note: most of the time, more simulations are required for inference\nresolution: When simulating random points on the network, selecting a resolution will reduce greatly the calculation time. When resolution is null the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points are selected vertices on the new network.\nconf_int: A double indicating the width confidence interval (default = 0.05).\n\nFor the usage of other arguments, you should refer to the user guide of spNetwork package.\nThe output of kfunctions() is a list with the following values:\n\nplotkA, a ggplot2 object representing the values of the k-function\nplotgA, a ggplot2 object representing the values of the g-function\nvaluesA, a DataFrame with the values used to build the plots\n\nFor example, we can visualise the ggplot2 object of k-function by using the code chunk below.\n\nkfun_childcare$plotk\n\n\n\n\n\n\n\n\nThe blue line is the empirical network K-function of the childcare centres in Punggol planning area. The gray envelop represents the results of the 50 simulations in the interval 2.5% - 97.5%. Because the blue line between the distance of 250m-400m are below the gray area, we can infer that the childcare centres in Punggol planning area resemble regular pattern at the distance of 250m-400m.\n\nReferences\n\nhttps://r4gdsa.netlify.app/chap07.html#installing-and-launching-the-r-packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#overview",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#the-study-area-and-data",
    "href": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#the-study-area-and-data",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "The Study Area and Data",
    "text": "The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\nGetting Started\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"../../data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"../../data/aspatial/Hunan_2012.csv\", show_col_types = FALSE)\n\n\n\n8.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n#tmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\nQuestion: How to resolve fill argument error for tmap_arrange(basemap, gdppc, asp=1, ncol=2)?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nIn this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nComputing (QUEEN) contiguity based neighbours\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nQuestion: Why is nb1 returning null?\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating (ROOK) contiguity based neighbours\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.\n\n\nVisualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\nWow, cbind seems very important for creating point objects!\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n8.5.3.1 Plotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\nThis looks like a brain neural network hahaha.\n\n\nPlotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Computing distance based neighbours",
    "text": "Computing distance based neighbours\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nQuiz: What is the meaning of “Average number of links: 3.681818” shown above?\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nPlotting fixed distance weight matrix\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no less no more!\n\nPlotting distance based neighbours\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#weights-based-on-idw",
    "href": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#weights-based-on-idw",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Weights based on IDW",
    "text": "Weights based on IDW\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex-04/Hands-on_Ex04.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n8.8.1 Spatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nQuestion: why is this error ’ Error in lag.listw(rswm_q, hunan$GDPPC) : hunan$GDPPC not a vector or matrix’ occurring?\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\n#tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\nQuestion: tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2) gives fill argument error?\n\n\nSpatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nFirst, let us examine the result by using the code chunk below.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\n\nQuestion: Can you understand the meaning of Spatial lag as a sum of neighboring values now?\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nSpatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\n8.8.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\nReferences\n\nhttps://r4gdsa.netlify.app/chap08.html"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/Inclass_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/Inclass_Ex04.html",
    "title": "In Class Exercise 4",
    "section": "",
    "text": "GWmodel: for calibrating statistical models by explicitly incorporating weights - it doesnt use contiguity\n\nprovides collection of distance matrix to calculate some statistical analysis, multivariate statistics such as principle component analysis (PCA) and logistic regression, etc.\nWe are going to do summary statistics analysis - aggregation functions such as sum, average\n\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\nImport Data:\n\nhunan &lt;- st_read(dsn = \"../../data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv(\"../../data/aspatial/Hunan_2012.csv\", show_col_types = FALSE)\n\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;%\nselect (1:4, 7, 15)\n\nCurrently hunan variable in sf. As an older library, gwmodel only accepts spatial data. So we need to convert from sf to spatial data.\n\nhunan_sp &lt;- hunan %&gt;%\n  as_Spatial()\n\n\ngwstat &lt;- gwss(data = hunan_sp, vars = \"GDPPC\", bw = 6, kernel = \"bisquare\", adaptive = TRUE, longlat = T)\n\nSince adaptive = True, we need to specify the number of neighbors using bw = 6. If adaptive = False, we need to specify bw as the fixed distance needed to capture any number of neighbors within that distance. “bisquare” for kernel is similar to what we learnt in class slides like the formula.\ngwstat variable is saved in SDF object where it gives summary statistics of data and selecting ‘data’ key in SDF object shows you the data table. GDPPC_LM is based on distance metrics instead of contiguity metrics which is based on spatial window sum as discussed in the slides.\n\n\nPlot similar to spatial window sum plots\n\nGDPPC_LM\nGDPPC_LSD\nLVar\nLSKe\nLCV"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Please visit https://is415-gaa-maaruni.netlify.app/take-home_ex/take-home_ex01/take-home_ex01_3 for the correct assignment:"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/Inclass_Ex04.html#side-by-side-comparison-of-nearest-neighbors-vs-distance-link",
    "href": "In-class_Ex/In-class_Ex04/Inclass_Ex04.html#side-by-side-comparison-of-nearest-neighbors-vs-distance-link",
    "title": "In Class Exercise 4",
    "section": "Side by Side Comparison of nearest neighbors vs distance link",
    "text": "Side by Side Comparison of nearest neighbors vs distance link\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\nFour different spatial lagged variables:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and (window functions - includes the diagonal neighbors!)\nspatial window sum. (window functions - includes the diagonal neighbors & similar to spatial lag as a sum of neighbouring values since it sums up all neighbors)\n\nBy default, it will exclude the weights so in order to bring it in we need to be explicit."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#overview",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#data-being-used",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#data-being-used",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Data being used",
    "text": "Data being used\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\nGetting Started\nImporting the relevant packages:\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n9.3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"../../data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nplot(hunan)\n\n\n\n\n\n\n\n\n\n\n9.3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"../../data/aspatial/Hunan_2012.csv\", show_col_types = FALSE)\n\n\n\n9.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n9.3.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "9.4 Global Measures of Spatial Autocorrelation",
    "text": "9.4 Global Measures of Spatial Autocorrelation\nIn this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n9.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n9.4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\nPersonal observation: This seems similar to spatial window sum discussed during last week’s lesson.\nWhile this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "9.5 Global Measures of Spatial Autocorrelation: Moran’s I",
    "text": "9.5 Global Measures of Spatial Autocorrelation: Moran’s I\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n9.5.1 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nPersonal Inference: The variance seems super low, meaning the data has a clear pattern with little to no difference between each datapoint.\n\n\n9.5.2 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n9.5.3 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\nBperm is slightly leaning to the left for the value of simulated Moran’s I. What does that mean?\nChallenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "9.6 Global Measures of Spatial Autocorrelation: Geary’s C",
    "text": "9.6 Global Measures of Spatial Autocorrelation: Geary’s C\nIn this section, you will learn how to perform Geary’s C statistics testing by using appropriate functions of spdep package.\n\n9.6.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nVariance is still very low but is better than before as it shows more standard deviation and difference in values.\n\n\n9.6.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nSo what does this mean?\n\n\n9.6.3 Visualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\nNow, it is more normalised to the center!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#spatial-correlogram",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "9.7 Spatial Correlogram",
    "text": "9.7 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n9.7.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nIt is sorted in descending variance so it gives us an indication of the most different factors that could possibly be contributing to the lags result above\n\n\n9.7.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#overview-1",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#overview-1",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "10.1 Overview",
    "text": "10.1 Overview\nIn this hands-on exercise, you will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#getting-started-1",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "10.2 Getting Started",
    "text": "10.2 Getting Started\n\n10.2.1 The analytical question\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n\n10.2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#importing-the-data",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Importing the data",
    "text": "Importing the data\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#reading-the-files",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#reading-the-files",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Reading the files",
    "text": "Reading the files\n\nhunan &lt;- st_read(dsn = \"../../data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"../../data/aspatial/Hunan_2012.csv\", show_col_types = FALSE)\n\n\nPerforming relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n10.3.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\nPersonal observation: This uses nearest neighbors on the right to get a more informative distribution on the right"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "10.4 Global Spatial Autocorrelation",
    "text": "10.4 Global Spatial Autocorrelation\nIn this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n10.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n10.4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n10.4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n\n10.4.4 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n10.4.4.1 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nQuestion: What statistical conclustion can you draw fro mthe output above?\n\n\n\n10.4.4.2 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\n\n\nQuestion: What statistical observation can you draw fro mthe output above?\n\n\nChallenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.\n\n\n\n\n10.4.5 Global Spatial Autocorrelation: Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\n10.4.5.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\n\n\n\n10.4.5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n10.4.5.3 Visualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\n\nQuestion: What statistical observation can you draw from the output?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#spatial-correlogram-1",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#spatial-correlogram-1",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "10.5 Spatial Correlogram",
    "text": "10.5 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n10.5.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nQuestion: What statistical observation can you draw from the plot above?\n\n\n\n10.5.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "10.6 Cluster and Outlier Analysis",
    "text": "10.6 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n10.6.1 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n10.6.1.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n10.6.1.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n10.6.1.3 Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n10.6.1.4 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "10.7 Creating a LISA Cluster Map",
    "text": "10.7 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n10.7.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations. &lt;- personal question: what does this even signify in the business context?\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n10.7.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\n10.7.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)    \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05    \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4  \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n10.7.4 Plotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\nhow to bring the image generated at the top here? :\n\nQuestion: What statistical observations can you draw from the LISA map above?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "10.8 Hot Spot and Cold Spot Area Analysis",
    "text": "10.8 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n10.8.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n10.8.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n10.8.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n10.8.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n10.8.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\n10.8.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#computing-gi-statistics",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "10.9 Computing Gi statistics",
    "text": "10.9 Computing Gi statistics\n\n10.9.1 Gi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n10.9.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\n\n\n\n10.9.3 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n10.9.4 Mapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\nQuestion: What statistical observation can you draw from the map above?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Human mobility, the movement of human beings in space and time, reflects the spatial-temporal characteristics of human behavior. With the advancement Information and Communication Technologies (ICT) especially smart phone, a large volume of data related to human mobility have been collected. By using appropriate GIS analysis methods, these data are potentially useful in supporting smart city planning and management.\nIn Singapore, one of the important source of data related to human mobility is from Land Transport Authority (LTA) DataMall. Two data sets related to human mobility are provided by the portal, they are: Passenger Volume by Origin Destination Train Stations and Passenger Volume by Origin Destination Bus Stops. One of the limitation of these data sets is that their location are biased to either bus stops or MRT/LRT stations. In 2020, another very interesting human mobility data set called Grab Posisi was released by GRAB, one of the largest shared taxi operator in South-east Asia. There are two data sets been released and one of them is for Singapore.\nGrab is one of the most frequently used services in Singapore, with ride hailing services to ordering food to be delivered via Grab. In this assignment we will be looking at Grab’s ride hailing services by looking at the end destinations of users taking trips and see its distribution across Singapore and specifically Singapore’s roads. This will be useful in identifying congestion rates and much more at these roads.\n\n\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate spatial point patterns analysis methods to discover the geographical and spatio-temporal distribution of Grab hailing services locations in Singapore.\n\n\n\nThe specific tasks of this take-home exercise are as follows:\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer in sf tibble data.frames:\n\nGrab taxi location points either by origins or destinations.\nRoad layer within Singapore excluding outer islands.\nSingapore boundary layer excluding outer islands\n\nUsing the extracted data, derive traditional Kernel Density Estimation layers.\nUsing the extracted data, derive either Network Kernel Density Estimation (NKDE) or Temporal Network Kernel Density Estimation (TNKDE)\nUsing appropriate tmap functions, display the kernel density layers on openstreetmap of Singapore.\nDescribe the spatial patterns revealed by the kernel density maps"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#geospatial-data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#geospatial-data-wrangling",
    "title": "Take Home Exercise 1",
    "section": "GEOSPATIAL DATA WRANGLING",
    "text": "GEOSPATIAL DATA WRANGLING\nAlthough simple feature data frame is gaining popularity again sp’s Spatial* classes, there are, however, many geospatial analysis packages require the input geospatial data in sp’s Spatial* classes. In this section, we will convert simple feature data frame to sp’s Spatial* class.\n\nCONVERTING SF DATA FRAMES TO SP’S SPATIAL* CLASS\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\ngrab_trips &lt;- as_Spatial(trips_sf_geometry)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nLets view the data generated:\n\ngrab_trips\n\nclass       : SpatialPoints \nfeatures    : 28000 \nextent      : 3637.207, 49870.63, 25221.3, 49507.79  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\n\nCONVERTING THE SPATIAL* CLASS INTO GENERIC SP FORMAT\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\ngrab_trips_sp &lt;- as(grab_trips, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nNext, you should display the sp objects properties as shown below.\n\ngrab_trips_sp\n\nclass       : SpatialPoints \nfeatures    : 28000 \nextent      : 3637.207, 49870.63, 25221.3, 49507.79  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n\n\n\n\nCONVERTING THE GENERIC SP FORMAT INTO SPATSTAT’S PPP FORMAT\n\ngrab_trips_ppp &lt;- as(grab_trips_sp, \"ppp\")\ngrab_trips_ppp\n\nPlanar point pattern: 28000 points\nwindow: rectangle = [3637.21, 49870.63] x [25221.3, 49507.79] units\n\n\n\nplot(grab_trips_ppp)\n\n\n\n\n\n\n\n\n\nsummary(grab_trips_ppp)\n\nPlanar point pattern:  28000 points\nAverage intensity 2.493661e-05 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [3637.21, 49870.63] x [25221.3, 49507.79] units\n                    (46230 x 24290 units)\nWindow area = 1122850000 square units\n\n\n\n\nHANDLING DUPLICATED POINTS\nWe can check the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(grab_trips_ppp))\n\n[1] FALSE\n\n\nThus there are no duplicate data. So, we will not need to use methods to deal with duplicate data such as deleting of duplicate data, jittering and make each point “unique”.\n\n\nCREATING OWIN OBJECT\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as(sg_sp, \"owin\")\n\nThe ouput object can be displayed by using plot() function\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\n\nCOMBINING POINT EVENTS OBJECT AND OWIN OBJECT\nIn this last step of geospatial data wrangling, we will extract grab trip events that are located within Singapore by using the code chunk below.\n\ngrab_trips_ppp_SG = grab_trips_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\nsummary(grab_trips_ppp_SG)\n\nPlanar point pattern:  27937 points\nAverage intensity 3.731196e-05 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(grab_trips_ppp_SG)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#first-order-spatial-point-patterns-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#first-order-spatial-point-patterns-analysis",
    "title": "Take Home Exercise 1",
    "section": "FIRST-ORDER SPATIAL POINT PATTERNS ANALYSIS",
    "text": "FIRST-ORDER SPATIAL POINT PATTERNS ANALYSIS\nIn this section, we will perform first-order SPPA by using spatstat package. The hands-on exercise will focus on:\n\nderiving kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes,\nperforming Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour statistics.\n\n\nKERNEL DENSITY ESTIMATION\nIn this section, we will compute the kernel density estimation (KDE) of grab trips in Singapore.\n\nCOMPUTING KERNEL DENSITY ESTIMATION USING AUTOMATIC BANDWIDTH SELECTION METHOD\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\nkde_grab_trips_SG_bw &lt;- density(grab_trips_ppp_SG,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nThe plot() function of Base R is then used to display the kernel density derived.\n\nplot(kde_grab_trips_SG_bw)\n\n\n\n\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.\n\nbw &lt;- bw.diggle(grab_trips_ppp_SG)\nbw\n\n   sigma \n8.573762 \n\n\n\n\nRESCALLING KDE VALUES - Leads to better visualisation\nIn the code chunk below, rescale() is used to covert the unit of measurement from meter to kilometer.\n\ngrab_trips_ppp_SG.km &lt;- rescale(grab_trips_ppp_SG, 1000, \"km\")\n\nNow, we can re-run density() using the resale data set and plot the output kde map.\n\nkde_grab_trips_SG.bw &lt;- density(grab_trips_ppp_SG.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_grab_trips_SG.bw)\n\n\n\n\n\n\n\n\n\n\n\nWORKING WITH DIFFERENT AUTOMATIC BADWIDTH METHODS\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\n bw.CvL(grab_trips_ppp_SG.km)\n\n   sigma \n3.919245 \n\n\n\nbw.scott(grab_trips_ppp_SG.km)\n\n  sigma.x   sigma.y \n1.4775735 0.9044268 \n\n\n\nbw.ppl(grab_trips_ppp_SG.km)\n\n    sigma \n0.1981516 \n\n\n\nbw.diggle(grab_trips_ppp_SG.km)\n\n      sigma \n0.008573762 \n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\nThe code chunk beow will be used to compare the output of using bw.diggle and bw.ppl methods.\n\nkde_grab_trips_SG.ppl &lt;- density(grab_trips_ppp_SG.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_grab_trips_SG.bw, main = \"bw.diggle\")\nplot(kde_grab_trips_SG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\n\n\nWORKING WITH DIFFERENT KERNEL METHODS\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.The code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(grab_trips_ppp_SG.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(grab_trips_ppp_SG.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(grab_trips_ppp_SG.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(grab_trips_ppp_SG.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#fixed-and-adaptive-kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#fixed-and-adaptive-kde",
    "title": "Take Home Exercise 1",
    "section": "FIXED AND ADAPTIVE KDE",
    "text": "FIXED AND ADAPTIVE KDE\n\nCOMPUTING KDE BY USING FIXED BANDWIDTH\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of grab_trips_ppp_SG.km object is in kilometer, hence the 600m is 0.6km.\n\nkde_grab_trips_600 &lt;- density(grab_trips_ppp_SG.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_grab_trips_600)\n\n\n\n\n\n\n\n\n\n\nCOMPUTING KDE BY USING ADAPTIVE BANDWIDTH\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead. However, since in Singapore, it is a small city with fully urban zones, adaptive bandwidth will be unnecessary and fixed bandwidth will be more suitable. However, we will experiment and display both to see the difference.\nIn this section, we will derive adaptive kernel density estimation by using density.adaptive() of spatstat.\n\nkde_grabtripssg_adaptive &lt;- adaptive.density(grab_trips_ppp_SG.km, method=\"kernel\")\nplot(kde_grabtripssg_adaptive)\n\n\n\n\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(kde_grab_trips_SG.bw, main = \"Fixed bandwidth\")\nplot(kde_grabtripssg_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\nCONVERTING KDE OUTPUT INTO GRID OBJECT.\nThe result is the same, we just convert it so that it is suitable for mapping purposes\n\ngridded_kde_grabtripsSG_bw &lt;- as.SpatialGridDataFrame.im(kde_grab_trips_SG.bw)\nspplot(gridded_kde_grabtripsSG_bw)\n\n\n\n\n\n\n\n\nAs can be seen above, the highest trip destinations occur in central area and east area near Changi. We may assume many people going to the airport may be rushing there with their large luggages using ride hailing services. Thus, there is a lot of grab trips with their destinations being at Changi airport area.\n\nCONVERTING GRIDDED OUTPUT INTO RASTER\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\nkde_grabtrips_bw_raster &lt;- raster(gridded_kde_grabtripsSG_bw)\n\nLet us take a look at the properties of kde_grabtrips_bw_raster RasterLayer.\n\nkde_grabtrips_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -3.976909e-13, 1947.276  (min, max)\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -6.837601e-15, 32.45281  (min, max)\nNotice that the crs property is NA.\n\n\nASSIGNING PROJECTION SYSTEMS\nThe code chunk below will be used to include the CRS information on gridded_kde_grabtripsSG_bw RasterLayer. It has been projected to Singapore’s coordinate system using 3414.\n\nprojection(kde_grabtrips_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_grabtrips_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -3.976909e-13, 1947.276  (min, max)\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -6.837601e-15, 32.45281  (min, max)\nNotice that the crs property is completed.\n\n\n\nVISUALISING THE OUTPUT IN TMAP\nFinally, we will display the raster in cartographic quality map using tmap package.\n\ntm_shape(kde_grabtrips_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\nClearly, the number of trips to changi airport region is clearly in the 2000 - 2500 range. This gives a very skewed distribution for this range in certain parts of the map.\n\n\nCOMPARING SPATIAL POINT PATTERNS USING KDE\nIn this section, you will learn how to compare KDE of grab trip destinations at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\nEXTRACTING STUDY AREA\nThe code chunk below will be used to extract the target planning areas.\nLets view all available zones to zoom it on:\n\nprint(mpsz@data$PLN_AREA_N)\n\n  [1] \"MARINA SOUTH\"            \"OUTRAM\"                 \n  [3] \"SINGAPORE RIVER\"         \"BUKIT MERAH\"            \n  [5] \"BUKIT MERAH\"             \"BUKIT MERAH\"            \n  [7] \"BUKIT MERAH\"             \"SINGAPORE RIVER\"        \n  [9] \"QUEENSTOWN\"              \"QUEENSTOWN\"             \n [11] \"QUEENSTOWN\"              \"BUKIT MERAH\"            \n [13] \"MARINA EAST\"             \"RIVER VALLEY\"           \n [15] \"SINGAPORE RIVER\"         \"WESTERN ISLANDS\"        \n [17] \"WESTERN ISLANDS\"         \"WESTERN ISLANDS\"        \n [19] \"SOUTHERN ISLANDS\"        \"SOUTHERN ISLANDS\"       \n [21] \"BUKIT MERAH\"             \"DOWNTOWN CORE\"          \n [23] \"STRAITS VIEW\"            \"BUKIT MERAH\"            \n [25] \"BUKIT MERAH\"             \"DOWNTOWN CORE\"          \n [27] \"DOWNTOWN CORE\"           \"BUKIT MERAH\"            \n [29] \"BUKIT MERAH\"             \"QUEENSTOWN\"             \n [31] \"DOWNTOWN CORE\"           \"BUKIT MERAH\"            \n [33] \"BUKIT MERAH\"             \"OUTRAM\"                 \n [35] \"BUKIT MERAH\"             \"OUTRAM\"                 \n [37] \"DOWNTOWN CORE\"           \"DOWNTOWN CORE\"          \n [39] \"OUTRAM\"                  \"BUKIT MERAH\"            \n [41] \"DOWNTOWN CORE\"           \"BUKIT MERAH\"            \n [43] \"DOWNTOWN CORE\"           \"MARINE PARADE\"          \n [45] \"DOWNTOWN CORE\"           \"MUSEUM\"                 \n [47] \"RIVER VALLEY\"            \"DOWNTOWN CORE\"          \n [49] \"QUEENSTOWN\"              \"MARINE PARADE\"          \n [51] \"QUEENSTOWN\"              \"RIVER VALLEY\"           \n [53] \"ORCHARD\"                 \"ROCHOR\"                 \n [55] \"RIVER VALLEY\"            \"QUEENSTOWN\"             \n [57] \"MUSEUM\"                  \"DOWNTOWN CORE\"          \n [59] \"ROCHOR\"                  \"RIVER VALLEY\"           \n [61] \"BUKIT MERAH\"             \"DOWNTOWN CORE\"          \n [63] \"BUKIT MERAH\"             \"QUEENSTOWN\"             \n [65] \"ROCHOR\"                  \"ROCHOR\"                 \n [67] \"QUEENSTOWN\"              \"KALLANG\"                \n [69] \"MARINE PARADE\"           \"QUEENSTOWN\"             \n [71] \"QUEENSTOWN\"              \"TANGLIN\"                \n [73] \"NEWTON\"                  \"CLEMENTI\"               \n [75] \"TUAS\"                    \"NEWTON\"                 \n [77] \"BEDOK\"                   \"CLEMENTI\"               \n [79] \"PIONEER\"                 \"JURONG EAST\"            \n [81] \"NEWTON\"                  \"KALLANG\"                \n [83] \"ORCHARD\"                 \"NEWTON\"                 \n [85] \"ROCHOR\"                  \"PIONEER\"                \n [87] \"MUSEUM\"                  \"BUKIT TIMAH\"            \n [89] \"TUAS\"                    \"TANGLIN\"                \n [91] \"CLEMENTI\"                \"BEDOK\"                  \n [93] \"PIONEER\"                 \"PIONEER\"                \n [95] \"TANGLIN\"                 \"ROCHOR\"                 \n [97] \"ROCHOR\"                  \"ROCHOR\"                 \n [99] \"ROCHOR\"                  \"KALLANG\"                \n[101] \"QUEENSTOWN\"              \"ORCHARD\"                \n[103] \"MARINE PARADE\"           \"JURONG EAST\"            \n[105] \"KALLANG\"                 \"CLEMENTI\"               \n[107] \"NOVENA\"                  \"BEDOK\"                  \n[109] \"KALLANG\"                 \"NOVENA\"                 \n[111] \"TUAS\"                    \"PIONEER\"                \n[113] \"GEYLANG\"                 \"JURONG EAST\"            \n[115] \"BOON LAY\"                \"BUKIT TIMAH\"            \n[117] \"BEDOK\"                   \"MARINE PARADE\"          \n[119] \"QUEENSTOWN\"              \"ROCHOR\"                 \n[121] \"NEWTON\"                  \"JURONG EAST\"            \n[123] \"BOON LAY\"                \"BOON LAY\"               \n[125] \"QUEENSTOWN\"              \"KALLANG\"                \n[127] \"NEWTON\"                  \"CLEMENTI\"               \n[129] \"QUEENSTOWN\"              \"CLEMENTI\"               \n[131] \"KALLANG\"                 \"KALLANG\"                \n[133] \"KALLANG\"                 \"BUKIT TIMAH\"            \n[135] \"JURONG EAST\"             \"BUKIT TIMAH\"            \n[137] \"GEYLANG\"                 \"TOA PAYOH\"              \n[139] \"TOA PAYOH\"               \"TUAS\"                   \n[141] \"TOA PAYOH\"               \"TOA PAYOH\"              \n[143] \"JURONG WEST\"             \"JURONG WEST\"            \n[145] \"TOA PAYOH\"               \"JURONG WEST\"            \n[147] \"JURONG EAST\"             \"TOA PAYOH\"              \n[149] \"BEDOK\"                   \"JURONG EAST\"            \n[151] \"BUKIT BATOK\"             \"JURONG WEST\"            \n[153] \"BEDOK\"                   \"CLEMENTI\"               \n[155] \"NOVENA\"                  \"BUKIT TIMAH\"            \n[157] \"TOA PAYOH\"               \"JURONG WEST\"            \n[159] \"TOA PAYOH\"               \"JURONG EAST\"            \n[161] \"TOA PAYOH\"               \"TOA PAYOH\"              \n[163] \"GEYLANG\"                 \"TANGLIN\"                \n[165] \"NOVENA\"                  \"BOON LAY\"               \n[167] \"BEDOK\"                   \"CLEMENTI\"               \n[169] \"BUKIT TIMAH\"             \"GEYLANG\"                \n[171] \"JURONG EAST\"             \"JURONG WEST\"            \n[173] \"BUKIT BATOK\"             \"BUKIT BATOK\"            \n[175] \"BUKIT BATOK\"             \"SERANGOON\"              \n[177] \"JURONG WEST\"             \"TUAS\"                   \n[179] \"PAYA LEBAR\"              \"SERANGOON\"              \n[181] \"BISHAN\"                  \"TAMPINES\"               \n[183] \"BUKIT BATOK\"             \"HOUGANG\"                \n[185] \"BUKIT BATOK\"             \"BISHAN\"                 \n[187] \"JURONG WEST\"             \"BUKIT PANJANG\"          \n[189] \"TAMPINES\"                \"HOUGANG\"                \n[191] \"TUAS\"                    \"JURONG EAST\"            \n[193] \"JURONG WEST\"             \"SERANGOON\"              \n[195] \"NOVENA\"                  \"CLEMENTI\"               \n[197] \"GEYLANG\"                 \"TOA PAYOH\"              \n[199] \"BEDOK\"                   \"TOA PAYOH\"              \n[201] \"PAYA LEBAR\"              \"HOUGANG\"                \n[203] \"HOUGANG\"                 \"HOUGANG\"                \n[205] \"ANG MO KIO\"              \"BUKIT PANJANG\"          \n[207] \"CHOA CHU KANG\"           \"HOUGANG\"                \n[209] \"PAYA LEBAR\"              \"BUKIT PANJANG\"          \n[211] \"BUKIT TIMAH\"             \"BUKIT TIMAH\"            \n[213] \"TAMPINES\"                \"TAMPINES\"               \n[215] \"CHOA CHU KANG\"           \"PASIR RIS\"              \n[217] \"ANG MO KIO\"              \"HOUGANG\"                \n[219] \"CHOA CHU KANG\"           \"CHOA CHU KANG\"          \n[221] \"CHANGI\"                  \"BUKIT PANJANG\"          \n[223] \"BUKIT PANJANG\"           \"BUKIT PANJANG\"          \n[225] \"SERANGOON\"               \"SENGKANG\"               \n[227] \"ANG MO KIO\"              \"ANG MO KIO\"             \n[229] \"PASIR RIS\"               \"ANG MO KIO\"             \n[231] \"HOUGANG\"                 \"PASIR RIS\"              \n[233] \"BUKIT BATOK\"             \"CHANGI BAY\"             \n[235] \"PAYA LEBAR\"              \"BISHAN\"                 \n[237] \"BUKIT BATOK\"             \"ANG MO KIO\"             \n[239] \"HOUGANG\"                 \"ANG MO KIO\"             \n[241] \"ANG MO KIO\"              \"SERANGOON\"              \n[243] \"HOUGANG\"                 \"PASIR RIS\"              \n[245] \"BUKIT PANJANG\"           \"PASIR RIS\"              \n[247] \"TAMPINES\"                \"ANG MO KIO\"             \n[249] \"ANG MO KIO\"              \"ANG MO KIO\"             \n[251] \"SERANGOON\"               \"TENGAH\"                 \n[253] \"SERANGOON\"               \"PASIR RIS\"              \n[255] \"BUKIT BATOK\"             \"PAYA LEBAR\"             \n[257] \"SUNGEI KADUT\"            \"PASIR RIS\"              \n[259] \"CHOA CHU KANG\"           \"SENGKANG\"               \n[261] \"SENGKANG\"                \"SENGKANG\"               \n[263] \"PUNGGOL\"                 \"CHOA CHU KANG\"          \n[265] \"PASIR RIS\"               \"PUNGGOL\"                \n[267] \"PUNGGOL\"                 \"SUNGEI KADUT\"           \n[269] \"CHANGI\"                  \"ANG MO KIO\"             \n[271] \"CHANGI\"                  \"SENGKANG\"               \n[273] \"SENGKANG\"                \"SENGKANG\"               \n[275] \"YISHUN\"                  \"YISHUN\"                 \n[277] \"PUNGGOL\"                 \"MANDAI\"                 \n[279] \"YISHUN\"                  \"SELETAR\"                \n[281] \"SUNGEI KADUT\"            \"WOODLANDS\"              \n[283] \"WOODLANDS\"               \"YISHUN\"                 \n[285] \"WESTERN WATER CATCHMENT\" \"SELETAR\"                \n[287] \"YISHUN\"                  \"WOODLANDS\"              \n[289] \"SUNGEI KADUT\"            \"WOODLANDS\"              \n[291] \"SEMBAWANG\"               \"WOODLANDS\"              \n[293] \"SEMBAWANG\"               \"WOODLANDS\"              \n[295] \"SIMPANG\"                 \"SEMBAWANG\"              \n[297] \"LIM CHU KANG\"            \"SIMPANG\"                \n[299] \"SEMBAWANG\"               \"SEMBAWANG\"              \n[301] \"SIMPANG\"                 \"NORTH-EASTERN ISLANDS\"  \n[303] \"MANDAI\"                  \"SIMPANG\"                \n[305] \"YISHUN\"                  \"WOODLANDS\"              \n[307] \"WOODLANDS\"               \"SEMBAWANG\"              \n[309] \"YISHUN\"                  \"PUNGGOL\"                \n[311] \"YISHUN\"                  \"PUNGGOL\"                \n[313] \"CENTRAL WATER CATCHMENT\" \"SELETAR\"                \n[315] \"SUNGEI KADUT\"            \"SELETAR\"                \n[317] \"YISHUN\"                  \"MANDAI\"                 \n[319] \"PUNGGOL\"                 \"WOODLANDS\"              \n[321] \"SEMBAWANG\"               \"SEMBAWANG\"              \n[323] \"SEMBAWANG\"              \n\n\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"CHANGI\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"MARINE PARADE\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting target planning areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Changi\")\nplot(tm, main = \"Marine Parade\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\n\nCONVERTING THE SPATIAL POINT DATA FRAME INTO GENERIC SP FORMAT\nNext, we will convert these SpatialPolygonsDataFrame layers into generic spatialpolygons layers.\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\nCREATING OWIN OBJECT\nNow, we will convert these SpatialPolygons objects into owin objects that is required by spatstat.\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\nCOMBINING Grab Trips POINTS AND THE STUDY AREA\nBy using the code chunk below, we are able to extract grab trips destinations that is within the specific region to do our analysis later on.\n\ngrab_trips_pg_ppp = grab_trips_ppp[pg_owin]\ngrab_trips_tm_ppp = grab_trips_ppp[tm_owin]\ngrab_trips_ck_ppp = grab_trips_ppp[ck_owin]\ngrab_trips_jw_ppp = grab_trips_ppp[jw_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\ngrab_trips_pg_ppp.km = rescale(grab_trips_pg_ppp, 1000, \"km\")\ngrab_trips_tm_ppp.km = rescale(grab_trips_tm_ppp, 1000, \"km\")\ngrab_trips_ck_ppp.km = rescale(grab_trips_ck_ppp, 1000, \"km\")\ngrab_tripse_jw_ppp.km = rescale(grab_trips_jw_ppp, 1000, \"km\")\n\nLet’s plot these four study areas and the locations of the grab trip destinations.\n\npar(mfrow=c(2,2))\nplot(grab_trips_pg_ppp.km, main=\"Changi\")\nplot(grab_trips_tm_ppp.km, main=\"Marine Parade\")\nplot(grab_trips_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(grab_tripse_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\nAs we can see, the lower bottom part of Pungol is heavily saturated with driving trip destination end points.\n\n\nCOMPUTING KDE\nThe code chunk below will be used to compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each\n\npar(mfrow=c(2,2))\nplot(density(grab_trips_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Changi\")\nplot(density(grab_trips_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Marine Parade\")\nplot(density(grab_trips_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(grab_tripse_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#nearest-neighbour-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#nearest-neighbour-analysis",
    "title": "Take Home Exercise 1",
    "section": "NEAREST NEIGHBOUR ANALYSIS",
    "text": "NEAREST NEIGHBOUR ANALYSIS\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThe test hypotheses are:\nHo = The distribution of grab trips destinations are randomly distributed.\nH1= The distribution of grab trips destinations are not randomly distributed.\nThe 95% confident interval will be used.\n\nTESTING SPATIAL POINT PATTERNS USING CLARK AND EVANS TEST\n\n\n\n\nclarkevans.test(grab_trips_ppp_SG,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  grab_trips_ppp_SG\nR = 0.28633, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\n\nCLARK AND EVANS TEST: CHOA CHU KANG PLANNING AREA\nIn the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for grab trip destinations in Choa Chu Kang planning area.\n\nclarkevans.test(grab_trips_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  grab_trips_ck_ppp\nR = 0.45249, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\nSince R &lt; 1, it indicates there is a clustering of destinations at this Chua Chu Kang area.\n\n\nCLARK AND EVANS TEST: CHANGI PLANNING AREA\nIn the code chunk below, the similar test is used to analyse the spatial point patterns of grab trips destinations in Changi planning area.\n\nclarkevans.test(grab_trips_pg_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  grab_trips_pg_ppp\nR = 0.11301, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\nSince R &lt; 1, it indicates there is a clustering of destinations at this Changi area. There is more clustering of points than Chua Chu Kang area since the R values of Changi area is less than that of Chua Chu Kang area."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#network-constraint-layers",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#network-constraint-layers",
    "title": "Take Home Exercise 1",
    "section": "Network constraint layers",
    "text": "Network constraint layers\nWhat are the different layers available as part of the gis dataset? There is road networks, street networks and many more. Lets add only the road layer with the name ‘gis_osm_roads_free_1’:\n\nroad_network &lt;- st_read(dsn = \"../../data/takehomeassigment1/malaysia-singapore-brunei-latest-free/\", layer = \"gis_osm_roads_free_1\")\n\n\n# typeof(road_network)  #&lt;-- list type\nroad_network\n\nThe Projected CRS for the road_network above is SVY21 / Singapore TM due to the st_transform method we applied earlier when importing the data.\nLet us analyse a linestring’s bounding box:\n\ni &lt;- 900\ninside &lt;- inside.owin(attributes(road_network$geometry[i])$bbox$xmin, (road_network$geometry[i])$bbox$ymin, sg_owin)\ncat(\"xmin of bounding box for linestring in row \", i, \":\", attributes(road_network$geometry[i])$bbox$xmin, \"\\n\")\ncat(\"xmax of bounding box for linestring in row \", i, \":\", attributes(road_network$geometry[i])$bbox$xmax, \"\\n\")\ncat(\"ymin of bounding box for linestring in row \", i, \":\", attributes(road_network$geometry[i])$bbox$ymin, \"\\n\")\ncat(\"xmin of bounding box for linestring in row \", i, \":\", attributes(road_network$geometry[i])$bbox$ymax, \"\\n\")\ncat(\"Does it fall inside owin object of sg:\", ifelse(inside, \"yes\", \"no\"))\n\n\ni &lt;- 1\ninside.owin(attributes(road_network$geometry[i])$bbox$xmin, (road_network$geometry[i])$bbox$ymin, sg_owin)\n\nSince Singapore falls inside the bounding box of xmin = 103.54, xmax = 104.100274, ymin = 1.159704 and ymax = 1.515345, we will filter our rows to make the dataset of road networks smaller and more manageable. We are using txtProgressBar object to keep track of our progress for assigning rows as within Singapore or not since this process will take around 5 minutes.\n\npct_circ &lt;- list()  ## create an empty list to store values\nn_iter = nrow(road_network)\n# Initializes the progress bar\npb &lt;- txtProgressBar(min = 0,      # Minimum value of the progress bar\n                     max = n_iter, # Maximum value of the progress bar\n                     style = 3,    # Progress bar style (also available style = 1 and style = 2)\n                     width = 50,   # Progress bar width. Defaults to getOption(\"width\")\n                     char = \"=\")   # Character used to create the bar\n\nfor(i in 1:nrow(road_network)) { # loop over each row\n  pct_circ[i] &lt;- attributes(road_network$geometry[i])$bbox$xmin &gt; 103.54     & attributes(road_network$geometry[i])$bbox$xmax &lt; 104.100274 & attributes(road_network$geometry[i])$bbox$ymin &gt; 1.159704 & attributes(road_network$geometry[i])$bbox$ymax &lt; 1.515345\n  setTxtProgressBar(pb,i)\n  \n} # End for loop\n\n\nm &lt;- matrix(unlist(pct_circ), nrow = length(pct_circ))\ndf3 &lt;- cbind(road_network, m) \ndf3\n\n\nfiltered_road_networks &lt;- filter(df3, m == TRUE)\ncat( \"Percentage of dataset we are dealing with now\", (dim(filtered_road_networks)[1] / dim(road_network)[1]) * 100)\n\nWe are only dealing with 15.7% of the original road network dataset that lies in and near Singapore.\nWe need to project this geospatial lines data to Singapore’s coordinate system with crs = 3414.\n\nfiltered_road_networks &lt;- st_transform(filtered_road_networks, crs = 3414)\n\nfiltered_road_networks\nSaving progress of filtered_road_networks:\n\nfolderToSave &lt;- \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/rds\"\nfilepath_filtered_road_networks &lt;- str_interp(\"${folderToSave}/filtered_road_networks_sg.rds\")\nwrite_rds(filtered_road_networks, filepath_filtered_road_networks) \n\nReading from file:\n\nfilepath_filtered_road_networks &lt;- str_interp(\"${folderToSave}/filtered_road_networks_sg.rds\")\nfiltered_road_networks &lt;- read_rds(filepath_filtered_road_networks, refhook = NULL)\nfiltered_road_networks\n\nSimple feature collection with 277046 features and 11 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -4633.586 ymin: 15901.59 xmax: 57669.67 ymax: 55185.13\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    osm_id code      fclass              name  ref oneway maxspeed layer bridge\n1  4386520 5113     primary      Orchard Road &lt;NA&gt;      F       50     0      F\n2  4887867 5122 residential  Hougang Avenue 1 &lt;NA&gt;      B       50     0      F\n3  8096835 5113     primary       Scotts Road &lt;NA&gt;      F       60     0      F\n4  9584642 5115    tertiary     Keng Lee Road &lt;NA&gt;      F       50     0      F\n5  9584847 5153     footway              &lt;NA&gt; &lt;NA&gt;      B        0     0      F\n6  9585045 5113     primary       Newton Road &lt;NA&gt;      F       60     0      F\n7  9585074 5122 residential      Sarkies Road &lt;NA&gt;      B       50     0      F\n8  9585621 5113     primary     Paterson Road &lt;NA&gt;      F       50     0      F\n9  9585771 5113     primary Orchard Boulevard &lt;NA&gt;      F       50     0      F\n10 9586040 5113     primary     Paterson Road &lt;NA&gt;      F       50     0      F\n   tunnel    m                       geometry\n1       F TRUE LINESTRING (27637.52 32038....\n2       F TRUE LINESTRING (34016.12 36785....\n3       F TRUE LINESTRING (28588.71 32765....\n4       F TRUE LINESTRING (29165.25 32888....\n5       F TRUE LINESTRING (28834.55 32990....\n6       F TRUE LINESTRING (28664.35 32858....\n7       F TRUE LINESTRING (28433.13 32988....\n8       F TRUE LINESTRING (27835.44 31930....\n9       F TRUE LINESTRING (28168.89 31418....\n10      F TRUE LINESTRING (27685.73 31733....\n\n\n\nroad_network_sp_lines &lt;- as_Spatial(filtered_road_networks$geometry)\nroad_network_sp_lines\n\nclass       : SpatialLines \nfeatures    : 277046 \nextent      : -4633.586, 57669.67, 15901.59, 55185.13  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nplot(road_network_sp_lines)\n\n\n\n\n\n\n\n\n\nlixels &lt;- lixelize_lines.mc(filtered_road_networks, \n                         700, \n                         mindist = 350)\nlixels\n\nUsing multicore support for this function as there are alot of roads that need to be cut into specified minimal distance.\nSaving progress:\n\nfolderToSave &lt;- \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/rds\"\nfilepath_lixels &lt;- str_interp(\"${folderToSave}/lixels.rds\")\nwrite_rds(lixels, filepath_lixels) \n\nReading from file:\n\nfilepath_lixels &lt;- str_interp(\"${folderToSave}/lixels.rds\")\nlixels &lt;- read_rds(filepath_lixels, refhook = NULL)\nlixels\n\nSimple feature collection with 278508 features and 12 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -4633.586 ymin: 15901.59 xmax: 57669.67 ymax: 55185.13\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   lineID  osm_id code      fclass              name  ref oneway maxspeed layer\n1       1 4386520 5113     primary      Orchard Road &lt;NA&gt;      F       50     0\n2       2 4887867 5122 residential  Hougang Avenue 1 &lt;NA&gt;      B       50     0\n3       3 8096835 5113     primary       Scotts Road &lt;NA&gt;      F       60     0\n4       4 9584642 5115    tertiary     Keng Lee Road &lt;NA&gt;      F       50     0\n5       5 9584847 5153     footway              &lt;NA&gt; &lt;NA&gt;      B        0     0\n6       6 9585045 5113     primary       Newton Road &lt;NA&gt;      F       60     0\n7       7 9585074 5122 residential      Sarkies Road &lt;NA&gt;      B       50     0\n8       8 9585621 5113     primary     Paterson Road &lt;NA&gt;      F       50     0\n9       9 9585771 5113     primary Orchard Boulevard &lt;NA&gt;      F       50     0\n10     10 9586040 5113     primary     Paterson Road &lt;NA&gt;      F       50     0\n   bridge tunnel    m                       geometry\n1       F      F TRUE LINESTRING (27637.52 32038....\n2       F      F TRUE LINESTRING (34016.12 36785....\n3       F      F TRUE LINESTRING (28588.71 32765....\n4       F      F TRUE LINESTRING (29165.25 32888....\n5       F      F TRUE LINESTRING (28834.55 32990....\n6       F      F TRUE LINESTRING (28664.35 32858....\n7       F      F TRUE LINESTRING (28433.13 32988....\n8       F      F TRUE LINESTRING (27835.44 31930....\n9       F      F TRUE LINESTRING (28168.89 31418....\n10      F      F TRUE LINESTRING (27685.73 31733....\n\n\n\n7.6.2 GENERATING LINE CENTRE POINTS\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.\n\nsamples &lt;- lines_center(lixels)\n\nThe points are located at center of the line based on the length of the line.\n\ntrip_endings_df &lt;- st_as_sf(destination_df, \n                       coords = c(\"rawlng\", \"rawlat\"),\n                       crs=4326) %&gt;%\nst_transform(crs = 3414)\nglimpse(trip_endings_df)\n\nRows: 28,000\nColumns: 11\nGroups: trj_id [28,000]\n$ trj_id        &lt;chr&gt; \"81574\", \"54687\", \"17190\", \"13793\", \"39014\", \"41170\", \"6…\n$ driving_mode  &lt;chr&gt; \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", …\n$ osname        &lt;chr&gt; \"ios\", \"android\", \"android\", \"android\", \"ios\", \"ios\", \"i…\n$ pingtimestamp &lt;dttm&gt; 2019-04-21 23:56:49, 2019-04-21 23:56:46, 2019-04-21 23…\n$ speed         &lt;dbl&gt; 15.34998417, 8.15000000, 12.41395500, 6.46964450, 3.5922…\n$ bearing       &lt;int&gt; 103, 299, 202, 170, 169, 71, 239, 51, 118, 244, 347, 23,…\n$ accuracy      &lt;dbl&gt; 8.000, 4.551, 4.000, 3.900, 4.000, 5.000, 8.000, 10.000,…\n$ weekday       &lt;ord&gt; Sun, Sun, Sun, Sun, Sun, Sun, Sun, Sun, Sun, Sun, Sun, S…\n$ end_hr        &lt;fct&gt; 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, …\n$ day           &lt;fct&gt; 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, …\n$ geometry      &lt;POINT [m]&gt; POINT (44192.98 35540.13), POINT (22809.1 46866.96…\n\n\n\nfiltered_road_networks[1:100,]\n\nSimple feature collection with 100 features and 11 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 6184.054 ymin: 28323.08 xmax: 44422.78 ymax: 47202.77\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    osm_id code      fclass              name  ref oneway maxspeed layer bridge\n1  4386520 5113     primary      Orchard Road &lt;NA&gt;      F       50     0      F\n2  4887867 5122 residential  Hougang Avenue 1 &lt;NA&gt;      B       50     0      F\n3  8096835 5113     primary       Scotts Road &lt;NA&gt;      F       60     0      F\n4  9584642 5115    tertiary     Keng Lee Road &lt;NA&gt;      F       50     0      F\n5  9584847 5153     footway              &lt;NA&gt; &lt;NA&gt;      B        0     0      F\n6  9585045 5113     primary       Newton Road &lt;NA&gt;      F       60     0      F\n7  9585074 5122 residential      Sarkies Road &lt;NA&gt;      B       50     0      F\n8  9585621 5113     primary     Paterson Road &lt;NA&gt;      F       50     0      F\n9  9585771 5113     primary Orchard Boulevard &lt;NA&gt;      F       50     0      F\n10 9586040 5113     primary     Paterson Road &lt;NA&gt;      F       50     0      F\n   tunnel    m                       geometry\n1       F TRUE LINESTRING (27637.52 32038....\n2       F TRUE LINESTRING (34016.12 36785....\n3       F TRUE LINESTRING (28588.71 32765....\n4       F TRUE LINESTRING (29165.25 32888....\n5       F TRUE LINESTRING (28834.55 32990....\n6       F TRUE LINESTRING (28664.35 32858....\n7       F TRUE LINESTRING (28433.13 32988....\n8       F TRUE LINESTRING (27835.44 31930....\n9       F TRUE LINESTRING (28168.89 31418....\n10      F TRUE LINESTRING (27685.73 31733....\n\n\n\ntrip_endings_df[1:100,]\n\nSimple feature collection with 100 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4398.204 ymin: 25629.68 xmax: 45120.65 ymax: 49295.98\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 100 × 11\n# Groups:   trj_id [100]\n   trj_id driving_mode osname  pingtimestamp        speed bearing accuracy\n   &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt;   &lt;dttm&gt;               &lt;dbl&gt;   &lt;int&gt;    &lt;dbl&gt;\n 1 81574  car          ios     2019-04-21 23:56:49 15.3       103     8   \n 2 54687  car          android 2019-04-21 23:56:46  8.15      299     4.55\n 3 17190  car          android 2019-04-21 23:56:36 12.4       202     4   \n 4 13793  car          android 2019-04-21 23:56:30  6.47      170     3.9 \n 5 39014  car          ios     2019-04-21 23:56:27  3.59      169     4   \n 6 41170  car          ios     2019-04-21 23:56:13 13.1        71     5   \n 7 64519  car          ios     2019-04-21 23:55:49 14.3       239     8   \n 8 70461  car          ios     2019-04-21 23:55:32  0.970      51    10   \n 9 41154  car          ios     2019-04-21 23:55:10 10.8       118    32   \n10 65488  car          ios     2019-04-21 23:54:47  0         244    10   \n# ℹ 90 more rows\n# ℹ 4 more variables: weekday &lt;ord&gt;, end_hr &lt;fct&gt;, day &lt;fct&gt;,\n#   geometry &lt;POINT [m]&gt;\n\n\n\n\n7.6.3 PERFORMING NETKDE\nWe are ready to computer the NetKDE by using the code chunk below. We will be plotting based on the first 1000 points due to long runtime of the function. For the full NetKDE, please change trip_endings_df[1:1000,] to trip_endings_df and obtain the density and plotx with higher performing machines as it is resource intensive.\n\ndensities &lt;- nkde(filtered_road_networks, \n                  events = trip_endings_df[1:10,],\n                  w = rep(1,nrow(trip_endings_df[1:10,])),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 5, #we aggregate events within a 5m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n\n\n7.6.3.1 VISUALISING NETKDE\nBefore we can visualise the NetKDE values, code chunk below will be used to insert the computed density values (i.e. densities) into samples and lixels objects as density field.\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\nSince svy21 projection system is in meter, the computed density values are very small i.e. 0.0000005. The code chunk below is used to resale the density values from number of events per meter to number of events per kilometer.\n\n# rescaling to help the mapping\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\nThe code below uses appropriate functions of tmap package to prepare interactive and high cartographic quality map visualisation.\nDue to javascript heap memory error when rendering this component it has been comment. Do uncomment it for full results.\nPlot:\n\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(trip_endings_df[1:10,])+\n  tm_dots()\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#setting-the-scene",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Human mobility, the movement of human beings in space and time, reflects the spatial-temporal characteristics of human behavior. With the advancement Information and Communication Technologies (ICT) especially smart phone, a large volume of data related to human mobility have been collected. By using appropriate GIS analysis methods, these data are potentially useful in supporting smart city planning and management.\nIn Singapore, one of the important source of data related to human mobility is from Land Transport Authority (LTA) DataMall. Two data sets related to human mobility are provided by the portal, they are: Passenger Volume by Origin Destination Train Stations and Passenger Volume by Origin Destination Bus Stops. One of the limitation of these data sets is that their location are biased to either bus stops or MRT/LRT stations. In 2020, another very interesting human mobility data set called Grab Posisi was released by GRAB, one of the largest shared taxi operator in South-east Asia. There are two data sets been released and one of them is for Singapore.\nGrab is one of the most frequently used services in Singapore, with ride hailing services to ordering food to be delivered via Grab. In this assignment we will be looking at Grab’s ride hailing services by looking at the end destinations of users taking trips and see its distribution across Singapore and specifically Singapore’s roads. This will be useful in identifying congestion rates and much more at these roads."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#objectives",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate spatial point patterns analysis methods to discover the geographical and spatio-temporal distribution of Grab hailing services locations in Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#the-task",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer in sf tibble data.frames:\n\nGrab taxi location points either by origins or destinations.\nRoad layer within Singapore excluding outer islands.\nSingapore boundary layer excluding outer islands\n\nUsing the extracted data, derive traditional Kernel Density Estimation layers.\nUsing the extracted data, derive either Network Kernel Density Estimation (NKDE) or Temporal Network Kernel Density Estimation (TNKDE)\nUsing appropriate tmap functions, display the kernel density layers on openstreetmap of Singapore.\nDescribe the spatial patterns revealed by the kernel density maps"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#data-acquisition",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#data-acquisition",
    "title": "Take Home Exercise 1",
    "section": "Data Acquisition",
    "text": "Data Acquisition\n\n\n\nDataset Name\nSource\n\n\n\n\nGrab Posisi Dataset\nhttps://engineering.grab.com/grab-posisi\n\n\nMPSZ-2019 Zonal data of Singapore\nMaster Plan 2019 Subzone Boundary (No Sea) from Data.gov.sg\n\n\nCoastal Boundary Data of Singapore (ESRI shapefile format)\nProvided by SLA\n\n\nOpenStreetMap Road Network Dataset\nGeofabrik download server"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#installing-and-loading-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01_3.html#installing-and-loading-packages",
    "title": "Take Home Exercise 1",
    "section": "Installing and Loading Packages",
    "text": "Installing and Loading Packages\nLets install the relevant R libraries needed using pacman.\n\npacman::p_load(sf, spNetwork, tmap, classInt, viridis, tidyverse, list, arrow, lubridate, tidyverse, readr, sp, maptools, raster, spatstat, spdep, readr)"
  },
  {
    "objectID": "data/takehomeassigment1/MPSZ-2019/MPSZ-2019.html",
    "href": "data/takehomeassigment1/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#identifying-trends-using-geom_smooth",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#identifying-trends-using-geom_smooth",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Identifying trends using geom_smooth()",
    "text": "Identifying trends using geom_smooth()\n\nggplot(iris, aes(x=Sepal.Length, y=Petal.Length, col=Species))+geom_point() +geom_smooth()\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x=Sepal.Length, y=Petal.Length, col=Species)) +geom_point(color = \"blue\") + geom_smooth(color = \"red\")\n\ncoord_flip() can be used to pivot the whole chart - some charts may be easier to look this way: Good for finding count of unique values in a column and seeing any trends! Do a group by column and count(*) to get the counts of each unique value of that column….\n\nggplot(mtcars, aes(x = gear)) +geom_bar()+coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#animation",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#animation",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Animation",
    "text": "Animation\n\nlibrary(plotly)\n\nquakes = read.csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\nfig &lt;- quakes \nfig &lt;- fig %&gt;%\n  plot_ly(\n    type = 'densitymapbox',\n    lat = ~Latitude,\n    lon = ~Longitude,\n    coloraxis = 'coloraxis',\n    radius = 10) \nfig &lt;- fig %&gt;%\n  layout(\n    mapbox = list(\n      style=\"stamen-terrain\",\n      center= list(lon=180)), coloraxis = list(colorscale = \"Viridis\"))\n\nfig\n\n\n\n\n\nGlobal trend\n\ndf &lt;- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/globe_contours.csv')\ndf$id &lt;- seq_len(nrow(df))\n\nlibrary(tidyr)\nd &lt;- df %&gt;%\n  gather(key, value, -id) %&gt;%\n  separate(key, c(\"l\", \"line\"), \"\\\\.\") %&gt;%\n  spread(l, value)\n\ngeo &lt;- list(\n  showland = TRUE,\n  showlakes = TRUE,\n  showcountries = TRUE,\n  showocean = TRUE,\n  countrywidth = 0.5,\n  landcolor = toRGB(\"grey90\"),\n  lakecolor = toRGB(\"white\"),\n  oceancolor = toRGB(\"white\"),\n  projection = list(\n    type = 'orthographic',\n    rotation = list(\n      lon = -100,\n      lat = 40,\n      roll = 0\n    )\n  ),\n  lonaxis = list(\n    showgrid = TRUE,\n    gridcolor = toRGB(\"gray40\"),\n    gridwidth = 0.5\n  ),\n  lataxis = list(\n    showgrid = TRUE,\n    gridcolor = toRGB(\"gray40\"),\n    gridwidth = 0.5\n  )\n)\n\nfig &lt;- plot_geo(d)\nfig &lt;- fig %&gt;% group_by(line)\nfig &lt;- fig %&gt;% add_lines(x = ~lon, y = ~lat)\nfig &lt;- fig %&gt;% layout(\n    showlegend = FALSE, geo = geo,\n    title = 'Contour lines over globe&lt;br&gt;(Click and drag to rotate)'\n  )\n\nfig\n\n\n\n\n\n\nlibrary(plotly)\ndf &lt;- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')\n\ndf$q &lt;- with(df, cut(pop, quantile(pop)))\nlevels(df$q) &lt;- paste(c(\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\"), \"Quantile\")\ndf$q &lt;- as.ordered(df$q)\n\ng &lt;- list(\n  scope = 'usa',\n  projection = list(type = 'albers usa'),\n  showland = TRUE,\n  landcolor = toRGB(\"gray85\"),\n  subunitwidth = 1,\n  countrywidth = 1,\n  subunitcolor = toRGB(\"white\"),\n  countrycolor = toRGB(\"white\")\n)\n\nfig &lt;- plot_geo(df, locationmode = 'USA-states', sizes = c(1, 250))\nfig &lt;- fig %&gt;% add_markers(\n    x = ~lon, y = ~lat, size = ~pop, color = ~q, hoverinfo = \"text\",\n    text = ~paste(df$name, \"&lt;br /&gt;\", df$pop/1e6, \" million\")\n  )\nfig &lt;- fig %&gt;% layout(title = '2014 US city populations&lt;br&gt;(Click legend to toggle)', geo = g)\n\nfig"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#d-plots",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#d-plots",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "3D Plots",
    "text": "3D Plots\n\nKernel Density Plot\n\nkd &lt;- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))\nfig &lt;- plot_ly(x = kd$x, y = kd$y, z = kd$z) %&gt;% add_surface()\n\nfig\n\n\n\n\n\nMaybe can use in spatial correlation where the factor is the 3rd dimension (first and second are latitude and longitude respectively)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#helicopter-mesh--cool",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#helicopter-mesh--cool",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "HELICOPTER MESH -COOL",
    "text": "HELICOPTER MESH -COOL\n\nlibrary(plotly)\nlibrary(geomorph)\n\ndest &lt;- \"data/chopper.ply\"\nmesh &lt;- read.ply(dest)\n# see getS3method(\"shade3d\", \"mesh3d\") for details on how to plot\n\n# plot point cloud\nx &lt;- mesh$vb[\"xpts\",]\ny &lt;- mesh$vb[\"ypts\",]\nz &lt;- mesh$vb[\"zpts\",]\nm &lt;- matrix(c(x,y,z), ncol=3, dimnames=list(NULL,c(\"x\",\"y\",\"z\")))\n\n# now figure out the colormap\nzmean &lt;- apply(t(mesh$it),MARGIN=1,function(row){mean(m[row,3])})\n\nlibrary(scales)\nfacecolor = colour_ramp(\n  brewer_pal(palette=\"RdBu\")(9)\n)(rescale(x=zmean))\n\nfig &lt;- plot_ly(\n  x = x, y = y, z = z,\n  i = mesh$it[1,]-1, j = mesh$it[2,]-1, k = mesh$it[3,]-1,\n  facecolor = facecolor,\n  type = \"mesh3d\"\n)\n\nfig"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#getting-current-directory",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#getting-current-directory",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Getting Current Directory",
    "text": "Getting Current Directory\n\ngetwd()\n\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/Hands-on_Ex/Hands-on_Ex-05\""
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#listing-files-in-a-directory",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#listing-files-in-a-directory",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Listing files in a directory",
    "text": "Listing files in a directory\n\ndata_dir &lt;- \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi/\"\ncurr_dir &lt;- \"../../data/GrabPosisi\"\ncurrentdirec = list.files(path=data_dir, pattern=NULL, all.files=FALSE, \n    full.names=FALSE)\nprint(typeof(currentdirec))\n\n[1] \"character\"\n\ncurrentdirec\n\n [1] \"part-00000.parquet\"                                                 \n [2] \"part-00001-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\"\n [3] \"part-00002-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\"\n [4] \"part-00003-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\"\n [5] \"part-00004-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\"\n [6] \"part-00005-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\"\n [7] \"part-00006-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\"\n [8] \"part-00007-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\"\n [9] \"part-00008-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\"\n[10] \"part-00009-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\"\n\n\n\npacman::p_load(sf, spNetwork, tmap, classInt, viridis, tidyverse, list, arrow, lubridate, tidyverse, readr, sp, maptools, raster, spatstat, spdep)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#processing-pipeline-for-csv-files-in-a-directory",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#processing-pipeline-for-csv-files-in-a-directory",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Processing pipeline for CSV files in a Directory",
    "text": "Processing pipeline for CSV files in a Directory\nListing files in a directory and reading all the dataframes to a list:\n\nfirst_parquet = read_parquet(str_interp(\"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi/${currentdirec[1]}\"))\nsecond_parquet = read_parquet(str_interp(\"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi/${currentdirec[2]}\"))\nprint(dim(first_parquet))\n\n[1] 3034553       9\n\nprint(dim(second_parquet))\n\n[1] 3029553       9\n\n\n\ncombined_parquets &lt;- bind_rows(first_parquet, second_parquet)\nprint(dim(combined_parquets))\n\n[1] 6064106       9\n\n\n\ndfs = list()\ndata_dir &lt;- \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi/\"\n\nfor (i in currentdirec){\n  currDf &lt;- read_parquet(str_interp(\"${data_dir}/${i}\"))\n  entriesNo &lt;- length(currDf)\n  dfs &lt;- bind_rows(dfs, currDf)\n  print(str_interp(\"${data_dir}/${i} --&gt; current dims: [${dim(currDf)[0]}, ${dim(currDf)[1]}] --&gt; total dims: [${dim(dfs)[0]}, ${dim(dfs)[1]}]\"))\n  #dfs &lt;- c(dfs, currDf)\n}\n\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00000.parquet --&gt; current dims: [character(0), 3034553] --&gt; total dims: [character(0), 3034553]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00001-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; current dims: [character(0), 3029553] --&gt; total dims: [character(0), 6064106]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00002-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; current dims: [character(0), 3032527] --&gt; total dims: [character(0), 9096633]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00003-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; current dims: [character(0), 3033732] --&gt; total dims: [character(0), 12130365]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00004-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; current dims: [character(0), 3031857] --&gt; total dims: [character(0), 15162222]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00005-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; current dims: [character(0), 3034701] --&gt; total dims: [character(0), 18196923]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00006-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; current dims: [character(0), 3033018] --&gt; total dims: [character(0), 21229941]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00007-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; current dims: [character(0), 3034261] --&gt; total dims: [character(0), 24264202]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00008-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; current dims: [character(0), 3032914] --&gt; total dims: [character(0), 27297116]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00009-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; current dims: [character(0), 3032569] --&gt; total dims: [character(0), 30329685]\"\n\n\n\ntypeof(currDf)\n\n[1] \"list\"\n\nsummary(currDf)\n\n    trj_id          driving_mode          osname          pingtimestamp      \n Length:3032569     Length:3032569     Length:3032569     Min.   :1.555e+09  \n Class :character   Class :character   Class :character   1st Qu.:1.555e+09  \n Mode  :character   Mode  :character   Mode  :character   Median :1.555e+09  \n                                                          Mean   :1.555e+09  \n                                                          3rd Qu.:1.556e+09  \n                                                          Max.   :1.556e+09  \n     rawlat          rawlng          speed          bearing     \n Min.   :1.242   Min.   :103.6   Min.   :-1.00   Min.   :  0.0  \n 1st Qu.:1.322   1st Qu.:103.8   1st Qu.:11.67   1st Qu.: 93.0  \n Median :1.340   Median :103.8   Median :17.89   Median :172.0  \n Mean   :1.348   Mean   :103.8   Mean   :16.31   Mean   :178.8  \n 3rd Qu.:1.378   3rd Qu.:103.9   3rd Qu.:21.85   3rd Qu.:269.0  \n Max.   :1.465   Max.   :104.0   Max.   :77.81   Max.   :359.0  \n    accuracy       \n Min.   :   1.000  \n 1st Qu.:   4.000  \n Median :   6.000  \n Mean   :   7.208  \n 3rd Qu.:  10.000  \n Max.   :2358.000  \n\n\n\nlength(dfs)\n\n[1] 9\n\nsummary(dfs)\n\n    trj_id          driving_mode          osname          pingtimestamp      \n Length:30329685    Length:30329685    Length:30329685    Min.   :1.555e+09  \n Class :character   Class :character   Class :character   1st Qu.:1.555e+09  \n Mode  :character   Mode  :character   Mode  :character   Median :1.555e+09  \n                                                          Mean   :1.555e+09  \n                                                          3rd Qu.:1.556e+09  \n                                                          Max.   :1.556e+09  \n     rawlat          rawlng          speed          bearing     \n Min.   :1.242   Min.   :103.6   Min.   :-1.00   Min.   :  0.0  \n 1st Qu.:1.322   1st Qu.:103.8   1st Qu.:11.69   1st Qu.: 93.0  \n Median :1.340   Median :103.8   Median :17.89   Median :172.0  \n Mean   :1.348   Mean   :103.8   Mean   :16.32   Mean   :178.8  \n 3rd Qu.:1.378   3rd Qu.:103.9   3rd Qu.:21.86   3rd Qu.:269.0  \n Max.   :1.466   Max.   :104.0   Max.   :93.00   Max.   :359.0  \n    accuracy       \n Min.   :1.00e+00  \n 1st Qu.:4.00e+00  \n Median :6.00e+00  \n Mean   :7.22e+00  \n 3rd Qu.:1.00e+01  \n Max.   :1.49e+05  \n\n\n\nReferences\n\nhttps://r4gdsa.netlify.app/chap09.html\nhttps://r4gdsa.netlify.app/chap10.html\nFile Management:\n\nhttps://www.geeksforgeeks.org/file-handling-in-r-programming/"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html",
    "title": "In Class Exercise 5",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, sfdep)\n\nSpdep is much better than sfdep due to some additional functions added to spdep afterwards.\n\n\n\n\n\n\nDataset\nSource\n\n\n\n\nHunan_2012.csv (aspatial dataset)\n\n\n\nHunan_2012.csv (Geospatial dataset)\n\n\n\n\n\n\n\n\n\nhunan &lt;- st_read(dsn = \"../../data/geospatial/week5\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week5' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv(\"../../data/aspatial/week5/Hunan_2012.csv\", show_col_types = FALSE)\n\nWarning: Coordinate pair such as 108.7831,… is in decimal degree which means its WGS84 coordinate system as well.\nAnalysing by Unique Values by City in hunan2012!:\nAnalysing by Unique Values by City in hunan:\n\n\n\n\nhunan_GDPPC &lt;- left_join(hunan, hunan2012) %&gt;%\nselect (1:4, 7, 15)\n\n\n\n\n\ntmap_mode(\"plot\") #&lt;- static version\n#tmap_mode(\"view\") #&lt;- interactive version\n#tm_shape(hunan_GDPPC + \n#           tm_fill(\"GDPPC\", style = \"quantile\",\n#                    palette = \"Blues\",\n#                    title = \"GDPPC\") + \n#         tm_layout(main.title = \"Distribution of GDP per capita by county, Hunan Province\",\n#                   main.title.position = \"center\",\n#                   main.title.size = 1.2,\n#                   main.title.height = 0.45,\n#                   main.title.width = 0.35,\n#                   frame = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#getting-started---installation",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#getting-started---installation",
    "title": "In Class Exercise 5",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse)\n\nSpdep is much better than sfdep!"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#installation",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#installation",
    "title": "In Class Exercise 5",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, sfdep)\n\nSpdep is much better than sfdep due to some additional functions added to spdep afterwards."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#importing-dataset",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#importing-dataset",
    "title": "In Class Exercise 5",
    "section": "",
    "text": "Dataset\nSource\n\n\n\n\nHunan_2012.csv (aspatial dataset)\n\n\n\nHunan_2012.csv (Geospatial dataset)\n\n\n\n\n\n\n\n\n\nhunan &lt;- st_read(dsn = \"../../data/geospatial/week5\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week5' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv(\"../../data/aspatial/week5/Hunan_2012.csv\", show_col_types = FALSE)\n\nWarning: Coordinate pair such as 108.7831,… is in decimal degree which means its WGS84 coordinate system as well.\nAnalysing by Unique Values by City in hunan2012!:\nAnalysing by Unique Values by City in hunan:"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#pre-processing",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#pre-processing",
    "title": "In Class Exercise 5",
    "section": "",
    "text": "hunan_GDPPC &lt;- left_join(hunan, hunan2012) %&gt;%\nselect (1:4, 7, 15)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#plotting",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#plotting",
    "title": "In Class Exercise 5",
    "section": "",
    "text": "tmap_mode(\"plot\") #&lt;- static version\n#tmap_mode(\"view\") #&lt;- interactive version\n#tm_shape(hunan_GDPPC + \n#           tm_fill(\"GDPPC\", style = \"quantile\",\n#                    palette = \"Blues\",\n#                    title = \"GDPPC\") + \n#         tm_layout(main.title = \"Distribution of GDP per capita by county, Hunan Province\",\n#                   main.title.position = \"center\",\n#                   main.title.size = 1.2,\n#                   main.title.height = 0.45,\n#                   main.title.width = 0.35,\n#                   frame = TRUE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#analysis",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#analysis",
    "title": "In Class Exercise 5",
    "section": "Analysis",
    "text": "Analysis\n\nStep 1\n\nwm_q &lt;- hunan_GDPPC %&gt;%\nmutate(nb = st_contiguity(geometry),\nwt = st_weights(nb, style = \"W\"), .before = 1)\n\n\nmutate is equivalent to pd.compute\nCombining polynb() and nb2llists() from hands on exercise in the above code chunk. The above format is the more advanced improved version\n\n\n\nStep 2 - Computing Global Moran’I\n\nmoranI &lt;- global_moran_test(wm_q$GDPPC,\nwm_q$nb,\nwm_q$wt)\nglimpse(moranI)\n\nList of 6\n $ statistic  : Named num 4.74\n  ..- attr(*, \"names\")= chr \"Moran I statistic standard deviate\"\n $ p.value    : num 1.09e-06\n $ estimate   : Named num [1:3] 0.30075 -0.01149 0.00435\n  ..- attr(*, \"names\")= chr [1:3] \"Moran I statistic\" \"Expectation\" \"Variance\"\n $ alternative: chr \"greater\"\n $ method     : chr \"Moran I test under randomisation\"\n $ data.name  : chr \"x  \\nweights: listw    \\n\"\n - attr(*, \"class\")= chr [1:2] \"htest\" \"list\"\n\n\n\n\nStep 3 - Performing Global Moran’I permutation test\n\nset.seed(1234)\n\nglobal_moran_perm(wm_q$GDPPC,\nwm_q$nb,\nwm_q$wt, \nnsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nnsim = 99 because it is running 100 times simulations since the index for running the loop starts from 0.\n\nThe report shows the p-value is smaller than alpha value of 0.05. Thus there is enough statistical evidence to reject the null hypothesis that the spatial distribution of GPD per capita are resembling random distribution (Independence from spatial). Because the Moran;s statistics is greater than 0. We can infer that spatial distribution shows signs of clustering."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#quarto-html-basics-recap",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#quarto-html-basics-recap",
    "title": "In Class Exercise 5",
    "section": "Quarto HTML basics Recap",
    "text": "Quarto HTML basics Recap\n```{mermaid} flowchart LR A[Hard edge] –&gt; B(Round edge) B –&gt; C{Decision} C –&gt; D[Result one] C –&gt; E[Result two] ```\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.\n\n\nReferences:\n\nhttps://quarto.org/docs/authoring/markdown-basics.html"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#creating-flow-charts",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#creating-flow-charts",
    "title": "In Class Exercise 5",
    "section": "Creating flow charts",
    "text": "Creating flow charts\n\nflowchart LR\n  A[Importing & Loading Dataset] ---&gt; B(Preprocessing)\n  B ---&gt; C{Truncate data}\n  C --&gt; D[Less Time]\n  C --&gt; E[More Time]\n\n\n\n\n\n\n\n\n\n\n\nImporting and Loading Dataset\nPreprocessing for business use case\nTruncate data - for Singapore road network\n\nLess Time for lixelisation (few lines to cut)\nMore Time but might exclude some critical road datapoints"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#creating-reflection-notes",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#creating-reflection-notes",
    "title": "In Class Exercise 5",
    "section": "Creating reflection notes",
    "text": "Creating reflection notes\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.\n\n\nReferences:\n\nhttps://quarto.org/docs/authoring/markdown-basics.html\nhttps://quarto.org/docs/authoring/diagrams.html#chrome-install"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#processing-pipeline-for-csvparquet-files-in-a-directory",
    "href": "Hands-on_Ex/Hands-on_Ex-05/Hands-on_Ex05.html#processing-pipeline-for-csvparquet-files-in-a-directory",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation & Local Measures of Spatial Autocorrelation",
    "section": "Processing pipeline for CSV/Parquet files in a Directory",
    "text": "Processing pipeline for CSV/Parquet files in a Directory\n\n\n\n\n\n\n\n\n\n\n\nListing files in a directory and reading all the parquet files to a single dataframe:\n\ndfs = list()\ndata_dir &lt;- \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi/\"\nfor (i in list.files(path=data_dir, pattern=NULL, all.files=FALSE, \n    full.names=FALSE)){\n  currDf &lt;- read_parquet(str_interp(\"${data_dir}/${i}\"))\n  dfs &lt;- rbind(dfs, currDf)\n  print(str_interp(\"${data_dir}/${i} --&gt; curr dimensions: [${dim(currDf)[1]}, ${dim(currDf)[2]}] --&gt; total dimensions: [${dim(dfs)[1]}, ${dim(dfs)[2]}]\"))\n}\n\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00000.parquet --&gt; curr dimensions: [3034553, 9] --&gt; total dimensions: [3034553, 9]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00001-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; curr dimensions: [3029553, 9] --&gt; total dimensions: [6064106, 9]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00002-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; curr dimensions: [3032527, 9] --&gt; total dimensions: [9096633, 9]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00003-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; curr dimensions: [3033732, 9] --&gt; total dimensions: [12130365, 9]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00004-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; curr dimensions: [3031857, 9] --&gt; total dimensions: [15162222, 9]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00005-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; curr dimensions: [3034701, 9] --&gt; total dimensions: [18196923, 9]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00006-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; curr dimensions: [3033018, 9] --&gt; total dimensions: [21229941, 9]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00007-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; curr dimensions: [3034261, 9] --&gt; total dimensions: [24264202, 9]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00008-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; curr dimensions: [3032914, 9] --&gt; total dimensions: [27297116, 9]\"\n[1] \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/GrabPosisi//part-00009-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet --&gt; curr dimensions: [3032569, 9] --&gt; total dimensions: [30329685, 9]\"\n\ndfs\n\n# A tibble: 30,329,685 × 9\n   trj_id driving_mode osname pingtimestamp rawlat rawlng speed bearing accuracy\n   &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt;          &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt;    &lt;dbl&gt;\n 1 70014  car          andro…    1554943236   1.34   104. 18.9      248     3.9 \n 2 73573  car          andro…    1555582623   1.32   104. 17.7       44     4   \n 3 75567  car          andro…    1555141026   1.33   104. 14.0       34     3.9 \n 4 1410   car          andro…    1555731693   1.26   104. 13.0      181     4   \n 5 4354   car          andro…    1555584497   1.28   104. 14.8       93     3.9 \n 6 32630  car          andro…    1555395258   1.30   104. 23.2       73     3.9 \n 7 64631  car          andro…    1554768955   1.35   104.  0         82     3   \n 8 76484  car          andro…    1554783532   1.34   104.  3.98     321     3.65\n 9 65747  car          ios       1554898418   1.29   104.  4.68     324    50   \n10 60478  car          ios       1555593189   1.33   104. 16.5       31    16   \n# ℹ 30,329,675 more rows\n\n\n\nlength(dfs)\n\n[1] 9\n\ndfs[1:2]\n\n# A tibble: 30,329,685 × 2\n   trj_id driving_mode\n   &lt;chr&gt;  &lt;chr&gt;       \n 1 70014  car         \n 2 73573  car         \n 3 75567  car         \n 4 1410   car         \n 5 4354   car         \n 6 32630  car         \n 7 64631  car         \n 8 76484  car         \n 9 65747  car         \n10 60478  car         \n# ℹ 30,329,675 more rows\n\n\n\nReferences\n\nhttps://r4gdsa.netlify.app/chap09.html\nhttps://r4gdsa.netlify.app/chap10.html\nFile Management:\n\nhttps://www.geeksforgeeks.org/file-handling-in-r-programming/"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-06/Hands-on_Ex06.html#identifying-trends-using-geom_smooth",
    "href": "Hands-on_Ex/Hands-on_Ex-06/Hands-on_Ex06.html#identifying-trends-using-geom_smooth",
    "title": "Hands-on Exercise 6",
    "section": "Identifying trends using geom_smooth()",
    "text": "Identifying trends using geom_smooth()\n\nggplot(iris, aes(x=Sepal.Length, y=Petal.Length, col=Species))+geom_point() +geom_smooth()\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x=Sepal.Length, y=Petal.Length, col=Species)) +geom_point(color = \"blue\") + geom_smooth(color = \"red\")\n\ncoord_flip() can be used to pivot the whole chart - some charts may be easier to look this way: Good for finding count of unique values in a column and seeing any trends! Do a group by column and count(*) to get the counts of each unique value of that column….\n\nggplot(mtcars, aes(x = gear)) +geom_bar()+coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-06/Hands-on_Ex06.html#animation",
    "href": "Hands-on_Ex/Hands-on_Ex-06/Hands-on_Ex06.html#animation",
    "title": "Hands-on Exercise 6",
    "section": "Animation",
    "text": "Animation\n\nlibrary(plotly)\n\nquakes = read.csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\nfig &lt;- quakes \nfig &lt;- fig %&gt;%\n  plot_ly(\n    type = 'densitymapbox',\n    lat = ~Latitude,\n    lon = ~Longitude,\n    coloraxis = 'coloraxis',\n    radius = 10) \nfig &lt;- fig %&gt;%\n  layout(\n    mapbox = list(\n      style=\"stamen-terrain\",\n      center= list(lon=180)), coloraxis = list(colorscale = \"Viridis\"))\n\nfig\n\n\n\n\n\nGlobal trend\n\ndf &lt;- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/globe_contours.csv')\ndf$id &lt;- seq_len(nrow(df))\n\nlibrary(tidyr)\nd &lt;- df %&gt;%\n  gather(key, value, -id) %&gt;%\n  separate(key, c(\"l\", \"line\"), \"\\\\.\") %&gt;%\n  spread(l, value)\n\ngeo &lt;- list(\n  showland = TRUE,\n  showlakes = TRUE,\n  showcountries = TRUE,\n  showocean = TRUE,\n  countrywidth = 0.5,\n  landcolor = toRGB(\"grey90\"),\n  lakecolor = toRGB(\"white\"),\n  oceancolor = toRGB(\"white\"),\n  projection = list(\n    type = 'orthographic',\n    rotation = list(\n      lon = -100,\n      lat = 40,\n      roll = 0\n    )\n  ),\n  lonaxis = list(\n    showgrid = TRUE,\n    gridcolor = toRGB(\"gray40\"),\n    gridwidth = 0.5\n  ),\n  lataxis = list(\n    showgrid = TRUE,\n    gridcolor = toRGB(\"gray40\"),\n    gridwidth = 0.5\n  )\n)\n\nfig &lt;- plot_geo(d)\nfig &lt;- fig %&gt;% group_by(line)\nfig &lt;- fig %&gt;% add_lines(x = ~lon, y = ~lat)\nfig &lt;- fig %&gt;% layout(\n    showlegend = FALSE, geo = geo,\n    title = 'Contour lines over globe&lt;br&gt;(Click and drag to rotate)'\n  )\n\nfig\n\n\n\n\n\n\nlibrary(plotly)\ndf &lt;- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')\n\ndf$q &lt;- with(df, cut(pop, quantile(pop)))\nlevels(df$q) &lt;- paste(c(\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\"), \"Quantile\")\ndf$q &lt;- as.ordered(df$q)\n\ng &lt;- list(\n  scope = 'usa',\n  projection = list(type = 'albers usa'),\n  showland = TRUE,\n  landcolor = toRGB(\"gray85\"),\n  subunitwidth = 1,\n  countrywidth = 1,\n  subunitcolor = toRGB(\"white\"),\n  countrycolor = toRGB(\"white\")\n)\n\nfig &lt;- plot_geo(df, locationmode = 'USA-states', sizes = c(1, 250))\nfig &lt;- fig %&gt;% add_markers(\n    x = ~lon, y = ~lat, size = ~pop, color = ~q, hoverinfo = \"text\",\n    text = ~paste(df$name, \"&lt;br /&gt;\", df$pop/1e6, \" million\")\n  )\nfig &lt;- fig %&gt;% layout(title = '2014 US city populations&lt;br&gt;(Click legend to toggle)', geo = g)\n\nfig"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-06/Hands-on_Ex06.html#d-plots",
    "href": "Hands-on_Ex/Hands-on_Ex-06/Hands-on_Ex06.html#d-plots",
    "title": "Hands-on Exercise 6",
    "section": "3D Plots",
    "text": "3D Plots\n\nKernel Density Plot\n\nkd &lt;- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))\nfig &lt;- plot_ly(x = kd$x, y = kd$y, z = kd$z) %&gt;% add_surface()\n\nfig\n\n\n\n\n\nMaybe can use in spatial correlation where the factor is the 3rd dimension (first and second are latitude and longitude respectively)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-06/Hands-on_Ex06.html#helicopter-mesh--cool",
    "href": "Hands-on_Ex/Hands-on_Ex-06/Hands-on_Ex06.html#helicopter-mesh--cool",
    "title": "Hands-on Exercise 6",
    "section": "HELICOPTER MESH -COOL",
    "text": "HELICOPTER MESH -COOL\n\nlibrary(plotly)\nlibrary(geomorph)\n\ndest &lt;- \"data/chopper.ply\"\nmesh &lt;- read.ply(dest)\n# see getS3method(\"shade3d\", \"mesh3d\") for details on how to plot\n\n# plot point cloud\nx &lt;- mesh$vb[\"xpts\",]\ny &lt;- mesh$vb[\"ypts\",]\nz &lt;- mesh$vb[\"zpts\",]\nm &lt;- matrix(c(x,y,z), ncol=3, dimnames=list(NULL,c(\"x\",\"y\",\"z\")))\n\n# now figure out the colormap\nzmean &lt;- apply(t(mesh$it),MARGIN=1,function(row){mean(m[row,3])})\n\nlibrary(scales)\nfacecolor = colour_ramp(\n  brewer_pal(palette=\"RdBu\")(9)\n)(rescale(x=zmean))\n\nfig &lt;- plot_ly(\n  x = x, y = y, z = z,\n  i = mesh$it[1,]-1, j = mesh$it[2,]-1, k = mesh$it[3,]-1,\n  facecolor = facecolor,\n  type = \"mesh3d\"\n)\n\nfig\n\n\nReferences\n\nhttps://images.datacamp.com/image/upload/v1666806657/Marketing/Blog/ggplot2_cheat_sheet.pdf\nhttps://plotly.com/r/"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Dengue Hemorrhagic Fever (in short dengue fever) is one of the most widespread mosquito-borne diseases in the most tropical and subtropical regions. It is an acute disease caused by dengue virus infection which is transmitted by female Aedes aegypti and Aedes albopictus mosquitoes. In 2015, Taiwan had recorded the most severe dengue fever outbreak with more than 43,000 dengue cases and 228 deaths. Since then, the annual reported dengue fever cases were maintained at the level of not more than 200 cases. However, in 2023, Taiwan recorded 26703 dengue fever cases. Figure below reveals that more than 25,000 cases were reported at Tainan City.\nFigure 2 and 3 below reveal that more than 80% of the reported dengue fever cases occurred in the month August-November 2023 and epidemiology week 31-50.\n\n\n\nAs a curious geospatial analytics green horn, you are interested to discover:\nif the distribution of dengue fever outbreak at Tainan City, Taiwan are independent from space and space and time. If the outbreak is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.\n\n\n\nThe specific tasks of this take-home exercise are as follows:\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer: a study area layer in sf polygon features. It must be at village level and confined to the D01, D02, D04, D06, D07, D08, D32 and D39 counties of Tainan City, Taiwan. a dengue fever layer within the study area in sf point features. The dengue fever cases should be confined to epidemiology week 31-50, 2023. a derived dengue fever layer in spacetime s3 class of sfdep. It should contain, among many other useful information, a data field showing number of dengue fever cases by village and by epidemiology week. Using the extracted data, perform global spatial autocorrelation analysis. Using the extracted data, perform local spatial autocorrelation analysis. Using the extracted data, perform emerging hotspot analysis. Describe the spatial patterns revealed by the analysis above.\n\n\n\nFor the purpose of this take-home exercise, two data sets are provided, they are:\nTAIWAN_VILLAGE_2020, a geospatial data of village boundary of Taiwan. It is in ESRI shapefile format. The data is in Taiwan Geographic Coordinate System. (Source: Historical map data of the village boundary: TWD97 longitude and latitude)\nDengue_Daily.csv, an aspatial data of reported dengue cases in Taiwan since 1998. (Source: Dengue Daily Confirmed Cases Since 1998. Below are selected fields that are useful for this study:\n發病日: Onset date 最小統計區中心點X: x-coordinate 最小統計區中心點Y: y-coordinate Both data sets have been uploaded on eLearn."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#setting-the-scene",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Dengue Hemorrhagic Fever (in short dengue fever) is one of the most widespread mosquito-borne diseases in the most tropical and subtropical regions. It is an acute disease caused by dengue virus infection which is transmitted by female Aedes aegypti and Aedes albopictus mosquitoes. In 2015, Taiwan had recorded the most severe dengue fever outbreak with more than 43,000 dengue cases and 228 deaths. Since then, the annual reported dengue fever cases were maintained at the level of not more than 200 cases. However, in 2023, Taiwan recorded 26703 dengue fever cases. Figure below reveals that more than 25,000 cases were reported at Tainan City.\nFigure 2 and 3 below reveal that more than 80% of the reported dengue fever cases occurred in the month August-November 2023 and epidemiology week 31-50."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#objectives",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "As a curious geospatial analytics green horn, you are interested to discover:\nif the distribution of dengue fever outbreak at Tainan City, Taiwan are independent from space and space and time. If the outbreak is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-task",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer: a study area layer in sf polygon features. It must be at village level and confined to the D01, D02, D04, D06, D07, D08, D32 and D39 counties of Tainan City, Taiwan. a dengue fever layer within the study area in sf point features. The dengue fever cases should be confined to epidemiology week 31-50, 2023. a derived dengue fever layer in spacetime s3 class of sfdep. It should contain, among many other useful information, a data field showing number of dengue fever cases by village and by epidemiology week. Using the extracted data, perform global spatial autocorrelation analysis. Using the extracted data, perform local spatial autocorrelation analysis. Using the extracted data, perform emerging hotspot analysis. Describe the spatial patterns revealed by the analysis above."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-data",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "For the purpose of this take-home exercise, two data sets are provided, they are:\nTAIWAN_VILLAGE_2020, a geospatial data of village boundary of Taiwan. It is in ESRI shapefile format. The data is in Taiwan Geographic Coordinate System. (Source: Historical map data of the village boundary: TWD97 longitude and latitude)\nDengue_Daily.csv, an aspatial data of reported dengue cases in Taiwan since 1998. (Source: Dengue Daily Confirmed Cases Since 1998. Below are selected fields that are useful for this study:\n發病日: Onset date 最小統計區中心點X: x-coordinate 最小統計區中心點Y: y-coordinate Both data sets have been uploaded on eLearn."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-acquisition",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-acquisition",
    "title": "Take Home Exercise 2",
    "section": "Data Acquisition",
    "text": "Data Acquisition\n\n\n\n\n\n\n\nDataset Name\nSource\n\n\nTAIWAN_VILLAGE_2020\nHistorical map data of the village boundary: TWD97 longitude and latitude\n\n\nDengue_Daily.csv\nDengue Daily Confirmed Cases Since 1998"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#installing-and-loading-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#installing-and-loading-packages",
    "title": "Take Home Exercise 2",
    "section": "Installing and Loading Packages",
    "text": "Installing and Loading Packages\nLets install the relevant R libraries needed using pacman.\n\npacman::p_load(sf, spNetwork, tmap, classInt, viridis, tidyverse, list, arrow, lubridate, tidyverse, readr, sp, maptools, raster, spatstat, spdep, readr, ggplot2, plotly, hexbin, gganimate, gifski, png, transformr, dplyr, spacetime)\n\n\nSetting Important Configurations\n\nfolderToSave &lt;- \"/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/rds\"\n\n\ncurrentdirec = list.files(path=\"../../data/takehomeassigment2/geospatial\", pattern=NULL, all.files=FALSE, \n    full.names=FALSE)\ncurrentdirec\n\nReading the grab aspatial data:\n\ndengue_df &lt;- read_csv(\"../../data/takehomeassigment2/aspatial/Dengue_Daily.csv\")\ndengue_df\n\nGetting Columns of dengue_df:\n\nnames(dengue_df)\n\nLets print a summary of dengue_df to find the data distribution and other information:\n\nsummary(dengue_df[])\n\nWe need to retrieve the coastal outline of Taiwan village so that we are able to fetch the dengue infections specifically within these boundaries. According to https://epsg.io/3826, the EPSG code for taiwan to be used as the coordinate system is 3826. Thus, the data has been projected to Taiwan’s coordinate system using 3826. However since the data is already projected to Taiwan’s coordinate system we do not need to do this\n\ntaiwan_sf &lt;- st_read(dsn = \"../../data/takehomeassigment2/geospatial\", layer=\"TAINAN_VILLAGE\")\ntaiwan_sf\n\n\nplot(taiwan_sf)\n\n\n# find location of missing values\nprint(\"Position of missing values \")\nwhich(is.na(dengue_df))\n \n# count total missing values \nprint(\"Count of total missing values  \")\nsum(is.na(dengue_df))\n\n\ncolSums(is.na(dengue_df))\n\n\n\n\n\n\n\nTip\n\n\n\nInteresting observation I had here was how all the columns had no missing values and yet the map was not being plotted. Then, I realised it was due to the null values being presented as “None” string instead of the numerical value such as the example below.\n\n\n\ndengue_df[6,]$最小統計區中心點X\n\nLets filter out all the None values to get valid x and y coordinates. 最小統計區中心點X, 最小統計區中心點Y\n\ndengue_df_filtered &lt;- filter(dengue_df, 最小統計區中心點X != \"None\" & 最小統計區中心點Y != \"None\")\nhead(dengue_df_filtered)\n\n\n\n\n\n\n\n\n\n\n\nWe need to filter the onset date column by epiweek to get epiweeks 31 to 50 of 2023. According to https://www.cmmcp.org/sites/g/files/vyhlif2966/f/uploads/epiweekcalendar2023.pdf, the start date of epiweek 31 in 2023 is 30-07-2023 and end date of epiweek 50 in 2023 is 16-12-2023.\n\ndengue_df_filtered$epiweek = epiweek(dengue_df_filtered$發病日)\nnames(dengue_df_filtered)\n\n\nstart_date = \"2023-07-30\"\nend_date = \"2023-12-16\"\ndengue_df_filtered = filter(dengue_df_filtered, 發病日 &gt;= start_date & 發病日 &lt;= end_date)\ndengue_df_filtered\n\nAfter filtering valid points, lets convert the latitude and longitude from wsg84 to TWD97 as it conforms Taiwan’s coordinate system for easier analysis and for us to join it with the taiwan_sf later.\n\n\ndengue_df_filtered &lt;- st_as_sf(dengue_df_filtered, \n                       coords = c(\"最小統計區中心點X\",\"最小統計區中心點Y\"),\n                       crs=3826) %&gt;%\nst_transform(crs = 3826)\nglimpse(dengue_df_filtered)\n\nLet us save this combined dataframe to RDS so that we will not need to repeat the above steps. Replace filepath with the directory you would like to save the rds at.\n\nfilepath &lt;- str_interp(\"${folderToSave}/dengue_df\")\nwrite_rds(dengue_df_filtered, filepath) \n\nReload the data from the file path from here for subsequent steps:\n\nfilepath &lt;- str_interp(\"${folderToSave}/dengue_df\")\ndengue_df &lt;- read_rds(filepath, refhook = NULL)\nhead(dengue_df)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-distribution-for-columns",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-distribution-for-columns",
    "title": "Take Home Exercise 2",
    "section": "Data distribution for columns",
    "text": "Data distribution for columns\n\nAgeInfected_counties_and_cities\n\n\n\ng &lt;- ggplot(dengue_df_2, aes(年齡層))  \np &lt;-  g + geom_bar() + ggtitle(\"Count of Entries by Age\") +  xlab(\"Age\") + ylab(\"Count\")\n\nggplotly(p) \n\n\n\n\ng &lt;- ggplot(dengue_df, aes(Infected_counties_and_cities))  \np &lt;-  g + geom_bar() + ggtitle(\"Count of Entries by cities\") +  xlab(\"Infected_counties_and_cities\") + ylab(\"Count\")\n\nggplotly(p) \n\n\n\n\n\n\nSince we only need the polygons from D01, D02, D04, D06, D07, D08, D32 and D39 counties of Tainan City, Taiwan, we we will filter our polygons from these regions only:\n\ntaiwan_sf_filtered &lt;- filter(taiwan_sf, TOWNID %in% c('D01', 'D02', 'D04', 'D06', 'D07', 'D08', 'D32', 'D39'))\nhead(taiwan_sf_filtered)\n\nSimple feature collection with 6 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0936 ymin: 22.9156 xmax: 120.2585 ymax: 23.08827\nGeodetic CRS:  TWD97\n     VILLCODE COUNTYNAME TOWNNAME VILLNAME       VILLENG COUNTYID COUNTYCODE\n1 67000350032     臺南市   安南區   青草里  Qingcao Vil.        D      67000\n2 67000270011     臺南市   仁德區   保安里   Bao'an Vil.        D      67000\n3 67000370005     臺南市   中西區   赤嵌里  Chihkan Vil.        D      67000\n4 67000330004     臺南市     南區   大成里  Dacheng Vil.        D      67000\n5 67000350028     臺南市   安南區   城北里 Chengbei Vil.        D      67000\n6 67000350030     臺南市   安南區   城南里 Chengnan Vil.        D      67000\n  TOWNID TOWNCODE NOTE                       geometry\n1    D06 67000350 &lt;NA&gt; POLYGON ((120.1176 23.08387...\n2    D32 67000270 &lt;NA&gt; POLYGON ((120.2304 22.93544...\n3    D08 67000370 &lt;NA&gt; POLYGON ((120.2012 22.99966...\n4    D02 67000330 &lt;NA&gt; POLYGON ((120.1985 22.98147...\n5    D06 67000350 &lt;NA&gt; POLYGON ((120.1292 23.06512...\n6    D06 67000350 &lt;NA&gt; POLYGON ((120.1246 23.06904...\n\n\nLets look at the columns present in Taiwan_sf:\n\nnames(taiwan_sf_filtered)\n\n [1] \"VILLCODE\"   \"COUNTYNAME\" \"TOWNNAME\"   \"VILLNAME\"   \"VILLENG\"   \n [6] \"COUNTYID\"   \"COUNTYCODE\" \"TOWNID\"     \"TOWNCODE\"   \"NOTE\"      \n[11] \"geometry\"  \n\n\nSince we need to do an analysis of the count of cases at village level and by weeks, let’s group by village town and week to get the count of cases according to village and weeks. Since multiple villages exist in a town and both town and village fields exist in taiwan sf, we can group by with townname as well.\n\ndengue_df_count = dengue_df %&gt;% group_by(VILLNAME, TOWNNAME, epiweek) %&gt;%\n  summarise(total_count = n())\n\ndengue_df_count = st_drop_geometry(dengue_df_count)\nhead(dengue_df_count)\n\n# A tibble: 6 × 4\n# Groups:   VILLNAME, TOWNNAME [2]\n  VILLNAME TOWNNAME epiweek total_count\n  &lt;chr&gt;    &lt;chr&gt;      &lt;dbl&gt;       &lt;int&gt;\n1 None     三峽區        40           1\n2 None     下營區        36           1\n3 None     下營區        38           1\n4 None     下營區        40           2\n5 None     下營區        42           1\n6 None     下營區        45           1\n\n\nWe can combine villname and townname as it is representative of the region and can be used as a single column later.\n\ndengue_df_count$VILLTOWN = paste(dengue_df_count$VILLNAME, dengue_df_count$TOWNNAME)\ntaiwan_sf_filtered$VILLTOWN = paste(taiwan_sf_filtered$VILLNAME, taiwan_sf_filtered$TOWNNAME)\n\nWe can now ungroup all the times and keep only VILLNAME, TOWNNAME, epiweek and the derived count column for the dengue cases in each region at that epiweek.\n\ndengue_df_count2 = dengue_df_count %&gt;%\n            ungroup() %&gt;%\n  select(3,4, 5) \nnames(dengue_df_count2)[1] = \"epiweek\"\nhead(dengue_df_count2)\n\n# A tibble: 6 × 3\n  epiweek total_count VILLTOWN   \n    &lt;dbl&gt;       &lt;int&gt; &lt;chr&gt;      \n1      40           1 None 三峽區\n2      36           1 None 下營區\n3      38           1 None 下營區\n4      40           2 None 下營區\n5      42           1 None 下營區\n6      45           1 None 下營區\n\n\nBefore adding in entries for missing observations in taiwan sf, lets observe how it initially looks like:\n\nAs we can see there are many missing regions with no observations according to dengue_df. We need to creating empty observations with count 0 so that we are able to create the spacetime cube later for spatiotemporal analysis.\n\n#for each town check if the week exists is not then add row for that week for that reach with count 0 \ntotal_invalids = 0\nfor(i in 1:nrow(taiwan_sf_filtered))\n{\n  region = taiwan_sf_filtered$VILLTOWN[i]\n  #cat(\"region: \", region)\n  for(j in 31:50){\n    if (nrow(dengue_df_count2[dengue_df_count2$epiweek == j & dengue_df_count2$VILLTOWN == region, ]) == 0){\n    matching_week_region = c(epiweek = j, total_count = 0, VILLTOWN = region)\n    dengue_df_count2 = rbind(dengue_df_count2,matching_week_region) \n    total_invalids = total_invalids + 1\n    }\n  }\n  #print(total_invalids)\n}\nprint(total_invalids)\n\n[1] 2111\n\n\nSince the epiweek and total_count are in integer format we need to cast them to integer for our analysis.\n\ndengue_df_count2['epiweek'] &lt;- as.integer(unlist(dengue_df_count2['epiweek']))\ndengue_df_count2['total_count'] &lt;- as.integer(unlist(dengue_df_count2['total_count']))\n\nLets add the attributes of dengue_df_count2 to the taiwan sf spatial dataset using a left join:\n\ndengue_df_combined = left_join(taiwan_sf_filtered, dengue_df_count2)\ndengue_df_combined &lt;- dengue_df_combined %&gt;%\n  select(11, 12, 13)\nnames(dengue_df_combined)[2] = \"epiweek\"\nhead(dengue_df_combined)\n\nSimple feature collection with 6 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0936 ymin: 23.05871 xmax: 120.1185 ymax: 23.08827\nGeodetic CRS:  TWD97\n       VILLTOWN epiweek total_count                       geometry\n1 青草里 安南區      37           1 POLYGON ((120.1176 23.08387...\n2 青草里 安南區      41           1 POLYGON ((120.1176 23.08387...\n3 青草里 安南區      31           0 POLYGON ((120.1176 23.08387...\n4 青草里 安南區      32           0 POLYGON ((120.1176 23.08387...\n5 青草里 安南區      33           0 POLYGON ((120.1176 23.08387...\n6 青草里 安南區      34           0 POLYGON ((120.1176 23.08387...\n\n\nWe can look at the distribution of data for each region and check if each village has 20 weeks worth of observations.\n\ndengue_df_distribution = dengue_df_combined %&gt;% group_by(VILLTOWN) %&gt;%\n  summarise(total_count_weeks = n())\ndengue_df_distribution\n\nSimple feature collection with 258 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0627 ymin: 22.89401 xmax: 120.2925 ymax: 23.09144\nGeodetic CRS:  TWD97\n# A tibble: 258 × 3\n   VILLTOWN      total_count_weeks                                      geometry\n   &lt;chr&gt;                     &lt;int&gt;                                 &lt;POLYGON [°]&gt;\n 1 一甲里 仁德區                20 ((120.2492 22.98265, 120.2492 22.98244, 120.…\n 2 三合里 永康區                20 ((120.2376 23.01428, 120.2375 23.01427, 120.…\n 3 三民里 永康區                20 ((120.248 23.06765, 120.248 23.06758, 120.24…\n 4 上崙里 仁德區                20 ((120.2701 22.94841, 120.2684 22.94632, 120.…\n 5 中樓里 北區                  20 ((120.2185 23.00673, 120.2184 23.00671, 120.…\n 6 中洲里 仁德區                20 ((120.2667 22.92651, 120.2667 22.9265, 120.2…\n 7 中興里 永康區                20 ((120.2417 23.00886, 120.2416 23.00883, 120.…\n 8 中華里 永康區                20 ((120.24 23.00211, 120.2397 23.00211, 120.23…\n 9 中西里 東區                  20 ((120.2178 22.99238, 120.2178 22.99235, 120.…\n10 二王里 永康區                20 ((120.25 23.02224, 120.2499 23.02222, 120.24…\n# ℹ 248 more rows\n\n\nNice, all of them have 20 observations for weeks 31 to 50 of year 2023.\nLet’s analyse the map of a single week 33.\n\nweek33 = dengue_df_combined[dengue_df_combined$epiweek == 33, ]\ntmap_mode(\"plot\")\ntm_shape(week33) +\n  tm_fill(\"total_count\") +\n  tm_borders()\n\n\n\n\n\n\n\n\nLet us try to visualise the data using equal interval and equal quantile classifcations:\n\nequal &lt;- tm_shape(week33) +\n  tm_fill(\"total_count\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(week33) +\n  tm_fill(\"total_count\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\nThis shows that the data unevenly distributed with most regions having around 1 dengue case.\nLets create an animation of the changing dengue cases over the 20 weeks.\n\nvacrate_anim &lt;-\n  tm_shape(dengue_df_combined) + tm_fill(\"total_count\",\n            palette = \"Purples\") +\n    tm_borders(lwd = 0.1) +\n  tm_facets(along = \"epiweek\", free.coords = FALSE)\n\nThis is the animated object.\n\nvacrate_anim\n\n\n\n\n\n\n\n\n========\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\n====\n\n\n\n\n\n\n\n\n\nWe can save this object to a gif file so that it can be viewed in an animated fashion.\n\ntmap_animation(vacrate_anim, filename = \"vacrate2.gif\", delay = 100, width = 1280, height = 720, scale = 2)\n\nCreating frames\n\n\n========\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n====\n\n\n\nCreating animation\nAnimation saved to /Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/Take-home_Ex/Take-home_Ex02/vacrate2.gif \n\n\n\n\n#dengue_df_combined_withgeometry = dengue_df_combined\n#dengue_df_combined = st_drop_geometry(dengue_df_combined)\n#head(dengue_df_combined)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\nevents such as crime, traffic accident and disease onset, or\nbusiness services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#overview",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\nevents such as crime, traffic accident and disease onset, or\nbusiness services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#the-data",
    "title": "Hands-on Exercise 7",
    "section": "5.2 The data",
    "text": "5.2 The data\nTo provide answers to the questions above, three data sets will be used. They are:\n\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#installing-and-loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#installing-and-loading-the-r-packages",
    "title": "Hands-on Exercise 7",
    "section": "5.3 Installing and Loading the R packages",
    "text": "5.3 Installing and Loading the R packages\nIn this hands-on exercise, five R packages will be used, they are:\n\nsf, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nUse the code chunk below to install and launch the five R packages.\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#spatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#spatial-data-wrangling",
    "title": "Hands-on Exercise 7",
    "section": "5.4 Spatial Data Wrangling",
    "text": "5.4 Spatial Data Wrangling\n\n5.4.1 Importing the spatial data\nIn this section, st_read() of sf package will be used to import these three geospatial data sets into R.\n\nchildcare_sf &lt;- st_read(\"../../data/geospatial/ChildCareServices.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `ChildCareServices' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf &lt;- st_read(dsn = \"../../data/geospatial\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"../../data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBefore we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.\n\nDIY: Using the appropriate sf function you learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.\n\nNotice that except childcare_sf, both mpsz_sf and sg_sf do not have proper crs information.\n\nDIY: Using the method you learned in Lesson 2, assign the correct crs to mpsz_sf and sg_sf simple feature data frames.\n\n\nDIY: If necessary, changing the referencing system to Singapore national projected coordinate system.\n\n\n\n5.4.2 Mapping the geospatial data sets\nAfter checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.\n\nDIY: Using the mapping methods you learned in Hands-on Exercise 3, prepare a map as shown below.\n\nNotice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\nAlternatively, we can also prepare a pin map by using the code chunk below.\n\ntmap_mode('view')\n\n\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\nNotice that at the interactive mode, tmap is using leaflet for R API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\n\nReminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 7",
    "section": "5.5 Geospatial Data wrangling",
    "text": "5.5 Geospatial Data wrangling\nAlthough simple feature data frame is gaining popularity again sp’s Spatial* classes, there are, however, many geospatial analysis packages require the input geospatial data in sp’s Spatial* classes. In this section, you will learn how to convert simple feature data frame to sp’s Spatial* class.\n\n5.5.1 Converting sf data frames to sp’s Spatial* class\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\n\nDIY: Using appropriate function, display the information of these three Spatial* classes as shown below.\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, TELOK BLANGAH DRIVE, #01 - 19/51, SINGAPORE 100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;PCF SPARKLETOTS PRESCHOOL @ TELOK BLANGAH BLK 44 (CC)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;349C54F201805938&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                                            &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;99982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;35, ALLANBROOKE ROAD, SINGAPORE 099982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;ISLANDER PRE-SCHOOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;4F63ACF93EFABE7F&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\n\n5.5.2 Converting the Spatial* class into generic sp format\nBut what about PSP object???\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nNext, you should display the sp objects properties as shown below.\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n\n\n\nChallenge: Do you know what are the differences between Spatial* classes and generic sp object?\n\n\n\n5.5.3 Converting the generic sp format into spatstat’s ppp format\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1925 points\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\nNow, let us plot childcare_ppp and examine the different.\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\nYou can take a quick look at the summary statistics of the newly created ppp object by using the code chunk below.\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\nNotice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\n\n5.5.4 Handling duplicated points\nWe can check the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    3    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    4    1    1    1    1    1    1    1    1    1    1    2 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    3    1    1    1    2    1   10    1    1    1    1    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    2    1    1    3    1    1    1    2    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    2    2    2    1    1    1    1    1    1    1    1    2    1    1    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    2    2    2    1    1    1    1    1    2    1    4    1    1    2 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   3    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   1    1    1    1    1   10    1    1    3    1    1    1    1    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    2    6    1    2    1    1    2    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   3    2    3    2    1    2    1    1    2    4    1    6    6    1    1    1 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   2    1    1    1    1    2    1    1    1    1    1    1    3    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    4    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    2    1    1    1    2    1    1    1    2    1    1    1    1    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    2    1    2    2    1    1    1    1    2    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   4    1    1    1    1    2    1    1    1    1    1    1    2    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   2    2    1    1    1    1    1   10    1    2    1    1    1    2    1    3 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1   10   10   10    1    1    1    1    1    1    1    1    1 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    2    1    2    1    1    1    1    3    1    2    1    1    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    3    1    1    1    1    1    2    1    1    2 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    3    1    1    1    1    1    1    1    1    2    2    2    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    3    1    1    1    2    1    1    1    2    2    1    1    1    1    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    4    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    4    1    1    1    1    1    1    4    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    2    1    1 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    3    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    1    1    1    1   10    1    1    1    1    1    2 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    1    2    1    2    1   10    1    4    1    2    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   3    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    3    1    1    3    1    1    1    1    2    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    2 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    2    1    1    1    1    1    2    2    1    1    1    1    2    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    2    1    2    1    1    1    2    1    1    1    2    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    2    1    1    2    1    1    1    1    1    1    1    1    2    1 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    2    2    1    1    1    1    2    1    1    1    1    2    1    1    2 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    2    4    1    1    1    1    1    1    2    1    2    2    2 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   2    1    1    1    1    2    1    1    2    2    2    2    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    2    2    2    1    1    1    1    1    2    1    1    2    2    2    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    2    1    1    2    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   2    1    2    1    2    1    1    1    1    1    1    2    2    1    1    2 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    2    1    2    1    2    1    1    1    1    1    2    1    1    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    2    1    2    2    2    2    2    1    1    1    1    1    2    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    2    1    1    2    1    1    1    1    2    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    3    1    1    1    1    1    1    1   10 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   2    1    3    2    1    2    1    1    2    3    2    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    2    1    2    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    4    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n  10    1    2    4    1    1    1    4    1    4    1    1    1    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    1    1    1    1    1    4    2    3    2    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   2    2    1    1    1    1    1    2    2    3    1    1    1    1    1    2 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   2    2    2    1    1    1    6    1    1    1    1    1    1    1    1    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    1    1    4    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    2    2    1    1    1    1    1    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    2    1    1    1    1    2    1    1    1    1    2    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   2    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 \n   1    1    1    1    1    1    1    1    1    6    1    1    1    1    1    1 \n1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 \n   1    1    1    1    1    1    1    3    1    1    4    1    1    2    1    1 \n1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 \n   2    1    1    1    2    1    4    1    2    1    1    1    1    1    1    1 \n1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 \n   1    1    1    1    1    1    1    1    2    1    1    2    1    1    1    1 \n1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 \n   1    1    1    1    2    1    1    3    1    1    1    2    1    1    1    1 \n1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 \n   2    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 \n   3    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 \n   1    1    1    4    1    1    1    6    1    1    1    1    1    1    1    1 \n1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 \n   1    1    1    2    1    1    1    2    1    1    1    1    1    2    1    1 \n1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 \n   1    2    1    1    1    1    1    1    1    1    2    2    2    1    1    1 \n1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 \n   2    1    2    1    2    1    2    1    1    2    1    2    2    2    2    1 \n1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 \n   1    1    1    1    1    2    1    1    1    2    1    1    1    1    2    1 \n1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 \n   1    4    1    4    1    4    1    1    2    1    1    1    1    1    3    1 \n1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 \n   1    1    1    2    2    2    2    2    2    2    2    1    1    2    2    2 \n1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 \n   1    2    1    1    1    1    1    2    2    2    1    2    2    2    2    1 \n1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 \n   2    1    1    1    1    1    1    1    2    2    1    2    1    1    1    1 \n1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 \n   1    1    1    1    2    1    2    2    2    2    2    2    1    1    2    1 \n1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 \n   1    1    1    2    2    2    2    2    1    1    1    2    1    1    2    2 \n1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 \n   1    2    1    1    2    1    1    2    2    2    1    2    1    2    1    1 \n1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 \n   1    1    1    1    1    1    2    1    1    1    1    4    1    1    1    1 \n1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 \n   3    1    1    2    1    1    1    2    1    1    1    1    1    2    2    1 \n1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 \n   1    1    2    1    2    2    1    1    1    1    1    2    1    1    2    1 \n1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 \n   1    3    2    2    2    1    2    1    3    1    1    1    1    1    1    1 \n1921 1922 1923 1924 1925 \n   1    1    1    1    3 \n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 338\n\n\nThe output shows that there are 128 duplicated point events.\nTo view the locations of these duplicate point events, we will plot childcare data by using the code chunk below.\n\ntmap_mode('view')\n\n\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\ntmap_mode('plot')\n\nThere are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.\nThe second solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\nThe third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\nThe code chunk below implements the jittering approach.\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nDIY: Using the method you learned in previous section, check if any dusplicated point in this geospatial data.\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\n5.5.5 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\nsg_owin &lt;- as(sg_sp, \"owin\")\n\nThe ouput object can be displayed by using plot() function\n\nplot(sg_owin)\n\n\n\n\n\n\n\n\nand summary() function of Base R.\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\n\n5.5.6 Combining point events object and owin object\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.570982e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nDIY: Using the method you learned in previous exercise, plot the newly derived childcareSG_ppp as shown below.\n\n\n5.5.6.1 Extracting study area\nThe code chunk below will be used to extract the target planning areas.\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting target planning areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n5.5.6.2 Converting the spatial point data frame into generic sp format\nNext, we will convert these SpatialPolygonsDataFrame layers into generic spatialpolygons layers.\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\n5.5.6.3 Creating owin object\nNow, we will convert these SpatialPolygons objects into owin objects that is required by spatstat.\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n5.5.6.4 Combining childcare points and the study area\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#identifying-trends-using-geom_smooth",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#identifying-trends-using-geom_smooth",
    "title": "Hands-on Exercise 7",
    "section": "Identifying trends using geom_smooth()",
    "text": "Identifying trends using geom_smooth()\n\nggplot(iris, aes(x=Sepal.Length, y=Petal.Length, col=Species))+geom_point() +geom_smooth()\n\n\n\n\n\n\n\n\n\nggplot(iris, aes(x=Sepal.Length, y=Petal.Length, col=Species)) +geom_point(color = \"blue\") + geom_smooth(color = \"red\")\n\ncoord_flip() can be used to pivot the whole chart - some charts may be easier to look this way: Good for finding count of unique values in a column and seeing any trends! Do a group by column and count(*) to get the counts of each unique value of that column….\n\nggplot(mtcars, aes(x = gear)) +geom_bar()+coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#animation",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#animation",
    "title": "Hands-on Exercise 7",
    "section": "Animation",
    "text": "Animation\n\nlibrary(plotly)\n\nquakes = read.csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')\n\nfig &lt;- quakes \nfig &lt;- fig %&gt;%\n  plot_ly(\n    type = 'densitymapbox',\n    lat = ~Latitude,\n    lon = ~Longitude,\n    coloraxis = 'coloraxis',\n    radius = 10) \nfig &lt;- fig %&gt;%\n  layout(\n    mapbox = list(\n      style=\"stamen-terrain\",\n      center= list(lon=180)), coloraxis = list(colorscale = \"Viridis\"))\n\nfig\n\n\n\n\n\nWhat are other challenging distribution curves we can try?\n\nReferences\n\nhttps://images.datacamp.com/image/upload/v1666806657/Marketing/Blog/ggplot2_cheat_sheet.pdf\nhttps://plotly.com/r/"
  },
  {
    "objectID": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html",
    "href": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\nevents such as crime, traffic accident and disease onset, or\nbusiness services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html#overview",
    "href": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html#overview",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\nevents such as crime, traffic accident and disease onset, or\nbusiness services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html#the-data",
    "href": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html#the-data",
    "title": "Hands-on Exercise 7",
    "section": "5.2 The data",
    "text": "5.2 The data\nTo provide answers to the questions above, three data sets will be used. They are:\n\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html#installing-and-loading-the-r-packages",
    "href": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html#installing-and-loading-the-r-packages",
    "title": "Hands-on Exercise 7",
    "section": "5.3 Installing and Loading the R packages",
    "text": "5.3 Installing and Loading the R packages\nIn this hands-on exercise, five R packages will be used, they are:\n\nsf, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nUse the code chunk below to install and launch the five R packages.\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html#spatial-data-wrangling",
    "href": "Hands-on_Ex/handson7a/Hands-on_Ex07a.html#spatial-data-wrangling",
    "title": "Hands-on Exercise 7",
    "section": "5.4 Spatial Data Wrangling",
    "text": "5.4 Spatial Data Wrangling\n\n5.4.1 Importing the spatial data\nIn this section, st_read() of sf package will be used to import these three geospatial data sets into R.\n\nchildcare_sf &lt;- st_read(\"../../data/geospatial/ChildCareServices.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `ChildCareServices' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf &lt;- st_read(dsn = \"../../data/geospatial\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"../../data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBefore we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.\n\nDIY: Using the appropriate sf function you learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.\n\nNotice that except childcare_sf, both mpsz_sf and sg_sf do not have proper crs information.\n\nDIY: Using the method you learned in Lesson 2, assign the correct crs to mpsz_sf and sg_sf simple feature data frames.\n\n\nDIY: If necessary, changing the referencing system to Singapore national projected coordinate system.\n\n\n\n5.4.2 Mapping the geospatial data sets\nAfter checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.\n\nDIY: Using the mapping methods you learned in Hands-on Exercise 3, prepare a map as shown below.\n\nNotice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\nAlternatively, we can also prepare a pin map by using the code chunk below.\n\ntmap_mode('view')\n\n\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\nNotice that at the interactive mode, tmap is using leaflet for R API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\n\nReminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#second-order-spatial-point-patterns-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#second-order-spatial-point-patterns-analysis",
    "title": "Hands-on Exercise 7",
    "section": "5.6 Second-order Spatial Point Patterns Analysis",
    "text": "5.6 Second-order Spatial Point Patterns Analysis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#analysing-spatial-point-process-using-g-function",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#analysing-spatial-point-process-using-g-function",
    "title": "Hands-on Exercise 7",
    "section": "5.7 Analysing Spatial Point Process Using G-Function",
    "text": "5.7 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using Gest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.7.1 Choa Chu Kang planning area\n\n5.7.1.1 Computing G-function estimation\nThe code chunk below is used to compute G-function using Gest() of spatat package.\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\n5.7.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-fucntion\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\n\n\n\n5.7.2 Tampines planning area\n\n5.7.2.1 Computing G-function estimation\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n\n\n\n\n5.7.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#analysing-spatial-point-process-using-f-function",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#analysing-spatial-point-process-using-f-function",
    "title": "Hands-on Exercise 7",
    "section": "5.8 Analysing Spatial Point Process Using F-Function",
    "text": "5.8 Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using Fest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.8.1 Choa Chu Kang planning area\n\n5.8.1.1 Computing F-function estimation\nThe code chunk below is used to compute F-function using Fest() of spatat package.\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\n\n\n\n5.8.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-fucntion\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\n\n\n5.8.3 Tampines planning area\n\n5.8.3.1 Computing F-function estimation\nMonte Carlo test with F-fucntion\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\n\n\n5.8.3.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#analysing-spatial-point-process-using-k-function",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#analysing-spatial-point-process-using-k-function",
    "title": "Hands-on Exercise 7",
    "section": "5.9 Analysing Spatial Point Process Using K-Function",
    "text": "5.9 Analysing Spatial Point Process Using K-Function\nK-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using Kest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.9.1 Choa Chu Kang planning area\n\n5.9.1.1 Computing K-fucntion estimate\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n5.9.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n5.9.2 Tampines planning area\n\n5.9.2.1 Computing K-fucntion estimation\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n5.9.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#analysing-spatial-point-process-using-l-function",
    "href": "Hands-on_Ex/Hands-on_Ex-07/Hands-on_Ex07.html#analysing-spatial-point-process-using-l-function",
    "title": "Hands-on Exercise 7",
    "section": "5.10 Analysing Spatial Point Process Using L-Function",
    "text": "5.10 Analysing Spatial Point Process Using L-Function\nIn this section, you will learn how to compute L-function estimation by using Lest() of spatstat package. You will also learn how to perform monta carlo simulation test using envelope() of spatstat package.\n\n5.10.1 Choa Chu Kang planning area\n\n5.10.1.1 Computing L Fucntion estimation\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\n5.10.1.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\n\n\n\n5.10.2 Tampines planning area\n\n5.10.2.1 Computing L-fucntion estimate\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "By the end of this hands-on exercise, I will be able to:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\nQuestions I have before starting:\n\ncan these clustering tactics be integrated with existing pytorch unsupervised learning methods such as KMeans, etc?\nPytorch is known to speed up processes by maximising usage of existing CPUs, is it possible to take advantage of that in this clustering r package since it involves dealing with many small geographical points?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#overview",
    "title": "Hands-on Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "By the end of this hands-on exercise, I will be able to:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\nQuestions I have before starting:\n\ncan these clustering tactics be integrated with existing pytorch unsupervised learning methods such as KMeans, etc?\nPytorch is known to speed up processes by maximising usage of existing CPUs, is it possible to take advantage of that in this clustering r package since it involves dealing with many small geographical points?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#data-being-used",
    "href": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#data-being-used",
    "title": "Hands-on Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "Data being used",
    "text": "Data being used\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)Getting Started\nImporting the relevant packages:\nhttps://stackoverflow.com/questions/21833028/error-in-as-doubley-cannot-coerce-type-s4-to-vector-of-type-double\n\npacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally, arulesViz)\n\n\n12.4.1 Importing geospatial data into R environment\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\nRetrieved from: https://data.humdata.org/dataset/mimu-geonode-myanmar-township-boundaries-mimu?\n\nshan_sf &lt;- st_read(dsn = \"../../data/geospatial/week8\", \n                   layer = \"mmr_polbnda_adm3_250k_mimu_1\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week8' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.17 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE        DT   DT_PCODE        TS  TS_PCODE\n1   Shan (East)   MMR016  Monghsat MMR016D002  Monghsat MMR016006\n2   Shan (East)   MMR016  Monghsat MMR016D002   Mongton MMR016008\n3   Shan (East)   MMR016 Tachileik MMR016D003 Monghpyak MMR016010\n4   Shan (East)   MMR016 Tachileik MMR016D003 Mongyawng MMR016011\n5   Shan (East)   MMR016 Tachileik MMR016D003 Tachileik MMR016009\n6  Shan (North)   MMR015    Hopang MMR015D006    Hopang MMR015021\n7  Shan (North)   MMR015    Hopang MMR015D006   Mongmao MMR015008\n8  Shan (North)   MMR015    Lashio MMR015D001   Mongyai MMR015003\n9  Shan (North)   MMR015    Lashio MMR015D001   Tangyan MMR015004\n10 Shan (North)   MMR015    Matman MMR015D007    Matman MMR015024\n                         geometry\n1  MULTIPOLYGON (((99.17944 20...\n2  MULTIPOLYGON (((98.50567 20...\n3  MULTIPOLYGON (((100.0708 21...\n4  MULTIPOLYGON (((101.1053 21...\n5  MULTIPOLYGON (((100.3687 21...\n6  MULTIPOLYGON (((98.88008 23...\n7  MULTIPOLYGON (((98.94264 23...\n8  MULTIPOLYGON (((98.04246 22...\n9  MULTIPOLYGON (((98.27834 22...\n10 MULTIPOLYGON (((98.9057 22....\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"…\n$ ST_PCODE &lt;chr&gt; \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR015\", \"…\n$ DT       &lt;chr&gt; \"Monghsat\", \"Monghsat\", \"Tachileik\", \"Tachileik\", \"Tachileik\"…\n$ DT_PCODE &lt;chr&gt; \"MMR016D002\", \"MMR016D002\", \"MMR016D003\", \"MMR016D003\", \"MMR0…\n$ TS       &lt;chr&gt; \"Monghsat\", \"Mongton\", \"Monghpyak\", \"Mongyawng\", \"Tachileik\",…\n$ TS_PCODE &lt;chr&gt; \"MMR016006\", \"MMR016008\", \"MMR016010\", \"MMR016011\", \"MMR01600…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((99.17944 20..., MULTIPOLYGON (((…\n\n\n\n\n12.4.2 Importing aspatial data into R environment\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict &lt;- read_csv (\"../../data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\n\n12.4.3 Derive new variables using dplyr package\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "12.5 Exploratory Data Analysis (EDA)",
    "text": "12.5 Exploratory Data Analysis (EDA)\n\n12.5.1 EDA using statistical graphics\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n\n\n\n12.5.2 EDA using choropleth map\n\n12.5.2.1 Joining geospatial data with aspatial data\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"../../data/rds/week8/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\nshan_sf &lt;- read_rds(\"../../data/rds/week8/shan_sf.rds\")\n\n\n\n12.5.2.2 Preparing a choropleth map\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\") + tm_fill()\n\n\n\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nCan you identify the differences?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#correlation-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#correlation-analysis",
    "title": "Hands-on Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "12.6 Correlation Analysis",
    "text": "12.6 Correlation Analysis\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#hierarchy-cluster-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#hierarchy-cluster-analysis",
    "title": "Hands-on Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "12.7 Hierarchy Cluster Analysis",
    "text": "12.7 Hierarchy Cluster Analysis\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n12.7.1 Extracting clustering variables\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\n2    Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\n3  Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\n4  Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\n5  Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\n6     Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\n7    Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\n8    Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\n9    Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\n10    Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\nMongton     Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang       Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao     Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai     Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan     Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\nMatman       Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat  107.6749 460.1169  34.508769 189.51537   22.817273\nMongton   193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang    127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao   120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai   168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan   223.8632 453.2753  22.594047 105.23021   12.065335\nMatman    244.1230 219.4093   8.438819  45.20796    6.027728\n\n\n\n\n12.7.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n12.7.3 Min-Max standardisation\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n12.7.4 Z-score standardisation\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n12.7.5 Visualising the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n12.7.6 Computing proximity matrix\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n            Monghsat   Mongton Monghpyak Mongyawng Tachileik    Hopang\nMongton    150.98053                                                  \nMonghpyak  356.84917 258.04282                                        \nMongyawng  364.40429 375.22688 285.56475                              \nTachileik  677.09508 608.76740 444.04411 432.10118                    \nHopang     317.64824 273.50305 304.26577 290.51360 403.82035          \nMongmao    247.17708 206.57001 291.88846 296.40789 472.95568  78.29342\nMongyai    127.35225 159.79790 370.01575 445.78964 750.29555 408.73288\nTangyan    144.59626 198.88460 335.26416 377.52279 719.84066 412.22167\nMatman     313.59911 303.04574 470.46845 601.80824 890.12935 573.55355\nNarphan    278.21548 215.97925 448.40651 572.76394 760.29566 397.85908\nPangsang   256.37933 210.77938 315.11651 336.16703 481.31907  92.57672\nMabein     470.48135 425.16902 212.69450 193.49994 365.32538 368.55167\nMongmit    214.20854 192.67961 177.76325 214.21738 529.63213 281.05362\nKutkai     154.32012 107.06341 206.61627 281.03383 568.99109 263.31986\nMuse       663.76026 634.71074 539.43485 422.37358 221.19950 377.44407\nNamhkan    455.10875 414.53594 379.50202 321.21112 295.91660 146.18632\nManton     317.15603 310.20581 502.20840 629.43339 910.23039 577.52046\nNamhsan    169.56962 196.76188 352.70492 430.02019 754.03913 440.51555\nKengtung   383.72138 329.38387 221.47613 203.87199 295.90429 164.29921\nMongkhet   167.98445 223.22828 462.63265 522.91815 820.50164 451.51070\nMongla     429.00536 411.06668 408.03397 315.57550 347.33155 147.02444\nMongping   140.95392 119.86993 354.76537 455.59190 727.08969 379.27212\nMongyang   312.64797 295.60023 358.17599 304.21734 448.79027  69.25859\nPangwaun   343.53898 257.50434 381.95144 475.33116 540.60474 206.98364\nKonkyan    268.25060 248.25265 463.39594 522.38580 730.92980 348.18522\nLaukkaing  626.44910 604.66190 565.84279 454.80044 325.06329 331.67199\nHsipaw     121.78922  90.69766 237.67919 294.70967 576.18780 248.72536\nKyaukme    253.25370 229.28509 217.64419 181.55295 429.15493 154.91633\nNamtu      231.78673 308.71751 346.57799 262.24331 659.56458 408.24516\nNawnghkio  289.83220 225.81118  93.03711 220.61209 470.45533 279.84188\nHseni      331.22632 286.75945 200.26876 173.86004 354.90063 162.80878\nKunlong    202.31862 270.02165 357.44661 240.39800 595.70536 271.34451\nLashio     377.86793 347.11584 262.09281 172.70139 311.95286 170.63913\nPindaya    314.71506 283.35574 221.30579 332.92193 635.51774 443.26362\nYwangan    432.98028 361.23257 367.44835 570.56521 807.44220 596.19312\nLangkho    279.52329 236.70878 200.27496 186.11584 402.33622 134.24847\nMawkmai    275.09705 313.35220 536.71695 620.04321 919.38755 561.24281\nMongnai    125.25968 131.67061 253.26470 275.77546 563.95232 243.00945\nMongpan    283.30992 200.31803 187.85699 275.15989 411.03849 135.62913\nKunhing    165.38834 114.03609 250.74435 295.35984 532.26397 172.96164\nKyethi     190.50609 222.52947 328.16234 387.71518 728.87329 440.48114\nLaihka     158.93517 212.07320 293.22640 211.99976 549.08985 230.78652\nLoilen     118.65144 176.16001 296.99681 261.75211 573.75476 242.89326\nMonghsu    137.24737 107.04894 232.17823 312.85089 605.02113 301.84458\nMongkaing  375.60376 365.50032 568.21089 700.98284 967.14087 626.17673\nNansang    201.92690 199.58124 227.52638 191.11990 486.77266 196.47091\nHopong     100.45714 106.21031 267.95563 326.59925 632.45718 309.77356\nHsihseng   153.49551 194.64317 285.37627 309.51462 658.87060 370.01334\nPinlaung   160.44703 163.42143 222.20020 235.55497 555.01039 265.96924\nKalaw      317.96188 267.87522 167.08436 173.43078 373.64459 185.14704\nLawksawk   352.31496 311.07742 142.31691 179.07229 441.82621 321.16462\nNyaungshwe 286.37238 219.72196 103.97300 218.12104 445.81335 247.19891\nPekon      225.64279 208.14888 190.93173 248.43910 573.39528 336.38582\nTaunggyi   562.88102 508.40925 334.17439 287.73864 150.84117 329.95252\n             Mongmao   Mongyai   Tangyan    Matman   Narphan  Pangsang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai    335.61300                                                  \nTangyan    347.14183 109.08506                                        \nMatman     501.59903 186.95158 242.78233                              \nNarphan    331.42618 248.82845 348.84991 312.05193                    \nPangsang    57.60801 343.30638 364.76893 506.29940 316.30314          \nMabein     384.91867 516.40426 448.59948 637.53975 630.34312 418.54016\nMongmit    242.54541 256.72744 195.92520 401.25041 406.15714 272.67383\nKutkai     204.69232 188.94166 166.61820 340.86349 314.27683 228.33583\nMuse       451.82530 763.91399 736.93741 929.11283 770.40234 460.24292\nNamhkan    223.32205 550.62819 542.64078 715.42102 536.85519 231.38484\nManton     503.79786 195.59882 271.82672  59.52318 280.26395 504.75214\nNamhsan    371.71448  77.35900  63.67613 180.09747 316.54695 385.65526\nKengtung   207.58055 460.39706 429.95076 613.01033 505.40025 229.85484\nMongkhet   375.35820 104.98924 201.49393 203.02855 217.28718 375.58139\nMongla     216.24705 535.28615 526.80849 708.17595 531.46949 217.88123\nMongping   305.57166  65.38727 161.67411 201.65224 188.64567 308.33123\nMongyang    91.06281 414.31237 421.06366 585.61776 401.39475 108.37735\nPangwaun   187.40057 394.07696 447.05580 523.43600 264.64997 157.48757\nKonkyan    281.87425 287.87384 367.46064 392.40306 158.82353 274.81900\nLaukkaing  404.00848 732.68347 722.40954 903.72094 708.82887 408.04016\nHsipaw     185.99483 177.33790 167.69794 344.45451 295.40170 205.04337\nKyaukme    146.09228 339.27780 306.78359 505.52285 420.30003 175.35273\nNamtu      365.03882 278.02761 178.69483 416.65397 494.36143 392.97391\nNawnghkio  257.76465 319.57938 269.07880 444.05061 435.59661 287.10769\nHseni      184.67099 408.23212 373.07575 564.64051 474.12297 214.66375\nKunlong    224.43391 299.36066 268.07983 468.27436 413.07823 258.49342\nLashio     214.23677 466.36472 429.84475 628.11049 525.63854 236.72516\nPindaya    402.21719 287.41816 208.43740 354.39039 474.50209 428.24958\nYwangan    542.85957 333.12853 324.77002 255.22031 452.95769 556.82263\nLangkho    134.50170 358.95672 332.02048 518.86151 420.65204 167.65920\nMawkmai    485.52853 178.70499 262.66006 147.83545 273.75350 484.14757\nMongnai    188.29603 203.23607 180.37471 376.33870 329.31700 204.25746\nMongpan    131.59966 346.39710 340.39128 494.81014 371.13393 140.23910\nKunhing    103.91040 238.99570 249.74161 403.66587 281.62645 123.18870\nKyethi     377.89657 137.79420  47.79331 233.83079 374.90376 396.89963\nLaihka     185.99082 264.13364 224.29176 443.25453 392.32592 214.19291\nLoilen     190.26490 224.79239 196.60826 406.56282 354.79137 207.94433\nMonghsu    242.43599 154.86049 127.42203 308.13805 311.92379 260.52971\nMongkaing  552.31959 262.84016 348.56123 135.51424 285.65085 548.40662\nNansang    164.99494 288.55962 249.70235 458.06573 398.13308 193.36162\nHopong     244.16253 124.62791 106.82328 291.84351 294.40441 261.51075\nHsihseng   311.98001 162.27126  70.27241 304.02806 377.52977 335.52974\nPinlaung   217.58854 220.56339 169.50567 382.40610 371.26895 244.47146\nKalaw      195.18913 386.74701 348.06617 537.63884 463.53759 224.03998\nLawksawk   314.64777 391.26989 323.14701 515.39711 523.69580 345.91486\nNyaungshwe 230.45003 327.13541 284.14692 460.91883 427.94086 257.77823\nPekon      293.70625 242.52301 167.79937 368.25761 416.84901 321.81214\nTaunggyi   387.33906 635.94105 592.65262 778.45810 684.20905 405.59730\n              Mabein   Mongmit    Kutkai      Muse   Namhkan    Manton\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit    263.37099                                                  \nKutkai     340.55064  97.61092                                        \nMuse       453.27410 563.01629 592.90743                              \nNamhkan    379.56035 386.02794 392.48568 238.67060                    \nManton     674.01120 430.64070 361.82684 941.49778 721.86149          \nNamhsan    488.33873 237.78494 191.32762 778.52971 576.42717 210.48485\nKengtung   219.47071 246.45691 279.19573 330.08211 175.63015 631.99123\nMongkhet   610.30557 349.45980 273.91673 816.44931 596.19944 181.33894\nMongla     406.09124 384.30076 388.40984 256.80556  77.21355 712.51416\nMongping   518.16310 265.12574 182.75266 744.44948 523.74815 200.48082\nMongyang   411.88352 309.51302 285.33223 389.59919 167.72448 585.70558\nPangwaun   523.44632 381.51246 321.80465 541.97887 310.44067 510.79265\nKonkyan    613.51206 403.39082 310.60810 704.86973 481.59596 366.66876\nLaukkaing  520.67373 568.27732 580.38112 149.26996 196.46063 907.38406\nHsipaw     366.42787 118.18050  51.46282 591.03355 382.79302 359.60008\nKyaukme    264.88283 144.02475 170.93318 434.75768 247.81990 522.86003\nNamtu      366.16094 179.62251 225.28268 659.16927 506.32466 448.58230\nNawnghkio  204.63154  89.07103 147.44053 533.68806 367.33575 475.77296\nHseni      213.61240 189.37188 229.37894 381.30567 212.11323 584.63341\nKunlong    396.61508 224.12169 204.54010 547.24297 375.73885 479.76855\nLashio     231.28227 251.29457 289.82513 313.15288 173.27153 646.66493\nPindaya    313.45776 171.86828 212.81775 704.11252 543.81859 402.42888\nYwangan    529.14689 381.88259 360.11861 899.44137 714.43173 306.16379\nLangkho    253.84371 164.26299 180.51419 413.64173 224.40029 535.95620\nMawkmai    693.24602 434.92968 364.95519 926.93007 706.47792 109.08779\nMongnai    358.86053 115.86190  91.15307 571.97975 370.05669 391.54062\nMongpan    301.52942 193.32063 185.18173 447.49969 240.34131 507.96808\nKunhing    375.82140 173.50424 108.84990 533.00162 314.92119 410.49230\nKyethi     442.07679 202.92551 184.23422 757.16745 567.86202 272.03299\nLaihka     345.00222 141.87227 144.67198 526.65211 342.43665 458.30232\nLoilen     375.06406 145.48666 131.56529 560.43400 364.90647 419.06087\nMonghsu    367.19820 109.15790  62.60859 633.21624 431.32637 330.76503\nMongkaing  747.17454 503.61965 428.96133 995.66496 771.39688  81.75337\nNansang    287.92364 104.91839 130.04549 489.35308 302.89487 476.55544\nHopong     398.00917 136.93111  73.45899 648.68011 444.13246 310.58885\nHsihseng   381.20187 131.49728 128.21054 677.66886 492.09476 334.87758\nPinlaung   312.66966  57.46286  78.07733 571.58335 382.78835 405.83081\nKalaw      198.14085 160.05997 204.93018 412.46033 246.39577 560.16577\nLawksawk   130.36525 140.11550 224.64646 510.13288 379.41126 551.13000\nNyaungshwe 210.21337  99.38590 152.15482 505.88581 333.32428 488.79874\nPekon      282.26877  59.61977 114.98048 614.56144 442.77120 403.82131\nTaunggyi   226.24011 399.84278 450.33382 250.81471 257.29147 803.08034\n             Namhsan  Kengtung  Mongkhet    Mongla  Mongping  Mongyang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung   466.20497                                                  \nMongkhet   170.90848 531.35998                                        \nMongla     564.02740 202.45004 574.40292                              \nMongping   130.23777 442.80821 113.80917 512.61580                    \nMongyang   450.97869 217.08047 445.40621 146.66661 387.80686          \nPangwaun   448.58030 337.48335 407.02947 319.18643 340.37881 225.25026\nKonkyan    352.20115 474.82621 254.24424 468.09747 242.02901 329.39338\nLaukkaing  760.45960 351.48520 769.06406 202.55831 708.13447 326.19219\nHsipaw     194.47928 284.08582 253.80950 373.47509 168.92101 267.10497\nKyaukme    347.85944 136.23356 409.03553 241.58966 330.28984 188.59489\nNamtu      240.95555 385.33554 355.99713 483.49434 321.66441 413.26052\nNawnghkio  299.74967 208.29647 414.10280 381.40808 316.14719 323.32123\nHseni      411.96125  66.12817 481.88406 226.82048 395.58453 210.19929\nKunlong    310.40560 317.14187 341.68641 346.46200 309.05385 247.22785\nLashio     472.04024  59.85893 534.44463 179.95877 454.52548 209.33700\nPindaya    228.41073 385.68322 391.74783 549.42389 310.64850 475.93982\nYwangan    286.16305 573.23173 408.97731 728.16301 337.94020 630.71590\nLangkho    368.20978 107.16213 428.08061 229.01675 343.96455 175.35413\nMawkmai    215.19289 632.54638 115.58388 686.88950 194.31049 558.83162\nMongnai    218.10003 272.28711 275.76855 354.10985 202.99615 260.39387\nMongpan    364.77086 142.21554 412.17123 253.20001 318.47482 194.93467\nKunhing    270.79121 245.95083 292.49814 306.47566 212.59619 188.89405\nKyethi      68.67929 444.26274 233.25039 556.02500 187.43974 453.86726\nLaihka     273.79672 258.23950 324.97428 315.93218 272.82761 229.71502\nLoilen     242.15271 282.22935 284.76895 338.67408 231.99959 246.76592\nMonghsu    153.22576 316.91914 247.73318 424.51868 158.90478 323.95988\nMongkaing  288.66231 692.74693 222.60577 761.48327 257.18572 631.91325\nNansang    294.16284 193.67980 360.99219 289.45119 287.36626 218.49285\nHopong     132.70541 340.47382 212.99485 432.31105 134.00139 323.35704\nHsihseng   125.74240 370.72441 256.70338 478.66210 199.64389 382.59743\nPinlaung   214.33352 263.48638 305.86058 372.59678 229.75261 286.03834\nKalaw      385.88676  88.29335 465.52013 260.26411 375.64739 233.56349\nLawksawk   362.84062 209.38215 487.41102 393.18472 396.47081 363.37684\nNyaungshwe 315.91750 177.75714 417.08639 347.60273 319.32583 294.29500\nPekon      207.16559 297.67761 342.08722 441.20998 259.68288 363.58788\nTaunggyi   631.49232 186.28225 712.80752 297.09863 621.53039 374.58247\n            Pangwaun   Konkyan Laukkaing    Hsipaw   Kyaukme     Namtu\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan    263.97576                                                  \nLaukkaing  470.63605 635.92043                                        \nHsipaw     298.12447 296.74316 569.06099                              \nKyaukme    308.31407 393.79911 428.74978 163.95741                    \nNamtu      517.03554 478.37690 664.06286 229.44658 270.87277          \nNawnghkio  381.67478 439.34272 552.65554 176.09570 157.04230 257.52713\nHseni      330.70182 448.84563 391.74585 231.48538  81.20593 327.41448\nKunlong    392.45403 329.11433 521.88657 205.10051 215.63037 233.60474\nLashio     362.45608 485.51312 334.65738 290.86435 129.95255 365.88437\nPindaya    512.13162 500.86933 726.85355 245.98884 311.01487 225.40822\nYwangan    580.13146 528.12533 908.82520 388.63147 505.89191 444.66868\nLangkho    295.38434 386.95022 410.41270 183.05109  51.67279 305.03473\nMawkmai    500.68857 339.01411 882.51110 351.34601 512.02846 427.95451\nMongnai    312.13429 328.82831 551.56800  52.68195 142.45669 209.35473\nMongpan    232.52209 365.87588 435.58047 179.52054 110.37831 352.91394\nKunhing    229.09986 253.74202 500.41640  90.77517 145.00266 296.43996\nKyethi     476.62610 400.10989 749.99415 195.17677 328.14177 186.90932\nLaihka     351.78203 351.75354 507.39700 128.42987 128.24979 185.86794\nLoilen     331.69981 334.19820 535.57527  98.04789 146.92675 194.24075\nMonghsu    343.38498 331.72187 619.01766  58.55724 200.77712 209.64684\nMongkaing  536.95736 380.92091 954.11795 423.77868 586.05094 525.04057\nNansang    326.12960 374.70456 480.60074 120.24428  60.32773 217.61884\nHopong     346.00673 304.49287 628.48557  62.86179 218.84211 206.82668\nHsihseng   433.06326 383.49700 670.74564 136.54610 250.27059 131.89940\nPinlaung   356.37963 365.44693 563.81750  76.55260 139.67966 170.04533\nKalaw      338.35194 444.75859 427.77791 212.36711  79.42225 307.27427\nLawksawk   453.02765 520.31264 548.83928 249.35081 186.29066 260.95300\nNyaungshwe 352.92324 432.35040 520.24345 169.92664 126.50414 271.41464\nPekon      423.81347 421.48797 624.82399 145.37542 202.12206 165.02707\nTaunggyi   497.61245 650.56905 345.98041 462.31183 312.60547 518.72748\n           Nawnghkio     Hseni   Kunlong    Lashio   Pindaya   Ywangan\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni      164.05304                                                  \nKunlong    285.04608 276.19175                                        \nLashio     230.55346  79.41836 295.23103                              \nPindaya    180.64047 337.98982 355.47066 398.98167                    \nYwangan    377.87702 534.44679 531.63089 602.17475 257.31610          \nLangkho    156.51662  66.66133 224.52741 115.18145 323.28133 507.78892\nMawkmai    495.15047 582.53670 446.53763 638.60773 437.99577 397.03752\nMongnai    182.21245 216.81639 202.92529 270.86983 258.49346 422.71934\nMongpan    172.84425 120.66550 288.03320 172.33279 335.72896 483.68125\nKunhing    206.15773 206.47448 193.77551 255.10832 318.23811 449.67218\nKyethi     267.21607 388.33498 298.55859 447.10266 175.54012 287.29358\nLaihka     211.88187 204.49010 122.68682 238.64533 298.61288 491.83321\nLoilen     219.26405 227.10984 166.53599 268.92310 293.61143 469.51621\nMonghsu    170.09168 262.28462 239.89665 325.71557 198.35391 340.42789\nMongkaing  546.69447 648.04408 539.91284 708.65819 481.71125 364.98429\nNansang    151.13185 136.45492 183.01388 184.47950 275.44246 472.77637\nHopong     204.88286 286.41193 219.06817 345.31042 223.06050 352.85844\nHsihseng   209.88026 312.74375 231.85967 369.00833 172.00796 342.91035\nPinlaung   139.27495 204.47572 194.76257 262.51735 208.63519 400.05492\nKalaw      127.74787  38.52842 273.01375 106.69059 302.51785 499.53297\nLawksawk    90.82891 171.50398 318.30406 220.75270 204.32952 432.16535\nNyaungshwe  43.26545 130.86310 285.13095 201.58191 216.52463 407.11649\nPekon      113.15370 243.98001 249.36301 303.80011 117.91580 336.50410\nTaunggyi   344.79200 238.19389 471.29032 195.14541 503.75471 697.98323\n             Langkho   Mawkmai   Mongnai   Mongpan   Kunhing    Kyethi\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai    531.08019                                                  \nMongnai    174.67678 374.50873                                        \nMongpan     94.98486 509.99632 178.09554                              \nKunhing    146.38284 398.43973 110.55197 137.85278                    \nKyethi     350.91512 278.85535 210.50453 358.89620 278.95182          \nLaihka     160.94435 429.96554 100.53457 210.76951 142.03682 255.83275\nLoilen     184.10672 388.73386  58.41263 207.25000 130.39336 232.32965\nMonghsu    221.84918 332.07962  84.11238 216.25326 146.78891 146.61572\nMongkaing  597.42714 133.29995 456.00842 563.56780 465.03971 352.06533\nNansang     99.39859 462.41938  92.79567 144.77393 128.20940 273.02385\nHopong     239.63685 302.84362  91.53795 239.43845 145.15617 136.49038\nHsihseng   276.27441 329.29477 142.36728 295.87811 220.15490  84.04049\nPinlaung   168.44228 398.11227  64.52387 192.78316 141.58836 189.47065\nKalaw       67.19580 562.59200 200.34668 114.69105 197.63683 360.17247\nLawksawk   190.30257 567.52693 241.71260 228.54223 278.68953 317.74604\nNyaungshwe 128.26577 502.99026 169.63695 137.29734 189.97131 288.06872\nPekon      219.21623 416.00669 151.60031 243.30037 213.46379 162.43575\nTaunggyi   288.27478 810.74692 448.55282 319.81385 429.98509 599.57407\n              Laihka    Loilen   Monghsu Mongkaing   Nansang    Hopong\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai                                                               \nMongnai                                                               \nMongpan                                                               \nKunhing                                                               \nKyethi                                                                \nLaihka                                                                \nLoilen      59.69478                                                  \nMonghsu    163.28926 131.55208                                        \nMongkaing  522.96309 482.18190 400.71816                              \nNansang     78.78999  94.23028 153.59962 542.16609                    \nHopong     157.48857 124.74445  43.40665 379.37916 167.66291          \nHsihseng   175.89761 158.84853  97.82470 411.59788 193.53779  91.65458\nPinlaung   101.10150  91.56527  80.86834 476.29056  85.49572  98.14855\nKalaw      197.34633 217.19877 237.34578 625.24500 124.30500 264.16294\nLawksawk   246.74469 265.29318 242.04063 625.18712 188.78869 274.91604\nNyaungshwe 201.71653 206.40432 173.82799 557.32112 131.18943 209.32532\nPekon      182.23667 181.94596 113.84636 480.23965 160.37607 138.86577\nTaunggyi   425.36916 455.91617 486.91951 866.21117 365.04897 513.76415\n            Hsihseng  Pinlaung     Kalaw  Lawksawk Nyaungshwe     Pekon\nMongton                                                                \nMonghpyak                                                              \nMongyawng                                                              \nTachileik                                                              \nHopang                                                                 \nMongmao                                                                \nMongyai                                                                \nTangyan                                                                \nMatman                                                                 \nNarphan                                                                \nPangsang                                                               \nMabein                                                                 \nMongmit                                                                \nKutkai                                                                 \nMuse                                                                   \nNamhkan                                                                \nManton                                                                 \nNamhsan                                                                \nKengtung                                                               \nMongkhet                                                               \nMongla                                                                 \nMongping                                                               \nMongyang                                                               \nPangwaun                                                               \nKonkyan                                                                \nLaukkaing                                                              \nHsipaw                                                                 \nKyaukme                                                                \nNamtu                                                                  \nNawnghkio                                                              \nHseni                                                                  \nKunlong                                                                \nLashio                                                                 \nPindaya                                                                \nYwangan                                                                \nLangkho                                                                \nMawkmai                                                                \nMongnai                                                                \nMongpan                                                                \nKunhing                                                                \nKyethi                                                                 \nLaihka                                                                 \nLoilen                                                                 \nMonghsu                                                                \nMongkaing                                                              \nNansang                                                                \nHopong                                                                 \nHsihseng                                                               \nPinlaung   111.61846                                                   \nKalaw      287.11074 181.96406                                         \nLawksawk   257.11202 192.57320 140.01101                               \nNyaungshwe 225.80242 138.12050  95.66782 104.17830                     \nPekon      105.30573  94.61225 211.91531 157.51129  139.31874          \nTaunggyi   528.14240 429.54386 252.26066 304.96838  325.09619 440.66133\n\n\n\n\n12.7.7 Computing hierarchical clustering\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n12.7.8 Selecting the optimal clustering algorithm\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n12.7.9 Determining Optimal Clusters\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n12.7.9.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\nPERSONAL OBSERVATION: SAME AS KMEANS Clustering –&gt; elbow method. Most important overarching concept concept: Bias variance tradeoff!\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n12.7.10 Interpreting the dendrograms\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\nPERSONAL NOTE: Same as a migration patterns study I found online previously! Used to find which point in TIME different races from other countries mixed with racial groups in India such as the Iranian farmers.\n\n\n12.7.11 Visually-driven hierarchical clustering analysis\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n12.7.11.1 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n12.7.11.2 Plotting interactive cluster heatmap using heatmaply()\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\nRADIO_PRTV_PRLLPHONE_PRMPHONE_PRCOMPUTER_PRNarphanPangwaunMongpanNansangKyaukmeKalawHseniLangkhoKunhingLaihkaMonghsatLoilenMongnaiMongtonHsipawHopongMonghsuPinlaungMongmitPekonKutkaiNamtuHsihsengKyethiTangyanNamhsanMongyaiMongpingMongkhetMawkmaiMongkaingMantonMatmanYwanganPindayaLawksawkNyaungshweNawnghkioMonghpyakMabeinMongyawngKunlongKonkyanMongyangMongmaoHopangNamhkanLaukkaingMonglaPangsangKengtungLashioTaunggyiTachileikMuse\n0.000.250.500.751.00Geographic Segmentation of Shan State by ICT indicatorsICT IndicatorsTownships of Shan State\n\n\n\n12.7.12 Mapping the clusters formed\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#spatially-constrained-clustering-skater-approach",
    "href": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#spatially-constrained-clustering-skater-approach",
    "title": "Hands-on Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "12.8 Spatially Constrained Clustering: SKATER approach",
    "text": "12.8 Spatially Constrained Clustering: SKATER approach\nIn this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n12.8.1 Converting into SpatialPolygonsDataFrame\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n12.8.2 Computing Neighbour List\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\n#plot(shan_sp, \n#     border=grey(.5))\n#plot(shan.nb, \n#     coordinates(shan_sp), \n#     col=\"blue\", \n#     add=TRUE)\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n12.8.3 Computing minimum spanning tree\n\n12.8.3.1 Calculating edge costs\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn      S0       S1        S2\nB 55 3025 76338.3 58090482 524376272\n\n\n\n\n\n12.8.4 Computing minimum spanning tree\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   50  94.61225\n[2,]   50   53 138.12050\n[3,]   53   51  95.66782\n[4,]   51   52 140.01101\n[5,]   52   31  90.82891\n[6,]   31   29 157.04230\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\n#plot(shan_sp, border=gray(.5))\n#plot.mst(shan.mst, \n#         coordinates(shan_sp), \n#         col=\"blue\", \n#         cex.lab=0.7, \n#         cex.circles=0.005, \n#        add=TRUE)\n\n\n\n12.8.5 Computing spatially constrained clusters using SKATER method\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 2 2 2 2 2 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 35 51 52 14 50 54 53 31 29 55 ...\n  .. ..$ edge: num [1:10, 1:3] 51 14 52 50 54 53 51 31 29 52 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 25 7 4 22 17 15 6 24 20 12 ...\n  .. ..$ edge: num [1:17, 1:3] 4 15 17 22 6 24 15 20 7 15 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 39 42 9 19 8 45 49 23 2 28 ...\n  .. ..$ edge: num [1:21, 1:3] 42 19 9 49 23 8 2 45 28 39 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 37 40\n  .. ..$ edge: num [1, 1:3] 37 40 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 11\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 36\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 2 2 2 2 2 3 3 3 5 2 1 1 2 2 2 3 3 2 3 2 3 2 2 2 2 3 1 3 1 2 2 2 1 6 4 3\n[39] 3 4 3 3 3 3 3 3 3 3 3 1 1 1 1 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n11 18 22  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\n#plot(shan_sp, border=gray(.5))\n#plot(clust6, \n#     coordinates(shan_sp), \n#     cex.lab=.7,\n#     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n#     cex.circles=0.005, \n#     add=TRUE)\n\n\n\n12.8.6 Visualising the clusters in choropleth map\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Hands-on Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "12.9 Spatially Constrained Clustering: ClustGeo Method",
    "text": "12.9 Spatially Constrained Clustering: ClustGeo Method\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n12.9.1 A short note about ClustGeo package\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n12.9.2 Ward-like hierarchical clustering: ClustGeo\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n12.9.2.1 Mapping the clusters formed\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n12.9.3 Spatially Constrained Hierarchical Clustering\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster objecct.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nWe can now plot the map of the newly delineated spatially constrained clusters."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#visual-interpretation-of-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex-08/Hands-on_Ex08.html#visual-interpretation-of-clusters",
    "title": "Hands-on Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "12.10 Visual Interpretation of Clusters",
    "text": "12.10 Visual Interpretation of Clusters\n\n12.10.1 Visualising individual clustering variable\nCode chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\n12.10.2 Multivariate Visualisation\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               237.        402.            23.9           134.\n2 2               221.        521.            44.2           246.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5                98.6       499.            74.5           468.\n6 6               124.        224.            38.0           132.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;\n\n\nPersonal reflection:\nThis exercise was enlightening in finding out ways to visualise how the clustering algorithms find split points to split the clusters and allows data scientists to understand the decision points, such as certain behaviours of that group, that led to a machine learning model to split the data for that cluster. The dendogram was especially useful for understanding these. This was especially enlightening when i found other real world applications such as Tracking Viruses through Phylogenetic Trees (https://towardsdatascience.com/hierarchical-clustering-and-its-applications-41c1ad4441a6). However, certain plotting libraries used here such as arulesViz are very outdated and kept throwing errors during the rendering process such as . It could be because not enough developers are continously updating the project to keep it backward compatible with newest technologies such as the macbook pro and latest windows os systems. Thus, more updated interactive plotting libraries R that have more developers working on them continously can be used instead.\n\n\nReferences\n\nhttps://r4gdsa.netlify.app/chap09.html\nhttps://r4gdsa.netlify.app/chap10.html\nFile Management:\n\nhttps://www.geeksforgeeks.org/file-handling-in-r-programming/"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-gi",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-gi",
    "title": "Take Home Exercise 2",
    "section": "Computing Gi*",
    "text": "Computing Gi*\nLets get the neighbors and inverse distance weights around the region. Note that the region itself will be included as a neighbor:\n\ndengue_nb &lt;- bos %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\nhead(dengue_nb)\n\nSimple feature collection with 6 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0936 ymin: 22.9156 xmax: 120.2585 ymax: 23.08827\nGeodetic CRS:  TWD97\n         VILLTOWN epiweek total_count                       geometry\n3   青草里 安南區      31           0 POLYGON ((120.1176 23.08387...\n21  保安里 仁德區      31           1 POLYGON ((120.2304 22.93544...\n56  赤嵌里 中西區      31           0 POLYGON ((120.2012 22.99966...\n72    大成里 南區      31           0 POLYGON ((120.1985 22.98147...\n82  城北里 安南區      31           0 POLYGON ((120.1292 23.06512...\n108 城南里 安南區      31           0 POLYGON ((120.1246 23.06904...\n                                         nb\n3                            1, 6, 118, 160\n21               2, 126, 128, 138, 168, 222\n56  3, 68, 69, 172, 181, 184, 185, 188, 200\n72            4, 94, 97, 100, 104, 182, 207\n82                      5, 12, 13, 249, 255\n108        1, 6, 12, 13, 118, 160, 165, 249\n                                                                                                   wt\n3                                                          0.0000000, 0.3730707, 0.5166453, 0.3002859\n21                                   0.0000000, 0.3310971, 0.4857231, 0.3966444, 0.7717933, 0.8772257\n56  0.0000000, 1.2234810, 1.5459306, 1.9097265, 0.9553393, 1.1311669, 1.3578115, 2.7653647, 1.7002092\n72                               0.000000, 1.286031, 2.993138, 1.862438, 2.166602, 1.013777, 1.011906\n82                                              0.0000000, 1.4041477, 1.1310013, 0.6159622, 0.4135746\n108            0.3730707, 0.0000000, 0.7009117, 0.4433391, 0.3101907, 0.3335912, 0.4017934, 0.3828707\n\n\nIf we look at the neighbors of 1 and its neighbors, we see that they all exist in their respective nb column which stands for neighbors and includes itself:\n\ncat(\"neighbors of region 1: \")\n\nneighbors of region 1: \n\nprint( dengue_nb[1, ]$nb)\n\n[[1]]\n[1]   1   6 118 160\n\ncat(\"neighbors of region 6: \")\n\nneighbors of region 6: \n\nprint( dengue_nb[6, ]$nb)\n\n[[1]]\n[1]   1   6  12  13 118 160 165 249\n\ncat(\"neighbors of region 118: \")\n\nneighbors of region 118: \n\nprint( dengue_nb[118, ]$nb)\n\n[[1]]\n[1]   1   6  13  14 118\n\ncat(\"neighbors of region 160: \")\n\nneighbors of region 160: \n\nprint( dengue_nb[160, ]$nb)\n\n[[1]]\n[1]   1   6 160 165\n\n\n\n#gi_stars &lt;- dengue_nb %&gt;% \n#  group_by(epiweek) %&gt;% \n#  mutate(gi_star = local_gstar_perm(\n#    total_count, nb, wt)) %&gt;% \n#  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#performing-emerging-hotspot-analysis",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#performing-emerging-hotspot-analysis",
    "title": "Take Home Exercise 2",
    "section": "Performing Emerging Hotspot Analysis",
    "text": "Performing Emerging Hotspot Analysis\nLets use the spacetime cube generated to find out trends of how the dengue is spreading. This information can be useful for policy makers in taiwan to set up more posters and awareness campaigns to get people in more vulnerable regions to take action to not only reduce dengue onset after it has happened but also encourage them to take preventive measures so it never happens to them as well.\n\nehsa = emerging_hotspot_analysis(bos, \"total_count\", threshold = 0.05)\n\nLets look at the distribution of each of these classifications:\n\ntable(ehsa$classification)\n\n\nconsecutive coldspot  consecutive hotspot  diminishing hotspot \n                   2                    1                    1 \n no pattern detected  oscilating coldspot   oscilating hotspot \n                   1                   49                  130 \n persistent coldspot    sporadic coldspot     sporadic hotspot \n                  12                   25                   37 \n\n\nInterestingly, there are 2 regions with no patterns detected. More data may need to be collected by Taiwan policy makers for these regions for them to better understand the situation and take the appropriate action. These are the two regions:\n\nehsa[ehsa$classification == \"no pattern detected\", ]\n\n\nVisualising the distribution of EHSA classes\n\n#ggplot(data = ehsa, aes(x = classification)) + geom_bar()\n\ng &lt;- ggplot(ehsa, aes(x = classification))  \np &lt;-  g + geom_bar() + ggtitle(\"Classifications\") +  xlab(\"Type of Emerging Hotspot\") + ylab(\"Count\")\n\nggplotly(p) \n\nLets view the charts here clearly:\n\n\n\ntaiwan_sf_filtered\n\nSimple feature collection with 258 features and 11 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0627 ymin: 22.89401 xmax: 120.2925 ymax: 23.09144\nGeodetic CRS:  TWD97\nFirst 10 features:\n      VILLCODE COUNTYNAME TOWNNAME VILLNAME       VILLENG COUNTYID COUNTYCODE\n1  67000350032     臺南市   安南區   青草里  Qingcao Vil.        D      67000\n2  67000270011     臺南市   仁德區   保安里   Bao'an Vil.        D      67000\n3  67000370005     臺南市   中西區   赤嵌里  Chihkan Vil.        D      67000\n4  67000330004     臺南市     南區   大成里  Dacheng Vil.        D      67000\n5  67000350028     臺南市   安南區   城北里 Chengbei Vil.        D      67000\n6  67000350030     臺南市   安南區   城南里 Chengnan Vil.        D      67000\n7  67000370009     臺南市   中西區   法華里    Fahua Vil.        D      67000\n8  67000350017     臺南市   安南區   海南里   Hainan Vil.        D      67000\n9  67000350049     臺南市   安南區   國安里   Guo'an Vil.        D      67000\n10 67000350018     臺南市   安南區   溪心里    Xixin Vil.        D      67000\n   TOWNID TOWNCODE NOTE                       geometry      VILLTOWN\n1     D06 67000350 &lt;NA&gt; POLYGON ((120.1176 23.08387... 青草里 安南區\n2     D32 67000270 &lt;NA&gt; POLYGON ((120.2304 22.93544... 保安里 仁德區\n3     D08 67000370 &lt;NA&gt; POLYGON ((120.2012 22.99966... 赤嵌里 中西區\n4     D02 67000330 &lt;NA&gt; POLYGON ((120.1985 22.98147...   大成里 南區\n5     D06 67000350 &lt;NA&gt; POLYGON ((120.1292 23.06512... 城北里 安南區\n6     D06 67000350 &lt;NA&gt; POLYGON ((120.1246 23.06904... 城南里 安南區\n7     D08 67000370 &lt;NA&gt; POLYGON ((120.2094 22.98452... 法華里 中西區\n8     D06 67000350 &lt;NA&gt; POLYGON ((120.175 23.02218,... 海南里 安南區\n9     D06 67000350 &lt;NA&gt; POLYGON ((120.1866 23.02766... 國安里 安南區\n10    D06 67000350 &lt;NA&gt; POLYGON ((120.1834 23.06086... 溪心里 安南區\n\n\n\n\nVisualising EHSA\nNow, we can add the polygons data from taiwan_sf_filtered to the ehsa analysis and visualise the different types of clusters spatially.\n\ntaiwan_ehsa &lt;- taiwan_sf_filtered %&gt;%\n  left_join(ehsa , by = join_by(VILLTOWN == location))\n\nLets plots the map:\n\nehsa_sig &lt;- taiwan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(taiwan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\n\nThe most common type of hotspot is oscillating hotspot (indicated by the red regions), which indicates most of the regions were experiencing cold spots before they suddenly became infected with dengue. This indicates there were less persistent hotspots and the reason for this could be lack of awareness and actions taken to prevent dengue resulting in the people in that region only taking action once they have started experiencing dengue. Thus, the appearance of dengue seems “sudden” and classifies this region as oscillating hotspot. Surprisingly there are no persistent hotspots which indicates that all affected regions quickly took actions to reduce the dengue rate and thus allows them to not be statistically significant hot spot for 90 percent of the time-step intervals. This is a good sign about the level of awareness for users who have already been infected."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#reflections",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#reflections",
    "title": "Take Home Exercise 2",
    "section": "Reflections",
    "text": "Reflections\nThis study has been inspiring since it makes you think about spatiotemporal relationships on a deep level for identifying patterns over time. This is definitely beneficial for me in the future given that there are few tools that allow use to analyse spatiotemporal relationships much less visualise them. These spatiotemporal cubes can possibly be used in future applications such as 3D VR applications for non technical policy makers from other industries see these trends better. Specifically it shows how important it is for policy makers in charge of controlling the spread of these viruses through campaigns. These analysis will allow them to accurately find which regions to target first and invest more to curb the spread more effectively."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-gi-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-gi-1",
    "title": "Take Home Exercise 2",
    "section": "Computing Gi*",
    "text": "Computing Gi*\nisolating only one week :\n\ndengue_nb_week31 = filter(dengue_nb, dengue_nb$epiweek == 31)\nhead(dengue_nb_week31)\n\nSimple feature collection with 6 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0936 ymin: 22.9156 xmax: 120.2585 ymax: 23.08827\nGeodetic CRS:  TWD97\n       VILLTOWN epiweek total_count                       geometry\n1 青草里 安南區      31           0 POLYGON ((120.1176 23.08387...\n2 保安里 仁德區      31           1 POLYGON ((120.2304 22.93544...\n3 赤嵌里 中西區      31           0 POLYGON ((120.2012 22.99966...\n4   大成里 南區      31           0 POLYGON ((120.1985 22.98147...\n5 城北里 安南區      31           0 POLYGON ((120.1292 23.06512...\n6 城南里 安南區      31           0 POLYGON ((120.1246 23.06904...\n                                       nb\n1                          1, 6, 118, 160\n2              2, 126, 128, 138, 168, 222\n3 3, 68, 69, 172, 181, 184, 185, 188, 200\n4           4, 94, 97, 100, 104, 182, 207\n5                     5, 12, 13, 249, 255\n6        1, 6, 12, 13, 118, 160, 165, 249\n                                                                                                 wt\n1                                                        0.0000000, 0.3730707, 0.5166453, 0.3002859\n2                                  0.0000000, 0.3310971, 0.4857231, 0.3966444, 0.7717933, 0.8772257\n3 0.0000000, 1.2234810, 1.5459306, 1.9097265, 0.9553393, 1.1311669, 1.3578115, 2.7653647, 1.7002092\n4                              0.000000, 1.286031, 2.993138, 1.862438, 2.166602, 1.013777, 1.011906\n5                                             0.0000000, 1.4041477, 1.1310013, 0.6159622, 0.4135746\n6            0.3730707, 0.0000000, 0.7009117, 0.4433391, 0.3101907, 0.3335912, 0.4017934, 0.3828707\n\n\nsome of them have no neighbors\n\nunlist(dengue_nb_week31[1, ]$nb)\n\n[1]   1   6 118 160\n\n\n\ndengue_nb_week31[187, ]$nb\n\n[[1]]\n[1] 144 155 156 186 187 256 257\n\nlengths(dengue_nb_week31[187, ]$nb)\n\n[1] 7\n\nprint(\"--------------\")\n\n[1] \"--------------\"\n\n#card(dengue_nb_week31[1, ]$nb[1])\nprint(\"--------------\")\n\n[1] \"--------------\"\n\n#card(dengue_nb_week31[187, ]$nb)\n\n\n#gi_star = local_gstar_perm( dengue_nb_week31, dengue_nb_week31$nb, dengue_nb_week31$wt)\n#gi_star\n\nmethod 2\n\n#wm_idw &lt;- dengue_df_combined %&gt;%\n#  mutate(nb = st_contiguity(geometry),\n#         wts = st_inverse_distance(nb, geometry,\n#                                   scale = 1,\n#                                   alpha = 1),\n#         .before = 1)\n\nthis might be useful for points that have missing towns:\nleft_join(dfx, dfy, join_by(closest(a &lt; b))) # similar to above, but only take the closest match\n\n\n\n\n\n\nNote\n\n\n\nPlanning:\n\nuse statistical means to get distribution and see which one best - identify unique patterns and write reflection on them\n\n\n\nadd the cold and hot spots as separate layers for users to interact with\nfacet plots\nmake ranges for plots similar when comparing plots side by side"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "title": "Take Home Exercise 2",
    "section": "Global Measures of Spatial Autocorrelation: Geary’s C",
    "text": "Global Measures of Spatial Autocorrelation: Geary’s C\nIn this section, we will perform Geary’s C statistics testing by using appropriate functions of spdep package.\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() function.\n\nset.seed(1234)\nbperm=geary.mc(dengue_df_combined$total_count, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  dengue_df_combined$total_count \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.82448, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nVisualising the Monte Carlo Geary’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.000081\n\n\n\nvar(bperm$res[1:999])\n\n[1] 6.938789e-05\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.9763  0.9946  0.9995  1.0001  1.0052  1.0333 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\n\n\n\nComputing local Moran’s I\n\nfips &lt;- order(dengue_df_combined$total_count)\nlocalMI &lt;- localmoran(dengue_df_combined$total_count, rswm_q)\nhead(localMI)\n\n         Ii          E.Ii      Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.2279978 -3.267744e-05 0.002102030 4.973631   6.571047e-07\n2 0.2279978 -3.267744e-05 0.002102030 4.973631   6.571047e-07\n3 0.3306455 -6.931550e-05 0.004458669 4.952802   7.315233e-07\n4 0.3306455 -6.931550e-05 0.004458669 4.952802   7.315233e-07\n5 0.3306455 -6.931550e-05 0.004458669 4.952802   7.315233e-07\n6 0.3306455 -6.931550e-05 0.004458669 4.952802   7.315233e-07\n\n\n\nMapping the local Moran’s I\n\ndengue_df_combined.localMI &lt;- cbind(dengue_df_combined,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping both local Moran’s I values and p-values\nThe choropleth shows on the left is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\n\nlocalMI.map &lt;- tm_shape(dengue_df_combined.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(dengue_df_combined.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#spatial-correlogram",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#spatial-correlogram",
    "title": "Take Home Exercise 2",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\n\nCompute Moran’s I correlogram\n\n#MI_corr &lt;- sp.correlogram(wm_q, \n#                          dengue_df_combined$total_count, \n#                          order=6, \n#                          method=\"I\", \n#                          style=\"W\")\n#plot(MI_corr)\n\n\n#print(MI_corr)\n\n\n\nCompute Geary’s C correlogram and plot\n\n#GC_corr &lt;- sp.correlogram(wm_q, \n#                          dengue_df_combined$total_count, \n#                          order=6, \n #                         method=\"C\", \n #                         style=\"W\")\n#plot(GC_corr)\n\n\n#print(GC_corr)\n\n\n\nComputing local Moran’s I\n\nfips &lt;- order(dengue_df_combined$total_count)\nlocalMI &lt;- localmoran(dengue_df_combined$total_count, rswm_q)\nhead(localMI)\n\n         Ii          E.Ii      Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.2279978 -3.267744e-05 0.002102030 4.973631   6.571047e-07\n2 0.2279978 -3.267744e-05 0.002102030 4.973631   6.571047e-07\n3 0.3306455 -6.931550e-05 0.004458669 4.952802   7.315233e-07\n4 0.3306455 -6.931550e-05 0.004458669 4.952802   7.315233e-07\n5 0.3306455 -6.931550e-05 0.004458669 4.952802   7.315233e-07\n6 0.3306455 -6.931550e-05 0.004458669 4.952802   7.315233e-07\n\n\n\n#printCoefmat(data.frame(\n#  localMI[fips,], \n#  row.names=dengue_df_combined$total_count[fips]),\n#  check.names=FALSE)\n\n\nMapping the local Moran’s I\n\ndengue_df_combined.localMI &lt;- cbind(dengue_df_combined,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping both local Moran’s I values and p-values\nThe choropleth shows on the left is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\n\nlocalMI.map &lt;- tm_shape(dengue_df_combined.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(dengue_df_combined.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#creating-a-lisa-cluster-map",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#creating-a-lisa-cluster-map",
    "title": "Take Home Exercise 2",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\n\nPlotting Moran scatterplot\n\nnci &lt;- moran.plot(dengue_df_combined$total_count, rswm_q,\n                  labels=as.character(dengue_df_combined$VILLTOWN), \n                  xlab=\"Count of dengue cases 2023\", \n                  ylab=\"Spatially Lag total count 2023\")\n\n\n\n\n\n\n\n\nThe counts are not well distributed here at all since most of them at count of 1 on the far left.\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\ndengue_df_combined$lag_GDPPC &lt;- lag.listw(rswm_q, dengue_df_combined$total_count)\nDV &lt;- dengue_df_combined$lag_GDPPC - mean(dengue_df_combined$lag_GDPPC)  \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05    \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\ndengue_df_combined$lag_GDPPC &lt;- lag.listw(rswm_q, dengue_df_combined$total_count)\nDV &lt;- dengue_df_combined$lag_GDPPC - mean(dengue_df_combined$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\nPlotting LISA map and local Moran’s I values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and LISA map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ntotal_count &lt;- qtm(dengue_df_combined, \"total_count\")\n\ndengue_df_combined.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(dengue_df_combined.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(total_count, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThere are a significant number of low-low regions which indicates most of these regions are not heavily affected by dengue. The light blue clusters showing worrying trends since they may be the origination of dengue spots and may influence surrounding regions to get dengue as well. Policy makers need to take note of these regions and push for more awareness in these low-high regions in particular."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#miscellenous",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#miscellenous",
    "title": "Take Home Exercise 2",
    "section": "Miscellenous",
    "text": "Miscellenous\n\nOther explorations\n\nComputing Gi*\nisolating only one week :\n\ndengue_nb_week31 = filter(dengue_nb, dengue_nb$epiweek == 31)\nhead(dengue_nb_week31)\n\nSimple feature collection with 6 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0936 ymin: 22.9156 xmax: 120.2585 ymax: 23.08827\nGeodetic CRS:  TWD97\n       VILLTOWN epiweek total_count                       geometry\n1 青草里 安南區      31           0 POLYGON ((120.1176 23.08387...\n2 保安里 仁德區      31           1 POLYGON ((120.2304 22.93544...\n3 赤嵌里 中西區      31           0 POLYGON ((120.2012 22.99966...\n4   大成里 南區      31           0 POLYGON ((120.1985 22.98147...\n5 城北里 安南區      31           0 POLYGON ((120.1292 23.06512...\n6 城南里 安南區      31           0 POLYGON ((120.1246 23.06904...\n                                       nb\n1                          1, 6, 118, 160\n2              2, 126, 128, 138, 168, 222\n3 3, 68, 69, 172, 181, 184, 185, 188, 200\n4           4, 94, 97, 100, 104, 182, 207\n5                     5, 12, 13, 249, 255\n6        1, 6, 12, 13, 118, 160, 165, 249\n                                                                                                 wt\n1                                                        0.0000000, 0.3730707, 0.5166453, 0.3002859\n2                                  0.0000000, 0.3310971, 0.4857231, 0.3966444, 0.7717933, 0.8772257\n3 0.0000000, 1.2234810, 1.5459306, 1.9097265, 0.9553393, 1.1311669, 1.3578115, 2.7653647, 1.7002092\n4                              0.000000, 1.286031, 2.993138, 1.862438, 2.166602, 1.013777, 1.011906\n5                                             0.0000000, 1.4041477, 1.1310013, 0.6159622, 0.4135746\n6            0.3730707, 0.0000000, 0.7009117, 0.4433391, 0.3101907, 0.3335912, 0.4017934, 0.3828707\n\n\nsome of them have no neighbors\n\nunlist(dengue_nb_week31[1, ]$nb)\n\n[1]   1   6 118 160\n\n\n\ndengue_nb_week31[187, ]$nb\n\n[[1]]\n[1] 144 155 156 186 187 256 257\n\nlengths(dengue_nb_week31[187, ]$nb)\n\n[1] 7\n\nprint(\"--------------\")\n\n[1] \"--------------\"\n\n#card(dengue_nb_week31[1, ]$nb[1])\nprint(\"--------------\")\n\n[1] \"--------------\"\n\n#card(dengue_nb_week31[187, ]$nb)\n\n\n#gi_star = local_gstar_perm( dengue_nb_week31, dengue_nb_week31$nb, dengue_nb_week31$wt)\n#gi_star"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#global-spatial-autocorrelation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#global-spatial-autocorrelation",
    "title": "Take Home Exercise 2",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\n\nComputing Contiguity Spatial Weights\nSimilar to the above method, we can calculate the spatial weights separately for global spatial autocorrelation statistics analysis.\n\nwm_q &lt;- poly2nb(dengue_df_combined, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 5160 \nNumber of nonzero links: 708440 \nPercentage nonzero weights: 2.660748 \nAverage number of links: 137.2946 \nLink number distribution:\n\n 59  79  99 119 139 159 179 199 219 239 259 299 \n 80 340 940 980 980 820 520 280 120  60  20  20 \n80 least connected regions:\n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 4741 4742 4743 4744 4745 4746 4747 4748 4749 4750 4751 4752 4753 4754 4755 4756 4757 4758 4759 4760 with 59 links\n20 most connected regions:\n2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 with 299 links\n\n\nThe summary report above shows that there are 3082 area units in Taiwan’s selected districts. There are 19 most connected areas unit has 212 neighbours.\n\n\nRow-standardised weights matrix\nsimilar to above we can manually assign weights to each neighboring polygon.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 5160 \nNumber of nonzero links: 708440 \nPercentage nonzero weights: 2.660748 \nAverage number of links: 137.2946 \n\nWeights style: W \nWeights constants summary:\n     n       nn   S0       S1       S2\nW 5160 26625600 5160 79.03574 21028.06\n\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\n\nComputing Monte Carlo Moran’s I\nA total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(dengue_df_combined$total_count, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  dengue_df_combined$total_count \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.15977, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nVisualising Monte Carlo Moran’s I\nWe can plot the distribution of the statistical values as a histogram and visualise the results of Monte Carlo Moran’s I.\n\nmean(bperm$res[1:999])\n\n[1] -0.0002863313\n\n\n\nvar(bperm$res[1:999])\n\n[1] 2.904954e-06\n\n\n\nsummary(bperm$res[1:999])\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-0.0050505 -0.0015629 -0.0003812 -0.0002863  0.0008173  0.0062170 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "https://stackoverflow.com/questions/21833028/error-in-as-doubley-cannot-coerce-type-s4-to-vector-of-type-double\n\npacman::p_load(sp, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally, arulesViz)\n\n\n\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment. We need to filter out the regions “Shan (East)”, “Shan (North)”, “Shan (South)” and this is done with the key word “in”, just like in SQL statements! It uses the global coordinate system WGS 84 and for now it is alright since other data do not use cooridate system for now, so there is no need to synchronise this crs system to any other system for now.\n\nshan_sf &lt;- st_read(dsn = \"../../data/geospatial/week8\", \n                   layer = \"mmr_polbnda_adm3_250k_mimu_1\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week8' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\nLets check out the data type of the variable shan_sf using the useful class function:\n\nclass(shan_sf)\n\n[1] \"sf\"         \"data.frame\"\n\n\nLets preview the shan_sf variable:\n\nhead(shan_sf)\n\nSimple feature collection with 6 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 98.2089 ymin: 19.67151 xmax: 101.17 ymax: 23.48802\nGeodetic CRS:  WGS 84\n            ST ST_PCODE        DT   DT_PCODE        TS  TS_PCODE\n1  Shan (East)   MMR016  Monghsat MMR016D002  Monghsat MMR016006\n2  Shan (East)   MMR016  Monghsat MMR016D002   Mongton MMR016008\n3  Shan (East)   MMR016 Tachileik MMR016D003 Monghpyak MMR016010\n4  Shan (East)   MMR016 Tachileik MMR016D003 Mongyawng MMR016011\n5  Shan (East)   MMR016 Tachileik MMR016D003 Tachileik MMR016009\n6 Shan (North)   MMR015    Hopang MMR015D006    Hopang MMR015021\n                        geometry\n1 MULTIPOLYGON (((99.17944 20...\n2 MULTIPOLYGON (((98.50567 20...\n3 MULTIPOLYGON (((100.0708 21...\n4 MULTIPOLYGON (((101.1053 21...\n5 MULTIPOLYGON (((100.3687 21...\n6 MULTIPOLYGON (((98.88008 23...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"…\n$ ST_PCODE &lt;chr&gt; \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR015\", \"…\n$ DT       &lt;chr&gt; \"Monghsat\", \"Monghsat\", \"Tachileik\", \"Tachileik\", \"Tachileik\"…\n$ DT_PCODE &lt;chr&gt; \"MMR016D002\", \"MMR016D002\", \"MMR016D003\", \"MMR016D003\", \"MMR0…\n$ TS       &lt;chr&gt; \"Monghsat\", \"Mongton\", \"Monghpyak\", \"Mongyawng\", \"Tachileik\",…\n$ TS_PCODE &lt;chr&gt; \"MMR016006\", \"MMR016008\", \"MMR016010\", \"MMR016011\", \"MMR01600…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((99.17944 20..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package. The code chunks used are shown below:\n\nict &lt;- read_csv (\"../../data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar.\nLets run this summary statistics of ict data.frame to get the summary:\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \nhead(ict_derived)\n\n# A tibble: 6 × 17\n  DT_PCODE   DT       TS_PCODE  TS      TT_HOUSEHOLDS RADIO    TV LLPHONE MPHONE\n  &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 MMR014D001 Taunggyi MMR014001 Taungg…         82604 30176 62388    6736  48461\n2 MMR014D001 Taunggyi MMR014002 Nyaung…         42634 13801 23640     810  14973\n3 MMR014D001 Taunggyi MMR014003 Hopong          24728  5083 11272     799   5192\n4 MMR014D001 Taunggyi MMR014004 Hsihse…         32771  8087 16568    1042   4755\n5 MMR014D001 Taunggyi MMR014005 Kalaw           41341 11607 25285    1739  16900\n6 MMR014D001 Taunggyi MMR014006 Pindaya         17544  7324  8862     348   2849\n# ℹ 8 more variables: COMPUTER &lt;dbl&gt;, INTERNET &lt;dbl&gt;, RADIO_PR &lt;dbl&gt;,\n#   TV_PR &lt;dbl&gt;, LLPHONE_PR &lt;dbl&gt;, MPHONE_PR &lt;dbl&gt;, COMPUTER_PR &lt;dbl&gt;,\n#   INTERNET_PR &lt;dbl&gt;\n\n\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"../../data/rds/week8/shan_sf.rds\")\n\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThis is definitely an improvement from the regular scatterplot since one half of the matrix, which will be repeated anyway, is used as shapes to better look at correlations in an intuitive manner to find possible problems of multi-collinearity. Sloped oval circles indicate higher correlation.\nCopy of Handson exercise for faster reference:\n\n\n\n\nBy the end of this hands-on exercise, I will be able to:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\nQuestions I have before starting:\n\ncan these clustering tactics be integrated with existing pytorch unsupervised learning methods such as KMeans, etc?\nPytorch is known to speed up processes by maximising usage of existing CPUs, is it possible to take advantage of that in this clustering r package since it involves dealing with many small geographical points?\n\n\n\n\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)Getting Started\nImporting the relevant packages:\nhttps://stackoverflow.com/questions/21833028/error-in-as-doubley-cannot-coerce-type-s4-to-vector-of-type-double\n\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally, arulesViz, sp)\n\n\n\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\nRetrieved from: https://data.humdata.org/dataset/mimu-geonode-myanmar-township-boundaries-mimu?\n\nshan_sf &lt;- st_read(dsn = \"../../data/geospatial/week8\", \n                   layer = \"mmr_polbnda_adm3_250k_mimu_1\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week8' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.17 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE        DT   DT_PCODE        TS  TS_PCODE\n1   Shan (East)   MMR016  Monghsat MMR016D002  Monghsat MMR016006\n2   Shan (East)   MMR016  Monghsat MMR016D002   Mongton MMR016008\n3   Shan (East)   MMR016 Tachileik MMR016D003 Monghpyak MMR016010\n4   Shan (East)   MMR016 Tachileik MMR016D003 Mongyawng MMR016011\n5   Shan (East)   MMR016 Tachileik MMR016D003 Tachileik MMR016009\n6  Shan (North)   MMR015    Hopang MMR015D006    Hopang MMR015021\n7  Shan (North)   MMR015    Hopang MMR015D006   Mongmao MMR015008\n8  Shan (North)   MMR015    Lashio MMR015D001   Mongyai MMR015003\n9  Shan (North)   MMR015    Lashio MMR015D001   Tangyan MMR015004\n10 Shan (North)   MMR015    Matman MMR015D007    Matman MMR015024\n                         geometry\n1  MULTIPOLYGON (((99.17944 20...\n2  MULTIPOLYGON (((98.50567 20...\n3  MULTIPOLYGON (((100.0708 21...\n4  MULTIPOLYGON (((101.1053 21...\n5  MULTIPOLYGON (((100.3687 21...\n6  MULTIPOLYGON (((98.88008 23...\n7  MULTIPOLYGON (((98.94264 23...\n8  MULTIPOLYGON (((98.04246 22...\n9  MULTIPOLYGON (((98.27834 22...\n10 MULTIPOLYGON (((98.9057 22....\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"…\n$ ST_PCODE &lt;chr&gt; \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR015\", \"…\n$ DT       &lt;chr&gt; \"Monghsat\", \"Monghsat\", \"Tachileik\", \"Tachileik\", \"Tachileik\"…\n$ DT_PCODE &lt;chr&gt; \"MMR016D002\", \"MMR016D002\", \"MMR016D003\", \"MMR016D003\", \"MMR0…\n$ TS       &lt;chr&gt; \"Monghsat\", \"Mongton\", \"Monghpyak\", \"Mongyawng\", \"Tachileik\",…\n$ TS_PCODE &lt;chr&gt; \"MMR016006\", \"MMR016008\", \"MMR016010\", \"MMR016011\", \"MMR01600…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((99.17944 20..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict &lt;- read_csv (\"../../data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\n\n\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR.\n\n\n\n\n\n\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"../../data/rds/week8/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\nshan_sf &lt;- read_rds(\"../../data/rds/week8/shan_sf.rds\")\n\n\n\n\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\") + tm_fill()\n\n\n\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nCan you identify the differences?\n\n\n\n\n\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both.\n\n\n\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\n2    Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\n3  Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\n4  Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\n5  Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\n6     Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\n7    Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\n8    Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\n9    Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\n10    Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\nMongton     Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang       Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao     Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai     Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan     Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\nMatman       Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat  107.6749 460.1169  34.508769 189.51537   22.817273\nMongton   193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang    127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao   120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai   168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan   223.8632 453.2753  22.594047 105.23021   12.065335\nMatman    244.1230 219.4093   8.438819  45.20796    6.027728\n\n\n\n\n\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n            Monghsat   Mongton Monghpyak Mongyawng Tachileik    Hopang\nMongton    150.98053                                                  \nMonghpyak  356.84917 258.04282                                        \nMongyawng  364.40429 375.22688 285.56475                              \nTachileik  677.09508 608.76740 444.04411 432.10118                    \nHopang     317.64824 273.50305 304.26577 290.51360 403.82035          \nMongmao    247.17708 206.57001 291.88846 296.40789 472.95568  78.29342\nMongyai    127.35225 159.79790 370.01575 445.78964 750.29555 408.73288\nTangyan    144.59626 198.88460 335.26416 377.52279 719.84066 412.22167\nMatman     313.59911 303.04574 470.46845 601.80824 890.12935 573.55355\nNarphan    278.21548 215.97925 448.40651 572.76394 760.29566 397.85908\nPangsang   256.37933 210.77938 315.11651 336.16703 481.31907  92.57672\nMabein     470.48135 425.16902 212.69450 193.49994 365.32538 368.55167\nMongmit    214.20854 192.67961 177.76325 214.21738 529.63213 281.05362\nKutkai     154.32012 107.06341 206.61627 281.03383 568.99109 263.31986\nMuse       663.76026 634.71074 539.43485 422.37358 221.19950 377.44407\nNamhkan    455.10875 414.53594 379.50202 321.21112 295.91660 146.18632\nManton     317.15603 310.20581 502.20840 629.43339 910.23039 577.52046\nNamhsan    169.56962 196.76188 352.70492 430.02019 754.03913 440.51555\nKengtung   383.72138 329.38387 221.47613 203.87199 295.90429 164.29921\nMongkhet   167.98445 223.22828 462.63265 522.91815 820.50164 451.51070\nMongla     429.00536 411.06668 408.03397 315.57550 347.33155 147.02444\nMongping   140.95392 119.86993 354.76537 455.59190 727.08969 379.27212\nMongyang   312.64797 295.60023 358.17599 304.21734 448.79027  69.25859\nPangwaun   343.53898 257.50434 381.95144 475.33116 540.60474 206.98364\nKonkyan    268.25060 248.25265 463.39594 522.38580 730.92980 348.18522\nLaukkaing  626.44910 604.66190 565.84279 454.80044 325.06329 331.67199\nHsipaw     121.78922  90.69766 237.67919 294.70967 576.18780 248.72536\nKyaukme    253.25370 229.28509 217.64419 181.55295 429.15493 154.91633\nNamtu      231.78673 308.71751 346.57799 262.24331 659.56458 408.24516\nNawnghkio  289.83220 225.81118  93.03711 220.61209 470.45533 279.84188\nHseni      331.22632 286.75945 200.26876 173.86004 354.90063 162.80878\nKunlong    202.31862 270.02165 357.44661 240.39800 595.70536 271.34451\nLashio     377.86793 347.11584 262.09281 172.70139 311.95286 170.63913\nPindaya    314.71506 283.35574 221.30579 332.92193 635.51774 443.26362\nYwangan    432.98028 361.23257 367.44835 570.56521 807.44220 596.19312\nLangkho    279.52329 236.70878 200.27496 186.11584 402.33622 134.24847\nMawkmai    275.09705 313.35220 536.71695 620.04321 919.38755 561.24281\nMongnai    125.25968 131.67061 253.26470 275.77546 563.95232 243.00945\nMongpan    283.30992 200.31803 187.85699 275.15989 411.03849 135.62913\nKunhing    165.38834 114.03609 250.74435 295.35984 532.26397 172.96164\nKyethi     190.50609 222.52947 328.16234 387.71518 728.87329 440.48114\nLaihka     158.93517 212.07320 293.22640 211.99976 549.08985 230.78652\nLoilen     118.65144 176.16001 296.99681 261.75211 573.75476 242.89326\nMonghsu    137.24737 107.04894 232.17823 312.85089 605.02113 301.84458\nMongkaing  375.60376 365.50032 568.21089 700.98284 967.14087 626.17673\nNansang    201.92690 199.58124 227.52638 191.11990 486.77266 196.47091\nHopong     100.45714 106.21031 267.95563 326.59925 632.45718 309.77356\nHsihseng   153.49551 194.64317 285.37627 309.51462 658.87060 370.01334\nPinlaung   160.44703 163.42143 222.20020 235.55497 555.01039 265.96924\nKalaw      317.96188 267.87522 167.08436 173.43078 373.64459 185.14704\nLawksawk   352.31496 311.07742 142.31691 179.07229 441.82621 321.16462\nNyaungshwe 286.37238 219.72196 103.97300 218.12104 445.81335 247.19891\nPekon      225.64279 208.14888 190.93173 248.43910 573.39528 336.38582\nTaunggyi   562.88102 508.40925 334.17439 287.73864 150.84117 329.95252\n             Mongmao   Mongyai   Tangyan    Matman   Narphan  Pangsang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai    335.61300                                                  \nTangyan    347.14183 109.08506                                        \nMatman     501.59903 186.95158 242.78233                              \nNarphan    331.42618 248.82845 348.84991 312.05193                    \nPangsang    57.60801 343.30638 364.76893 506.29940 316.30314          \nMabein     384.91867 516.40426 448.59948 637.53975 630.34312 418.54016\nMongmit    242.54541 256.72744 195.92520 401.25041 406.15714 272.67383\nKutkai     204.69232 188.94166 166.61820 340.86349 314.27683 228.33583\nMuse       451.82530 763.91399 736.93741 929.11283 770.40234 460.24292\nNamhkan    223.32205 550.62819 542.64078 715.42102 536.85519 231.38484\nManton     503.79786 195.59882 271.82672  59.52318 280.26395 504.75214\nNamhsan    371.71448  77.35900  63.67613 180.09747 316.54695 385.65526\nKengtung   207.58055 460.39706 429.95076 613.01033 505.40025 229.85484\nMongkhet   375.35820 104.98924 201.49393 203.02855 217.28718 375.58139\nMongla     216.24705 535.28615 526.80849 708.17595 531.46949 217.88123\nMongping   305.57166  65.38727 161.67411 201.65224 188.64567 308.33123\nMongyang    91.06281 414.31237 421.06366 585.61776 401.39475 108.37735\nPangwaun   187.40057 394.07696 447.05580 523.43600 264.64997 157.48757\nKonkyan    281.87425 287.87384 367.46064 392.40306 158.82353 274.81900\nLaukkaing  404.00848 732.68347 722.40954 903.72094 708.82887 408.04016\nHsipaw     185.99483 177.33790 167.69794 344.45451 295.40170 205.04337\nKyaukme    146.09228 339.27780 306.78359 505.52285 420.30003 175.35273\nNamtu      365.03882 278.02761 178.69483 416.65397 494.36143 392.97391\nNawnghkio  257.76465 319.57938 269.07880 444.05061 435.59661 287.10769\nHseni      184.67099 408.23212 373.07575 564.64051 474.12297 214.66375\nKunlong    224.43391 299.36066 268.07983 468.27436 413.07823 258.49342\nLashio     214.23677 466.36472 429.84475 628.11049 525.63854 236.72516\nPindaya    402.21719 287.41816 208.43740 354.39039 474.50209 428.24958\nYwangan    542.85957 333.12853 324.77002 255.22031 452.95769 556.82263\nLangkho    134.50170 358.95672 332.02048 518.86151 420.65204 167.65920\nMawkmai    485.52853 178.70499 262.66006 147.83545 273.75350 484.14757\nMongnai    188.29603 203.23607 180.37471 376.33870 329.31700 204.25746\nMongpan    131.59966 346.39710 340.39128 494.81014 371.13393 140.23910\nKunhing    103.91040 238.99570 249.74161 403.66587 281.62645 123.18870\nKyethi     377.89657 137.79420  47.79331 233.83079 374.90376 396.89963\nLaihka     185.99082 264.13364 224.29176 443.25453 392.32592 214.19291\nLoilen     190.26490 224.79239 196.60826 406.56282 354.79137 207.94433\nMonghsu    242.43599 154.86049 127.42203 308.13805 311.92379 260.52971\nMongkaing  552.31959 262.84016 348.56123 135.51424 285.65085 548.40662\nNansang    164.99494 288.55962 249.70235 458.06573 398.13308 193.36162\nHopong     244.16253 124.62791 106.82328 291.84351 294.40441 261.51075\nHsihseng   311.98001 162.27126  70.27241 304.02806 377.52977 335.52974\nPinlaung   217.58854 220.56339 169.50567 382.40610 371.26895 244.47146\nKalaw      195.18913 386.74701 348.06617 537.63884 463.53759 224.03998\nLawksawk   314.64777 391.26989 323.14701 515.39711 523.69580 345.91486\nNyaungshwe 230.45003 327.13541 284.14692 460.91883 427.94086 257.77823\nPekon      293.70625 242.52301 167.79937 368.25761 416.84901 321.81214\nTaunggyi   387.33906 635.94105 592.65262 778.45810 684.20905 405.59730\n              Mabein   Mongmit    Kutkai      Muse   Namhkan    Manton\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit    263.37099                                                  \nKutkai     340.55064  97.61092                                        \nMuse       453.27410 563.01629 592.90743                              \nNamhkan    379.56035 386.02794 392.48568 238.67060                    \nManton     674.01120 430.64070 361.82684 941.49778 721.86149          \nNamhsan    488.33873 237.78494 191.32762 778.52971 576.42717 210.48485\nKengtung   219.47071 246.45691 279.19573 330.08211 175.63015 631.99123\nMongkhet   610.30557 349.45980 273.91673 816.44931 596.19944 181.33894\nMongla     406.09124 384.30076 388.40984 256.80556  77.21355 712.51416\nMongping   518.16310 265.12574 182.75266 744.44948 523.74815 200.48082\nMongyang   411.88352 309.51302 285.33223 389.59919 167.72448 585.70558\nPangwaun   523.44632 381.51246 321.80465 541.97887 310.44067 510.79265\nKonkyan    613.51206 403.39082 310.60810 704.86973 481.59596 366.66876\nLaukkaing  520.67373 568.27732 580.38112 149.26996 196.46063 907.38406\nHsipaw     366.42787 118.18050  51.46282 591.03355 382.79302 359.60008\nKyaukme    264.88283 144.02475 170.93318 434.75768 247.81990 522.86003\nNamtu      366.16094 179.62251 225.28268 659.16927 506.32466 448.58230\nNawnghkio  204.63154  89.07103 147.44053 533.68806 367.33575 475.77296\nHseni      213.61240 189.37188 229.37894 381.30567 212.11323 584.63341\nKunlong    396.61508 224.12169 204.54010 547.24297 375.73885 479.76855\nLashio     231.28227 251.29457 289.82513 313.15288 173.27153 646.66493\nPindaya    313.45776 171.86828 212.81775 704.11252 543.81859 402.42888\nYwangan    529.14689 381.88259 360.11861 899.44137 714.43173 306.16379\nLangkho    253.84371 164.26299 180.51419 413.64173 224.40029 535.95620\nMawkmai    693.24602 434.92968 364.95519 926.93007 706.47792 109.08779\nMongnai    358.86053 115.86190  91.15307 571.97975 370.05669 391.54062\nMongpan    301.52942 193.32063 185.18173 447.49969 240.34131 507.96808\nKunhing    375.82140 173.50424 108.84990 533.00162 314.92119 410.49230\nKyethi     442.07679 202.92551 184.23422 757.16745 567.86202 272.03299\nLaihka     345.00222 141.87227 144.67198 526.65211 342.43665 458.30232\nLoilen     375.06406 145.48666 131.56529 560.43400 364.90647 419.06087\nMonghsu    367.19820 109.15790  62.60859 633.21624 431.32637 330.76503\nMongkaing  747.17454 503.61965 428.96133 995.66496 771.39688  81.75337\nNansang    287.92364 104.91839 130.04549 489.35308 302.89487 476.55544\nHopong     398.00917 136.93111  73.45899 648.68011 444.13246 310.58885\nHsihseng   381.20187 131.49728 128.21054 677.66886 492.09476 334.87758\nPinlaung   312.66966  57.46286  78.07733 571.58335 382.78835 405.83081\nKalaw      198.14085 160.05997 204.93018 412.46033 246.39577 560.16577\nLawksawk   130.36525 140.11550 224.64646 510.13288 379.41126 551.13000\nNyaungshwe 210.21337  99.38590 152.15482 505.88581 333.32428 488.79874\nPekon      282.26877  59.61977 114.98048 614.56144 442.77120 403.82131\nTaunggyi   226.24011 399.84278 450.33382 250.81471 257.29147 803.08034\n             Namhsan  Kengtung  Mongkhet    Mongla  Mongping  Mongyang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung   466.20497                                                  \nMongkhet   170.90848 531.35998                                        \nMongla     564.02740 202.45004 574.40292                              \nMongping   130.23777 442.80821 113.80917 512.61580                    \nMongyang   450.97869 217.08047 445.40621 146.66661 387.80686          \nPangwaun   448.58030 337.48335 407.02947 319.18643 340.37881 225.25026\nKonkyan    352.20115 474.82621 254.24424 468.09747 242.02901 329.39338\nLaukkaing  760.45960 351.48520 769.06406 202.55831 708.13447 326.19219\nHsipaw     194.47928 284.08582 253.80950 373.47509 168.92101 267.10497\nKyaukme    347.85944 136.23356 409.03553 241.58966 330.28984 188.59489\nNamtu      240.95555 385.33554 355.99713 483.49434 321.66441 413.26052\nNawnghkio  299.74967 208.29647 414.10280 381.40808 316.14719 323.32123\nHseni      411.96125  66.12817 481.88406 226.82048 395.58453 210.19929\nKunlong    310.40560 317.14187 341.68641 346.46200 309.05385 247.22785\nLashio     472.04024  59.85893 534.44463 179.95877 454.52548 209.33700\nPindaya    228.41073 385.68322 391.74783 549.42389 310.64850 475.93982\nYwangan    286.16305 573.23173 408.97731 728.16301 337.94020 630.71590\nLangkho    368.20978 107.16213 428.08061 229.01675 343.96455 175.35413\nMawkmai    215.19289 632.54638 115.58388 686.88950 194.31049 558.83162\nMongnai    218.10003 272.28711 275.76855 354.10985 202.99615 260.39387\nMongpan    364.77086 142.21554 412.17123 253.20001 318.47482 194.93467\nKunhing    270.79121 245.95083 292.49814 306.47566 212.59619 188.89405\nKyethi      68.67929 444.26274 233.25039 556.02500 187.43974 453.86726\nLaihka     273.79672 258.23950 324.97428 315.93218 272.82761 229.71502\nLoilen     242.15271 282.22935 284.76895 338.67408 231.99959 246.76592\nMonghsu    153.22576 316.91914 247.73318 424.51868 158.90478 323.95988\nMongkaing  288.66231 692.74693 222.60577 761.48327 257.18572 631.91325\nNansang    294.16284 193.67980 360.99219 289.45119 287.36626 218.49285\nHopong     132.70541 340.47382 212.99485 432.31105 134.00139 323.35704\nHsihseng   125.74240 370.72441 256.70338 478.66210 199.64389 382.59743\nPinlaung   214.33352 263.48638 305.86058 372.59678 229.75261 286.03834\nKalaw      385.88676  88.29335 465.52013 260.26411 375.64739 233.56349\nLawksawk   362.84062 209.38215 487.41102 393.18472 396.47081 363.37684\nNyaungshwe 315.91750 177.75714 417.08639 347.60273 319.32583 294.29500\nPekon      207.16559 297.67761 342.08722 441.20998 259.68288 363.58788\nTaunggyi   631.49232 186.28225 712.80752 297.09863 621.53039 374.58247\n            Pangwaun   Konkyan Laukkaing    Hsipaw   Kyaukme     Namtu\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan    263.97576                                                  \nLaukkaing  470.63605 635.92043                                        \nHsipaw     298.12447 296.74316 569.06099                              \nKyaukme    308.31407 393.79911 428.74978 163.95741                    \nNamtu      517.03554 478.37690 664.06286 229.44658 270.87277          \nNawnghkio  381.67478 439.34272 552.65554 176.09570 157.04230 257.52713\nHseni      330.70182 448.84563 391.74585 231.48538  81.20593 327.41448\nKunlong    392.45403 329.11433 521.88657 205.10051 215.63037 233.60474\nLashio     362.45608 485.51312 334.65738 290.86435 129.95255 365.88437\nPindaya    512.13162 500.86933 726.85355 245.98884 311.01487 225.40822\nYwangan    580.13146 528.12533 908.82520 388.63147 505.89191 444.66868\nLangkho    295.38434 386.95022 410.41270 183.05109  51.67279 305.03473\nMawkmai    500.68857 339.01411 882.51110 351.34601 512.02846 427.95451\nMongnai    312.13429 328.82831 551.56800  52.68195 142.45669 209.35473\nMongpan    232.52209 365.87588 435.58047 179.52054 110.37831 352.91394\nKunhing    229.09986 253.74202 500.41640  90.77517 145.00266 296.43996\nKyethi     476.62610 400.10989 749.99415 195.17677 328.14177 186.90932\nLaihka     351.78203 351.75354 507.39700 128.42987 128.24979 185.86794\nLoilen     331.69981 334.19820 535.57527  98.04789 146.92675 194.24075\nMonghsu    343.38498 331.72187 619.01766  58.55724 200.77712 209.64684\nMongkaing  536.95736 380.92091 954.11795 423.77868 586.05094 525.04057\nNansang    326.12960 374.70456 480.60074 120.24428  60.32773 217.61884\nHopong     346.00673 304.49287 628.48557  62.86179 218.84211 206.82668\nHsihseng   433.06326 383.49700 670.74564 136.54610 250.27059 131.89940\nPinlaung   356.37963 365.44693 563.81750  76.55260 139.67966 170.04533\nKalaw      338.35194 444.75859 427.77791 212.36711  79.42225 307.27427\nLawksawk   453.02765 520.31264 548.83928 249.35081 186.29066 260.95300\nNyaungshwe 352.92324 432.35040 520.24345 169.92664 126.50414 271.41464\nPekon      423.81347 421.48797 624.82399 145.37542 202.12206 165.02707\nTaunggyi   497.61245 650.56905 345.98041 462.31183 312.60547 518.72748\n           Nawnghkio     Hseni   Kunlong    Lashio   Pindaya   Ywangan\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni      164.05304                                                  \nKunlong    285.04608 276.19175                                        \nLashio     230.55346  79.41836 295.23103                              \nPindaya    180.64047 337.98982 355.47066 398.98167                    \nYwangan    377.87702 534.44679 531.63089 602.17475 257.31610          \nLangkho    156.51662  66.66133 224.52741 115.18145 323.28133 507.78892\nMawkmai    495.15047 582.53670 446.53763 638.60773 437.99577 397.03752\nMongnai    182.21245 216.81639 202.92529 270.86983 258.49346 422.71934\nMongpan    172.84425 120.66550 288.03320 172.33279 335.72896 483.68125\nKunhing    206.15773 206.47448 193.77551 255.10832 318.23811 449.67218\nKyethi     267.21607 388.33498 298.55859 447.10266 175.54012 287.29358\nLaihka     211.88187 204.49010 122.68682 238.64533 298.61288 491.83321\nLoilen     219.26405 227.10984 166.53599 268.92310 293.61143 469.51621\nMonghsu    170.09168 262.28462 239.89665 325.71557 198.35391 340.42789\nMongkaing  546.69447 648.04408 539.91284 708.65819 481.71125 364.98429\nNansang    151.13185 136.45492 183.01388 184.47950 275.44246 472.77637\nHopong     204.88286 286.41193 219.06817 345.31042 223.06050 352.85844\nHsihseng   209.88026 312.74375 231.85967 369.00833 172.00796 342.91035\nPinlaung   139.27495 204.47572 194.76257 262.51735 208.63519 400.05492\nKalaw      127.74787  38.52842 273.01375 106.69059 302.51785 499.53297\nLawksawk    90.82891 171.50398 318.30406 220.75270 204.32952 432.16535\nNyaungshwe  43.26545 130.86310 285.13095 201.58191 216.52463 407.11649\nPekon      113.15370 243.98001 249.36301 303.80011 117.91580 336.50410\nTaunggyi   344.79200 238.19389 471.29032 195.14541 503.75471 697.98323\n             Langkho   Mawkmai   Mongnai   Mongpan   Kunhing    Kyethi\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai    531.08019                                                  \nMongnai    174.67678 374.50873                                        \nMongpan     94.98486 509.99632 178.09554                              \nKunhing    146.38284 398.43973 110.55197 137.85278                    \nKyethi     350.91512 278.85535 210.50453 358.89620 278.95182          \nLaihka     160.94435 429.96554 100.53457 210.76951 142.03682 255.83275\nLoilen     184.10672 388.73386  58.41263 207.25000 130.39336 232.32965\nMonghsu    221.84918 332.07962  84.11238 216.25326 146.78891 146.61572\nMongkaing  597.42714 133.29995 456.00842 563.56780 465.03971 352.06533\nNansang     99.39859 462.41938  92.79567 144.77393 128.20940 273.02385\nHopong     239.63685 302.84362  91.53795 239.43845 145.15617 136.49038\nHsihseng   276.27441 329.29477 142.36728 295.87811 220.15490  84.04049\nPinlaung   168.44228 398.11227  64.52387 192.78316 141.58836 189.47065\nKalaw       67.19580 562.59200 200.34668 114.69105 197.63683 360.17247\nLawksawk   190.30257 567.52693 241.71260 228.54223 278.68953 317.74604\nNyaungshwe 128.26577 502.99026 169.63695 137.29734 189.97131 288.06872\nPekon      219.21623 416.00669 151.60031 243.30037 213.46379 162.43575\nTaunggyi   288.27478 810.74692 448.55282 319.81385 429.98509 599.57407\n              Laihka    Loilen   Monghsu Mongkaing   Nansang    Hopong\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai                                                               \nMongnai                                                               \nMongpan                                                               \nKunhing                                                               \nKyethi                                                                \nLaihka                                                                \nLoilen      59.69478                                                  \nMonghsu    163.28926 131.55208                                        \nMongkaing  522.96309 482.18190 400.71816                              \nNansang     78.78999  94.23028 153.59962 542.16609                    \nHopong     157.48857 124.74445  43.40665 379.37916 167.66291          \nHsihseng   175.89761 158.84853  97.82470 411.59788 193.53779  91.65458\nPinlaung   101.10150  91.56527  80.86834 476.29056  85.49572  98.14855\nKalaw      197.34633 217.19877 237.34578 625.24500 124.30500 264.16294\nLawksawk   246.74469 265.29318 242.04063 625.18712 188.78869 274.91604\nNyaungshwe 201.71653 206.40432 173.82799 557.32112 131.18943 209.32532\nPekon      182.23667 181.94596 113.84636 480.23965 160.37607 138.86577\nTaunggyi   425.36916 455.91617 486.91951 866.21117 365.04897 513.76415\n            Hsihseng  Pinlaung     Kalaw  Lawksawk Nyaungshwe     Pekon\nMongton                                                                \nMonghpyak                                                              \nMongyawng                                                              \nTachileik                                                              \nHopang                                                                 \nMongmao                                                                \nMongyai                                                                \nTangyan                                                                \nMatman                                                                 \nNarphan                                                                \nPangsang                                                               \nMabein                                                                 \nMongmit                                                                \nKutkai                                                                 \nMuse                                                                   \nNamhkan                                                                \nManton                                                                 \nNamhsan                                                                \nKengtung                                                               \nMongkhet                                                               \nMongla                                                                 \nMongping                                                               \nMongyang                                                               \nPangwaun                                                               \nKonkyan                                                                \nLaukkaing                                                              \nHsipaw                                                                 \nKyaukme                                                                \nNamtu                                                                  \nNawnghkio                                                              \nHseni                                                                  \nKunlong                                                                \nLashio                                                                 \nPindaya                                                                \nYwangan                                                                \nLangkho                                                                \nMawkmai                                                                \nMongnai                                                                \nMongpan                                                                \nKunhing                                                                \nKyethi                                                                 \nLaihka                                                                 \nLoilen                                                                 \nMonghsu                                                                \nMongkaing                                                              \nNansang                                                                \nHopong                                                                 \nHsihseng                                                               \nPinlaung   111.61846                                                   \nKalaw      287.11074 181.96406                                         \nLawksawk   257.11202 192.57320 140.01101                               \nNyaungshwe 225.80242 138.12050  95.66782 104.17830                     \nPekon      105.30573  94.61225 211.91531 157.51129  139.31874          \nTaunggyi   528.14240 429.54386 252.26066 304.96838  325.09619 440.66133\n\n\n\n\n\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\nPERSONAL OBSERVATION: SAME AS KMEANS Clustering –&gt; elbow method. Most important overarching concept concept: Bias variance tradeoff!\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\nPERSONAL NOTE: Same as a migration patterns study I found online previously! Used to find which point in TIME different races from other countries mixed with racial groups in India such as the Iranian farmers.\n\n\n\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\nRADIO_PRTV_PRLLPHONE_PRMPHONE_PRCOMPUTER_PRNarphanPangwaunMongpanNansangKyaukmeKalawHseniLangkhoKunhingLaihkaMonghsatLoilenMongnaiMongtonHsipawHopongMonghsuPinlaungMongmitPekonKutkaiNamtuHsihsengKyethiTangyanNamhsanMongyaiMongpingMongkhetMawkmaiMongkaingMantonMatmanYwanganPindayaLawksawkNyaungshweNawnghkioMonghpyakMabeinMongyawngKunlongKonkyanMongyangMongmaoHopangNamhkanLaukkaingMonglaPangsangKengtungLashioTaunggyiTachileikMuse\n0.000.250.500.751.00Geographic Segmentation of Shan State by ICT indicatorsICT IndicatorsTownships of Shan State\n\n\n\n\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.\n\n\n\n\nIn this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\n#plot(shan_sp, \n#     border=grey(.5))\n#plot(shan.nb, \n#     coordinates(shan_sp), \n#     col=\"blue\", \n#     add=TRUE)\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn      S0       S1        S2\nB 55 3025 76338.3 58090482 524376272\n\n\n\n\n\n\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   50  94.61225\n[2,]   50   53 138.12050\n[3,]   53   51  95.66782\n[4,]   51   52 140.01101\n[5,]   52   31  90.82891\n[6,]   31   29 157.04230\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\n#plot(shan_sp, border=gray(.5))\n#plot.mst(shan.mst, \n#         coordinates(shan_sp), \n#         col=\"blue\", \n#         cex.lab=0.7, \n#         cex.circles=0.005, \n#        add=TRUE)\n\n\n\n\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 2 2 2 2 2 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 35 51 52 14 50 54 53 31 29 55 ...\n  .. ..$ edge: num [1:10, 1:3] 51 14 52 50 54 53 51 31 29 52 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 25 7 4 22 17 15 6 24 20 12 ...\n  .. ..$ edge: num [1:17, 1:3] 4 15 17 22 6 24 15 20 7 15 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 39 42 9 19 8 45 49 23 2 28 ...\n  .. ..$ edge: num [1:21, 1:3] 42 19 9 49 23 8 2 45 28 39 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 37 40\n  .. ..$ edge: num [1, 1:3] 37 40 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 11\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 36\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 2 2 2 2 2 3 3 3 5 2 1 1 2 2 2 3 3 2 3 2 3 2 2 2 2 3 1 3 1 2 2 2 1 6 4 3\n[39] 3 4 3 3 3 3 3 3 3 3 3 1 1 1 1 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n11 18 22  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\n#plot(shan_sp, border=gray(.5))\n#plot(clust6, \n#     coordinates(shan_sp), \n#     cex.lab=.7,\n#     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n#     cex.circles=0.005, \n#     add=TRUE)\n\n\n\n\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster objecct.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\n\n\n\n\n\nCode chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\n\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               237.        402.            23.9           134.\n2 2               221.        521.            44.2           246.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5                98.6       499.            74.5           468.\n6 6               124.        224.            38.0           132.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;\n\n\nPersonal reflection:\nThis exercise was enlightening in finding out ways to visualise how the clustering algorithms find split points to split the clusters and allows data scientists to understand the decision points, such as certain behaviours of that group, that led to a machine learning model to split the data for that cluster. The dendogram was especially useful for understanding these. This was especially enlightening when i found other real world applications such as Tracking Viruses through Phylogenetic Trees (https://towardsdatascience.com/hierarchical-clustering-and-its-applications-41c1ad4441a6). However, certain plotting libraries used here such as arulesViz are very outdated and kept throwing errors during the rendering process such as . It could be because not enough developers are continously updating the project to keep it forward compatible with newest technologies such as the macbook pro and latest windows os systems. Thus, more updated interactive plotting libraries R that have more developers working on them continously can be used instead.\n\n\n\n\nhttps://r4gdsa.netlify.app/chap09.html\nhttps://r4gdsa.netlify.app/chap10.html\nFile Management:\n\nhttps://www.geeksforgeeks.org/file-handling-in-r-programming/"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#importing-r-relevant-packages",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#importing-r-relevant-packages",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "https://stackoverflow.com/questions/21833028/error-in-as-doubley-cannot-coerce-type-s4-to-vector-of-type-double\n\npacman::p_load(sp, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally, arulesViz)\n\n\n\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment. We need to filter out the regions “Shan (East)”, “Shan (North)”, “Shan (South)” and this is done with the key word “in”, just like in SQL statements! It uses the global coordinate system WGS 84 and for now it is alright since other data do not use cooridate system for now, so there is no need to synchronise this crs system to any other system for now.\n\nshan_sf &lt;- st_read(dsn = \"../../data/geospatial/week8\", \n                   layer = \"mmr_polbnda_adm3_250k_mimu_1\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week8' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\nLets check out the data type of the variable shan_sf using the useful class function:\n\nclass(shan_sf)\n\n[1] \"sf\"         \"data.frame\"\n\n\nLets preview the shan_sf variable:\n\nhead(shan_sf)\n\nSimple feature collection with 6 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 98.2089 ymin: 19.67151 xmax: 101.17 ymax: 23.48802\nGeodetic CRS:  WGS 84\n            ST ST_PCODE        DT   DT_PCODE        TS  TS_PCODE\n1  Shan (East)   MMR016  Monghsat MMR016D002  Monghsat MMR016006\n2  Shan (East)   MMR016  Monghsat MMR016D002   Mongton MMR016008\n3  Shan (East)   MMR016 Tachileik MMR016D003 Monghpyak MMR016010\n4  Shan (East)   MMR016 Tachileik MMR016D003 Mongyawng MMR016011\n5  Shan (East)   MMR016 Tachileik MMR016D003 Tachileik MMR016009\n6 Shan (North)   MMR015    Hopang MMR015D006    Hopang MMR015021\n                        geometry\n1 MULTIPOLYGON (((99.17944 20...\n2 MULTIPOLYGON (((98.50567 20...\n3 MULTIPOLYGON (((100.0708 21...\n4 MULTIPOLYGON (((101.1053 21...\n5 MULTIPOLYGON (((100.3687 21...\n6 MULTIPOLYGON (((98.88008 23...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"…\n$ ST_PCODE &lt;chr&gt; \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR015\", \"…\n$ DT       &lt;chr&gt; \"Monghsat\", \"Monghsat\", \"Tachileik\", \"Tachileik\", \"Tachileik\"…\n$ DT_PCODE &lt;chr&gt; \"MMR016D002\", \"MMR016D002\", \"MMR016D003\", \"MMR016D003\", \"MMR0…\n$ TS       &lt;chr&gt; \"Monghsat\", \"Mongton\", \"Monghpyak\", \"Mongyawng\", \"Tachileik\",…\n$ TS_PCODE &lt;chr&gt; \"MMR016006\", \"MMR016008\", \"MMR016010\", \"MMR016011\", \"MMR01600…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((99.17944 20..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package. The code chunks used are shown below:\n\nict &lt;- read_csv (\"../../data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar.\nLets run this summary statistics of ict data.frame to get the summary:\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \nhead(ict_derived)\n\n# A tibble: 6 × 17\n  DT_PCODE   DT       TS_PCODE  TS      TT_HOUSEHOLDS RADIO    TV LLPHONE MPHONE\n  &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 MMR014D001 Taunggyi MMR014001 Taungg…         82604 30176 62388    6736  48461\n2 MMR014D001 Taunggyi MMR014002 Nyaung…         42634 13801 23640     810  14973\n3 MMR014D001 Taunggyi MMR014003 Hopong          24728  5083 11272     799   5192\n4 MMR014D001 Taunggyi MMR014004 Hsihse…         32771  8087 16568    1042   4755\n5 MMR014D001 Taunggyi MMR014005 Kalaw           41341 11607 25285    1739  16900\n6 MMR014D001 Taunggyi MMR014006 Pindaya         17544  7324  8862     348   2849\n# ℹ 8 more variables: COMPUTER &lt;dbl&gt;, INTERNET &lt;dbl&gt;, RADIO_PR &lt;dbl&gt;,\n#   TV_PR &lt;dbl&gt;, LLPHONE_PR &lt;dbl&gt;, MPHONE_PR &lt;dbl&gt;, COMPUTER_PR &lt;dbl&gt;,\n#   INTERNET_PR &lt;dbl&gt;\n\n\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"../../data/rds/week8/shan_sf.rds\")\n\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThis is definitely an improvement from the regular scatterplot since one half of the matrix, which will be repeated anyway, is used as shapes to better look at correlations in an intuitive manner to find possible problems of multi-collinearity. Sloped oval circles indicate higher correlation.\nCopy of Handson exercise for faster reference:"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#overview",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#overview",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "By the end of this hands-on exercise, I will be able to:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\nQuestions I have before starting:\n\ncan these clustering tactics be integrated with existing pytorch unsupervised learning methods such as KMeans, etc?\nPytorch is known to speed up processes by maximising usage of existing CPUs, is it possible to take advantage of that in this clustering r package since it involves dealing with many small geographical points?"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#data-being-used",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#data-being-used",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Two data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)Getting Started\nImporting the relevant packages:\nhttps://stackoverflow.com/questions/21833028/error-in-as-doubley-cannot-coerce-type-s4-to-vector-of-type-double\n\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally, arulesViz, sp)\n\n\n\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\nRetrieved from: https://data.humdata.org/dataset/mimu-geonode-myanmar-township-boundaries-mimu?\n\nshan_sf &lt;- st_read(dsn = \"../../data/geospatial/week8\", \n                   layer = \"mmr_polbnda_adm3_250k_mimu_1\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week8' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.17 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE        DT   DT_PCODE        TS  TS_PCODE\n1   Shan (East)   MMR016  Monghsat MMR016D002  Monghsat MMR016006\n2   Shan (East)   MMR016  Monghsat MMR016D002   Mongton MMR016008\n3   Shan (East)   MMR016 Tachileik MMR016D003 Monghpyak MMR016010\n4   Shan (East)   MMR016 Tachileik MMR016D003 Mongyawng MMR016011\n5   Shan (East)   MMR016 Tachileik MMR016D003 Tachileik MMR016009\n6  Shan (North)   MMR015    Hopang MMR015D006    Hopang MMR015021\n7  Shan (North)   MMR015    Hopang MMR015D006   Mongmao MMR015008\n8  Shan (North)   MMR015    Lashio MMR015D001   Mongyai MMR015003\n9  Shan (North)   MMR015    Lashio MMR015D001   Tangyan MMR015004\n10 Shan (North)   MMR015    Matman MMR015D007    Matman MMR015024\n                         geometry\n1  MULTIPOLYGON (((99.17944 20...\n2  MULTIPOLYGON (((98.50567 20...\n3  MULTIPOLYGON (((100.0708 21...\n4  MULTIPOLYGON (((101.1053 21...\n5  MULTIPOLYGON (((100.3687 21...\n6  MULTIPOLYGON (((98.88008 23...\n7  MULTIPOLYGON (((98.94264 23...\n8  MULTIPOLYGON (((98.04246 22...\n9  MULTIPOLYGON (((98.27834 22...\n10 MULTIPOLYGON (((98.9057 22....\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"…\n$ ST_PCODE &lt;chr&gt; \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR015\", \"…\n$ DT       &lt;chr&gt; \"Monghsat\", \"Monghsat\", \"Tachileik\", \"Tachileik\", \"Tachileik\"…\n$ DT_PCODE &lt;chr&gt; \"MMR016D002\", \"MMR016D002\", \"MMR016D003\", \"MMR016D003\", \"MMR0…\n$ TS       &lt;chr&gt; \"Monghsat\", \"Mongton\", \"Monghpyak\", \"Mongyawng\", \"Tachileik\",…\n$ TS_PCODE &lt;chr&gt; \"MMR016006\", \"MMR016008\", \"MMR016010\", \"MMR016011\", \"MMR01600…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((99.17944 20..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict &lt;- read_csv (\"../../data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\n\n\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#exploratory-data-analysis-eda",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#exploratory-data-analysis-eda",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "We can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"../../data/rds/week8/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\nshan_sf &lt;- read_rds(\"../../data/rds/week8/shan_sf.rds\")\n\n\n\n\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\") + tm_fill()\n\n\n\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nCan you identify the differences?"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#correlation-analysis",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#correlation-analysis",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Before we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#hierarchy-cluster-analysis",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#hierarchy-cluster-analysis",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\n2    Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\n3  Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\n4  Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\n5  Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\n6     Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\n7    Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\n8    Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\n9    Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\n10    Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\nMongton     Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang       Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao     Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai     Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan     Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\nMatman       Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat  107.6749 460.1169  34.508769 189.51537   22.817273\nMongton   193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang    127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao   120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai   168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan   223.8632 453.2753  22.594047 105.23021   12.065335\nMatman    244.1230 219.4093   8.438819  45.20796    6.027728\n\n\n\n\n\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n            Monghsat   Mongton Monghpyak Mongyawng Tachileik    Hopang\nMongton    150.98053                                                  \nMonghpyak  356.84917 258.04282                                        \nMongyawng  364.40429 375.22688 285.56475                              \nTachileik  677.09508 608.76740 444.04411 432.10118                    \nHopang     317.64824 273.50305 304.26577 290.51360 403.82035          \nMongmao    247.17708 206.57001 291.88846 296.40789 472.95568  78.29342\nMongyai    127.35225 159.79790 370.01575 445.78964 750.29555 408.73288\nTangyan    144.59626 198.88460 335.26416 377.52279 719.84066 412.22167\nMatman     313.59911 303.04574 470.46845 601.80824 890.12935 573.55355\nNarphan    278.21548 215.97925 448.40651 572.76394 760.29566 397.85908\nPangsang   256.37933 210.77938 315.11651 336.16703 481.31907  92.57672\nMabein     470.48135 425.16902 212.69450 193.49994 365.32538 368.55167\nMongmit    214.20854 192.67961 177.76325 214.21738 529.63213 281.05362\nKutkai     154.32012 107.06341 206.61627 281.03383 568.99109 263.31986\nMuse       663.76026 634.71074 539.43485 422.37358 221.19950 377.44407\nNamhkan    455.10875 414.53594 379.50202 321.21112 295.91660 146.18632\nManton     317.15603 310.20581 502.20840 629.43339 910.23039 577.52046\nNamhsan    169.56962 196.76188 352.70492 430.02019 754.03913 440.51555\nKengtung   383.72138 329.38387 221.47613 203.87199 295.90429 164.29921\nMongkhet   167.98445 223.22828 462.63265 522.91815 820.50164 451.51070\nMongla     429.00536 411.06668 408.03397 315.57550 347.33155 147.02444\nMongping   140.95392 119.86993 354.76537 455.59190 727.08969 379.27212\nMongyang   312.64797 295.60023 358.17599 304.21734 448.79027  69.25859\nPangwaun   343.53898 257.50434 381.95144 475.33116 540.60474 206.98364\nKonkyan    268.25060 248.25265 463.39594 522.38580 730.92980 348.18522\nLaukkaing  626.44910 604.66190 565.84279 454.80044 325.06329 331.67199\nHsipaw     121.78922  90.69766 237.67919 294.70967 576.18780 248.72536\nKyaukme    253.25370 229.28509 217.64419 181.55295 429.15493 154.91633\nNamtu      231.78673 308.71751 346.57799 262.24331 659.56458 408.24516\nNawnghkio  289.83220 225.81118  93.03711 220.61209 470.45533 279.84188\nHseni      331.22632 286.75945 200.26876 173.86004 354.90063 162.80878\nKunlong    202.31862 270.02165 357.44661 240.39800 595.70536 271.34451\nLashio     377.86793 347.11584 262.09281 172.70139 311.95286 170.63913\nPindaya    314.71506 283.35574 221.30579 332.92193 635.51774 443.26362\nYwangan    432.98028 361.23257 367.44835 570.56521 807.44220 596.19312\nLangkho    279.52329 236.70878 200.27496 186.11584 402.33622 134.24847\nMawkmai    275.09705 313.35220 536.71695 620.04321 919.38755 561.24281\nMongnai    125.25968 131.67061 253.26470 275.77546 563.95232 243.00945\nMongpan    283.30992 200.31803 187.85699 275.15989 411.03849 135.62913\nKunhing    165.38834 114.03609 250.74435 295.35984 532.26397 172.96164\nKyethi     190.50609 222.52947 328.16234 387.71518 728.87329 440.48114\nLaihka     158.93517 212.07320 293.22640 211.99976 549.08985 230.78652\nLoilen     118.65144 176.16001 296.99681 261.75211 573.75476 242.89326\nMonghsu    137.24737 107.04894 232.17823 312.85089 605.02113 301.84458\nMongkaing  375.60376 365.50032 568.21089 700.98284 967.14087 626.17673\nNansang    201.92690 199.58124 227.52638 191.11990 486.77266 196.47091\nHopong     100.45714 106.21031 267.95563 326.59925 632.45718 309.77356\nHsihseng   153.49551 194.64317 285.37627 309.51462 658.87060 370.01334\nPinlaung   160.44703 163.42143 222.20020 235.55497 555.01039 265.96924\nKalaw      317.96188 267.87522 167.08436 173.43078 373.64459 185.14704\nLawksawk   352.31496 311.07742 142.31691 179.07229 441.82621 321.16462\nNyaungshwe 286.37238 219.72196 103.97300 218.12104 445.81335 247.19891\nPekon      225.64279 208.14888 190.93173 248.43910 573.39528 336.38582\nTaunggyi   562.88102 508.40925 334.17439 287.73864 150.84117 329.95252\n             Mongmao   Mongyai   Tangyan    Matman   Narphan  Pangsang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai    335.61300                                                  \nTangyan    347.14183 109.08506                                        \nMatman     501.59903 186.95158 242.78233                              \nNarphan    331.42618 248.82845 348.84991 312.05193                    \nPangsang    57.60801 343.30638 364.76893 506.29940 316.30314          \nMabein     384.91867 516.40426 448.59948 637.53975 630.34312 418.54016\nMongmit    242.54541 256.72744 195.92520 401.25041 406.15714 272.67383\nKutkai     204.69232 188.94166 166.61820 340.86349 314.27683 228.33583\nMuse       451.82530 763.91399 736.93741 929.11283 770.40234 460.24292\nNamhkan    223.32205 550.62819 542.64078 715.42102 536.85519 231.38484\nManton     503.79786 195.59882 271.82672  59.52318 280.26395 504.75214\nNamhsan    371.71448  77.35900  63.67613 180.09747 316.54695 385.65526\nKengtung   207.58055 460.39706 429.95076 613.01033 505.40025 229.85484\nMongkhet   375.35820 104.98924 201.49393 203.02855 217.28718 375.58139\nMongla     216.24705 535.28615 526.80849 708.17595 531.46949 217.88123\nMongping   305.57166  65.38727 161.67411 201.65224 188.64567 308.33123\nMongyang    91.06281 414.31237 421.06366 585.61776 401.39475 108.37735\nPangwaun   187.40057 394.07696 447.05580 523.43600 264.64997 157.48757\nKonkyan    281.87425 287.87384 367.46064 392.40306 158.82353 274.81900\nLaukkaing  404.00848 732.68347 722.40954 903.72094 708.82887 408.04016\nHsipaw     185.99483 177.33790 167.69794 344.45451 295.40170 205.04337\nKyaukme    146.09228 339.27780 306.78359 505.52285 420.30003 175.35273\nNamtu      365.03882 278.02761 178.69483 416.65397 494.36143 392.97391\nNawnghkio  257.76465 319.57938 269.07880 444.05061 435.59661 287.10769\nHseni      184.67099 408.23212 373.07575 564.64051 474.12297 214.66375\nKunlong    224.43391 299.36066 268.07983 468.27436 413.07823 258.49342\nLashio     214.23677 466.36472 429.84475 628.11049 525.63854 236.72516\nPindaya    402.21719 287.41816 208.43740 354.39039 474.50209 428.24958\nYwangan    542.85957 333.12853 324.77002 255.22031 452.95769 556.82263\nLangkho    134.50170 358.95672 332.02048 518.86151 420.65204 167.65920\nMawkmai    485.52853 178.70499 262.66006 147.83545 273.75350 484.14757\nMongnai    188.29603 203.23607 180.37471 376.33870 329.31700 204.25746\nMongpan    131.59966 346.39710 340.39128 494.81014 371.13393 140.23910\nKunhing    103.91040 238.99570 249.74161 403.66587 281.62645 123.18870\nKyethi     377.89657 137.79420  47.79331 233.83079 374.90376 396.89963\nLaihka     185.99082 264.13364 224.29176 443.25453 392.32592 214.19291\nLoilen     190.26490 224.79239 196.60826 406.56282 354.79137 207.94433\nMonghsu    242.43599 154.86049 127.42203 308.13805 311.92379 260.52971\nMongkaing  552.31959 262.84016 348.56123 135.51424 285.65085 548.40662\nNansang    164.99494 288.55962 249.70235 458.06573 398.13308 193.36162\nHopong     244.16253 124.62791 106.82328 291.84351 294.40441 261.51075\nHsihseng   311.98001 162.27126  70.27241 304.02806 377.52977 335.52974\nPinlaung   217.58854 220.56339 169.50567 382.40610 371.26895 244.47146\nKalaw      195.18913 386.74701 348.06617 537.63884 463.53759 224.03998\nLawksawk   314.64777 391.26989 323.14701 515.39711 523.69580 345.91486\nNyaungshwe 230.45003 327.13541 284.14692 460.91883 427.94086 257.77823\nPekon      293.70625 242.52301 167.79937 368.25761 416.84901 321.81214\nTaunggyi   387.33906 635.94105 592.65262 778.45810 684.20905 405.59730\n              Mabein   Mongmit    Kutkai      Muse   Namhkan    Manton\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit    263.37099                                                  \nKutkai     340.55064  97.61092                                        \nMuse       453.27410 563.01629 592.90743                              \nNamhkan    379.56035 386.02794 392.48568 238.67060                    \nManton     674.01120 430.64070 361.82684 941.49778 721.86149          \nNamhsan    488.33873 237.78494 191.32762 778.52971 576.42717 210.48485\nKengtung   219.47071 246.45691 279.19573 330.08211 175.63015 631.99123\nMongkhet   610.30557 349.45980 273.91673 816.44931 596.19944 181.33894\nMongla     406.09124 384.30076 388.40984 256.80556  77.21355 712.51416\nMongping   518.16310 265.12574 182.75266 744.44948 523.74815 200.48082\nMongyang   411.88352 309.51302 285.33223 389.59919 167.72448 585.70558\nPangwaun   523.44632 381.51246 321.80465 541.97887 310.44067 510.79265\nKonkyan    613.51206 403.39082 310.60810 704.86973 481.59596 366.66876\nLaukkaing  520.67373 568.27732 580.38112 149.26996 196.46063 907.38406\nHsipaw     366.42787 118.18050  51.46282 591.03355 382.79302 359.60008\nKyaukme    264.88283 144.02475 170.93318 434.75768 247.81990 522.86003\nNamtu      366.16094 179.62251 225.28268 659.16927 506.32466 448.58230\nNawnghkio  204.63154  89.07103 147.44053 533.68806 367.33575 475.77296\nHseni      213.61240 189.37188 229.37894 381.30567 212.11323 584.63341\nKunlong    396.61508 224.12169 204.54010 547.24297 375.73885 479.76855\nLashio     231.28227 251.29457 289.82513 313.15288 173.27153 646.66493\nPindaya    313.45776 171.86828 212.81775 704.11252 543.81859 402.42888\nYwangan    529.14689 381.88259 360.11861 899.44137 714.43173 306.16379\nLangkho    253.84371 164.26299 180.51419 413.64173 224.40029 535.95620\nMawkmai    693.24602 434.92968 364.95519 926.93007 706.47792 109.08779\nMongnai    358.86053 115.86190  91.15307 571.97975 370.05669 391.54062\nMongpan    301.52942 193.32063 185.18173 447.49969 240.34131 507.96808\nKunhing    375.82140 173.50424 108.84990 533.00162 314.92119 410.49230\nKyethi     442.07679 202.92551 184.23422 757.16745 567.86202 272.03299\nLaihka     345.00222 141.87227 144.67198 526.65211 342.43665 458.30232\nLoilen     375.06406 145.48666 131.56529 560.43400 364.90647 419.06087\nMonghsu    367.19820 109.15790  62.60859 633.21624 431.32637 330.76503\nMongkaing  747.17454 503.61965 428.96133 995.66496 771.39688  81.75337\nNansang    287.92364 104.91839 130.04549 489.35308 302.89487 476.55544\nHopong     398.00917 136.93111  73.45899 648.68011 444.13246 310.58885\nHsihseng   381.20187 131.49728 128.21054 677.66886 492.09476 334.87758\nPinlaung   312.66966  57.46286  78.07733 571.58335 382.78835 405.83081\nKalaw      198.14085 160.05997 204.93018 412.46033 246.39577 560.16577\nLawksawk   130.36525 140.11550 224.64646 510.13288 379.41126 551.13000\nNyaungshwe 210.21337  99.38590 152.15482 505.88581 333.32428 488.79874\nPekon      282.26877  59.61977 114.98048 614.56144 442.77120 403.82131\nTaunggyi   226.24011 399.84278 450.33382 250.81471 257.29147 803.08034\n             Namhsan  Kengtung  Mongkhet    Mongla  Mongping  Mongyang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung   466.20497                                                  \nMongkhet   170.90848 531.35998                                        \nMongla     564.02740 202.45004 574.40292                              \nMongping   130.23777 442.80821 113.80917 512.61580                    \nMongyang   450.97869 217.08047 445.40621 146.66661 387.80686          \nPangwaun   448.58030 337.48335 407.02947 319.18643 340.37881 225.25026\nKonkyan    352.20115 474.82621 254.24424 468.09747 242.02901 329.39338\nLaukkaing  760.45960 351.48520 769.06406 202.55831 708.13447 326.19219\nHsipaw     194.47928 284.08582 253.80950 373.47509 168.92101 267.10497\nKyaukme    347.85944 136.23356 409.03553 241.58966 330.28984 188.59489\nNamtu      240.95555 385.33554 355.99713 483.49434 321.66441 413.26052\nNawnghkio  299.74967 208.29647 414.10280 381.40808 316.14719 323.32123\nHseni      411.96125  66.12817 481.88406 226.82048 395.58453 210.19929\nKunlong    310.40560 317.14187 341.68641 346.46200 309.05385 247.22785\nLashio     472.04024  59.85893 534.44463 179.95877 454.52548 209.33700\nPindaya    228.41073 385.68322 391.74783 549.42389 310.64850 475.93982\nYwangan    286.16305 573.23173 408.97731 728.16301 337.94020 630.71590\nLangkho    368.20978 107.16213 428.08061 229.01675 343.96455 175.35413\nMawkmai    215.19289 632.54638 115.58388 686.88950 194.31049 558.83162\nMongnai    218.10003 272.28711 275.76855 354.10985 202.99615 260.39387\nMongpan    364.77086 142.21554 412.17123 253.20001 318.47482 194.93467\nKunhing    270.79121 245.95083 292.49814 306.47566 212.59619 188.89405\nKyethi      68.67929 444.26274 233.25039 556.02500 187.43974 453.86726\nLaihka     273.79672 258.23950 324.97428 315.93218 272.82761 229.71502\nLoilen     242.15271 282.22935 284.76895 338.67408 231.99959 246.76592\nMonghsu    153.22576 316.91914 247.73318 424.51868 158.90478 323.95988\nMongkaing  288.66231 692.74693 222.60577 761.48327 257.18572 631.91325\nNansang    294.16284 193.67980 360.99219 289.45119 287.36626 218.49285\nHopong     132.70541 340.47382 212.99485 432.31105 134.00139 323.35704\nHsihseng   125.74240 370.72441 256.70338 478.66210 199.64389 382.59743\nPinlaung   214.33352 263.48638 305.86058 372.59678 229.75261 286.03834\nKalaw      385.88676  88.29335 465.52013 260.26411 375.64739 233.56349\nLawksawk   362.84062 209.38215 487.41102 393.18472 396.47081 363.37684\nNyaungshwe 315.91750 177.75714 417.08639 347.60273 319.32583 294.29500\nPekon      207.16559 297.67761 342.08722 441.20998 259.68288 363.58788\nTaunggyi   631.49232 186.28225 712.80752 297.09863 621.53039 374.58247\n            Pangwaun   Konkyan Laukkaing    Hsipaw   Kyaukme     Namtu\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan    263.97576                                                  \nLaukkaing  470.63605 635.92043                                        \nHsipaw     298.12447 296.74316 569.06099                              \nKyaukme    308.31407 393.79911 428.74978 163.95741                    \nNamtu      517.03554 478.37690 664.06286 229.44658 270.87277          \nNawnghkio  381.67478 439.34272 552.65554 176.09570 157.04230 257.52713\nHseni      330.70182 448.84563 391.74585 231.48538  81.20593 327.41448\nKunlong    392.45403 329.11433 521.88657 205.10051 215.63037 233.60474\nLashio     362.45608 485.51312 334.65738 290.86435 129.95255 365.88437\nPindaya    512.13162 500.86933 726.85355 245.98884 311.01487 225.40822\nYwangan    580.13146 528.12533 908.82520 388.63147 505.89191 444.66868\nLangkho    295.38434 386.95022 410.41270 183.05109  51.67279 305.03473\nMawkmai    500.68857 339.01411 882.51110 351.34601 512.02846 427.95451\nMongnai    312.13429 328.82831 551.56800  52.68195 142.45669 209.35473\nMongpan    232.52209 365.87588 435.58047 179.52054 110.37831 352.91394\nKunhing    229.09986 253.74202 500.41640  90.77517 145.00266 296.43996\nKyethi     476.62610 400.10989 749.99415 195.17677 328.14177 186.90932\nLaihka     351.78203 351.75354 507.39700 128.42987 128.24979 185.86794\nLoilen     331.69981 334.19820 535.57527  98.04789 146.92675 194.24075\nMonghsu    343.38498 331.72187 619.01766  58.55724 200.77712 209.64684\nMongkaing  536.95736 380.92091 954.11795 423.77868 586.05094 525.04057\nNansang    326.12960 374.70456 480.60074 120.24428  60.32773 217.61884\nHopong     346.00673 304.49287 628.48557  62.86179 218.84211 206.82668\nHsihseng   433.06326 383.49700 670.74564 136.54610 250.27059 131.89940\nPinlaung   356.37963 365.44693 563.81750  76.55260 139.67966 170.04533\nKalaw      338.35194 444.75859 427.77791 212.36711  79.42225 307.27427\nLawksawk   453.02765 520.31264 548.83928 249.35081 186.29066 260.95300\nNyaungshwe 352.92324 432.35040 520.24345 169.92664 126.50414 271.41464\nPekon      423.81347 421.48797 624.82399 145.37542 202.12206 165.02707\nTaunggyi   497.61245 650.56905 345.98041 462.31183 312.60547 518.72748\n           Nawnghkio     Hseni   Kunlong    Lashio   Pindaya   Ywangan\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni      164.05304                                                  \nKunlong    285.04608 276.19175                                        \nLashio     230.55346  79.41836 295.23103                              \nPindaya    180.64047 337.98982 355.47066 398.98167                    \nYwangan    377.87702 534.44679 531.63089 602.17475 257.31610          \nLangkho    156.51662  66.66133 224.52741 115.18145 323.28133 507.78892\nMawkmai    495.15047 582.53670 446.53763 638.60773 437.99577 397.03752\nMongnai    182.21245 216.81639 202.92529 270.86983 258.49346 422.71934\nMongpan    172.84425 120.66550 288.03320 172.33279 335.72896 483.68125\nKunhing    206.15773 206.47448 193.77551 255.10832 318.23811 449.67218\nKyethi     267.21607 388.33498 298.55859 447.10266 175.54012 287.29358\nLaihka     211.88187 204.49010 122.68682 238.64533 298.61288 491.83321\nLoilen     219.26405 227.10984 166.53599 268.92310 293.61143 469.51621\nMonghsu    170.09168 262.28462 239.89665 325.71557 198.35391 340.42789\nMongkaing  546.69447 648.04408 539.91284 708.65819 481.71125 364.98429\nNansang    151.13185 136.45492 183.01388 184.47950 275.44246 472.77637\nHopong     204.88286 286.41193 219.06817 345.31042 223.06050 352.85844\nHsihseng   209.88026 312.74375 231.85967 369.00833 172.00796 342.91035\nPinlaung   139.27495 204.47572 194.76257 262.51735 208.63519 400.05492\nKalaw      127.74787  38.52842 273.01375 106.69059 302.51785 499.53297\nLawksawk    90.82891 171.50398 318.30406 220.75270 204.32952 432.16535\nNyaungshwe  43.26545 130.86310 285.13095 201.58191 216.52463 407.11649\nPekon      113.15370 243.98001 249.36301 303.80011 117.91580 336.50410\nTaunggyi   344.79200 238.19389 471.29032 195.14541 503.75471 697.98323\n             Langkho   Mawkmai   Mongnai   Mongpan   Kunhing    Kyethi\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai    531.08019                                                  \nMongnai    174.67678 374.50873                                        \nMongpan     94.98486 509.99632 178.09554                              \nKunhing    146.38284 398.43973 110.55197 137.85278                    \nKyethi     350.91512 278.85535 210.50453 358.89620 278.95182          \nLaihka     160.94435 429.96554 100.53457 210.76951 142.03682 255.83275\nLoilen     184.10672 388.73386  58.41263 207.25000 130.39336 232.32965\nMonghsu    221.84918 332.07962  84.11238 216.25326 146.78891 146.61572\nMongkaing  597.42714 133.29995 456.00842 563.56780 465.03971 352.06533\nNansang     99.39859 462.41938  92.79567 144.77393 128.20940 273.02385\nHopong     239.63685 302.84362  91.53795 239.43845 145.15617 136.49038\nHsihseng   276.27441 329.29477 142.36728 295.87811 220.15490  84.04049\nPinlaung   168.44228 398.11227  64.52387 192.78316 141.58836 189.47065\nKalaw       67.19580 562.59200 200.34668 114.69105 197.63683 360.17247\nLawksawk   190.30257 567.52693 241.71260 228.54223 278.68953 317.74604\nNyaungshwe 128.26577 502.99026 169.63695 137.29734 189.97131 288.06872\nPekon      219.21623 416.00669 151.60031 243.30037 213.46379 162.43575\nTaunggyi   288.27478 810.74692 448.55282 319.81385 429.98509 599.57407\n              Laihka    Loilen   Monghsu Mongkaing   Nansang    Hopong\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai                                                               \nMongnai                                                               \nMongpan                                                               \nKunhing                                                               \nKyethi                                                                \nLaihka                                                                \nLoilen      59.69478                                                  \nMonghsu    163.28926 131.55208                                        \nMongkaing  522.96309 482.18190 400.71816                              \nNansang     78.78999  94.23028 153.59962 542.16609                    \nHopong     157.48857 124.74445  43.40665 379.37916 167.66291          \nHsihseng   175.89761 158.84853  97.82470 411.59788 193.53779  91.65458\nPinlaung   101.10150  91.56527  80.86834 476.29056  85.49572  98.14855\nKalaw      197.34633 217.19877 237.34578 625.24500 124.30500 264.16294\nLawksawk   246.74469 265.29318 242.04063 625.18712 188.78869 274.91604\nNyaungshwe 201.71653 206.40432 173.82799 557.32112 131.18943 209.32532\nPekon      182.23667 181.94596 113.84636 480.23965 160.37607 138.86577\nTaunggyi   425.36916 455.91617 486.91951 866.21117 365.04897 513.76415\n            Hsihseng  Pinlaung     Kalaw  Lawksawk Nyaungshwe     Pekon\nMongton                                                                \nMonghpyak                                                              \nMongyawng                                                              \nTachileik                                                              \nHopang                                                                 \nMongmao                                                                \nMongyai                                                                \nTangyan                                                                \nMatman                                                                 \nNarphan                                                                \nPangsang                                                               \nMabein                                                                 \nMongmit                                                                \nKutkai                                                                 \nMuse                                                                   \nNamhkan                                                                \nManton                                                                 \nNamhsan                                                                \nKengtung                                                               \nMongkhet                                                               \nMongla                                                                 \nMongping                                                               \nMongyang                                                               \nPangwaun                                                               \nKonkyan                                                                \nLaukkaing                                                              \nHsipaw                                                                 \nKyaukme                                                                \nNamtu                                                                  \nNawnghkio                                                              \nHseni                                                                  \nKunlong                                                                \nLashio                                                                 \nPindaya                                                                \nYwangan                                                                \nLangkho                                                                \nMawkmai                                                                \nMongnai                                                                \nMongpan                                                                \nKunhing                                                                \nKyethi                                                                 \nLaihka                                                                 \nLoilen                                                                 \nMonghsu                                                                \nMongkaing                                                              \nNansang                                                                \nHopong                                                                 \nHsihseng                                                               \nPinlaung   111.61846                                                   \nKalaw      287.11074 181.96406                                         \nLawksawk   257.11202 192.57320 140.01101                               \nNyaungshwe 225.80242 138.12050  95.66782 104.17830                     \nPekon      105.30573  94.61225 211.91531 157.51129  139.31874          \nTaunggyi   528.14240 429.54386 252.26066 304.96838  325.09619 440.66133\n\n\n\n\n\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\nPERSONAL OBSERVATION: SAME AS KMEANS Clustering –&gt; elbow method. Most important overarching concept concept: Bias variance tradeoff!\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\nPERSONAL NOTE: Same as a migration patterns study I found online previously! Used to find which point in TIME different races from other countries mixed with racial groups in India such as the Iranian farmers.\n\n\n\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\nRADIO_PRTV_PRLLPHONE_PRMPHONE_PRCOMPUTER_PRNarphanPangwaunMongpanNansangKyaukmeKalawHseniLangkhoKunhingLaihkaMonghsatLoilenMongnaiMongtonHsipawHopongMonghsuPinlaungMongmitPekonKutkaiNamtuHsihsengKyethiTangyanNamhsanMongyaiMongpingMongkhetMawkmaiMongkaingMantonMatmanYwanganPindayaLawksawkNyaungshweNawnghkioMonghpyakMabeinMongyawngKunlongKonkyanMongyangMongmaoHopangNamhkanLaukkaingMonglaPangsangKengtungLashioTaunggyiTachileikMuse\n0.000.250.500.751.00Geographic Segmentation of Shan State by ICT indicatorsICT IndicatorsTownships of Shan State\n\n\n\n\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#spatially-constrained-clustering-skater-approach",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#spatially-constrained-clustering-skater-approach",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\n#plot(shan_sp, \n#     border=grey(.5))\n#plot(shan.nb, \n#     coordinates(shan_sp), \n#     col=\"blue\", \n#     add=TRUE)\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn      S0       S1        S2\nB 55 3025 76338.3 58090482 524376272\n\n\n\n\n\n\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   50  94.61225\n[2,]   50   53 138.12050\n[3,]   53   51  95.66782\n[4,]   51   52 140.01101\n[5,]   52   31  90.82891\n[6,]   31   29 157.04230\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\n#plot(shan_sp, border=gray(.5))\n#plot.mst(shan.mst, \n#         coordinates(shan_sp), \n#         col=\"blue\", \n#         cex.lab=0.7, \n#         cex.circles=0.005, \n#        add=TRUE)\n\n\n\n\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 2 2 2 2 2 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 35 51 52 14 50 54 53 31 29 55 ...\n  .. ..$ edge: num [1:10, 1:3] 51 14 52 50 54 53 51 31 29 52 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 25 7 4 22 17 15 6 24 20 12 ...\n  .. ..$ edge: num [1:17, 1:3] 4 15 17 22 6 24 15 20 7 15 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 39 42 9 19 8 45 49 23 2 28 ...\n  .. ..$ edge: num [1:21, 1:3] 42 19 9 49 23 8 2 45 28 39 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 37 40\n  .. ..$ edge: num [1, 1:3] 37 40 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 11\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 36\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 2 2 2 2 2 3 3 3 5 2 1 1 2 2 2 3 3 2 3 2 3 2 2 2 2 3 1 3 1 2 2 2 1 6 4 3\n[39] 3 4 3 3 3 3 3 3 3 3 3 1 1 1 1 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n11 18 22  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\n#plot(shan_sp, border=gray(.5))\n#plot(clust6, \n#     coordinates(shan_sp), \n#     cex.lab=.7,\n#     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n#     cex.circles=0.005, \n#     add=TRUE)\n\n\n\n\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#spatially-constrained-clustering-clustgeo-method",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#spatially-constrained-clustering-clustgeo-method",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster objecct.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nWe can now plot the map of the newly delineated spatially constrained clusters."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#visual-interpretation-of-clusters",
    "href": "In-class_Ex/In-class_Ex08/Inclass_Ex08.html#visual-interpretation-of-clusters",
    "title": "In-Class Exercise 8: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Code chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\n\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               237.        402.            23.9           134.\n2 2               221.        521.            44.2           246.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5                98.6       499.            74.5           468.\n6 6               124.        224.            38.0           132.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;\n\n\nPersonal reflection:\nThis exercise was enlightening in finding out ways to visualise how the clustering algorithms find split points to split the clusters and allows data scientists to understand the decision points, such as certain behaviours of that group, that led to a machine learning model to split the data for that cluster. The dendogram was especially useful for understanding these. This was especially enlightening when i found other real world applications such as Tracking Viruses through Phylogenetic Trees (https://towardsdatascience.com/hierarchical-clustering-and-its-applications-41c1ad4441a6). However, certain plotting libraries used here such as arulesViz are very outdated and kept throwing errors during the rendering process such as . It could be because not enough developers are continously updating the project to keep it forward compatible with newest technologies such as the macbook pro and latest windows os systems. Thus, more updated interactive plotting libraries R that have more developers working on them continously can be used instead.\n\n\n\n\nhttps://r4gdsa.netlify.app/chap09.html\nhttps://r4gdsa.netlify.app/chap10.html\nFile Management:\n\nhttps://www.geeksforgeeks.org/file-handling-in-r-programming/"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "https://stackoverflow.com/questions/21833028/error-in-as-doubley-cannot-coerce-type-s4-to-vector-of-type-double\n\npacman::p_load(sp, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally, arulesViz)\n\n\n\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment. We need to filter out the regions “Shan (East)”, “Shan (North)”, “Shan (South)” and this is done with the key word “in”, just like in SQL statements! It uses the global coordinate system WGS 84 and for now it is alright since other data do not use cooridate system for now, so there is no need to synchronise this crs system to any other system for now.\n\nshan_sf &lt;- st_read(dsn = \"../../data/geospatial/week8\", \n                   layer = \"mmr_polbnda_adm3_250k_mimu_1\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week8' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\nLets check out the data type of the variable shan_sf using the useful class function:\n\nclass(shan_sf)\n\n[1] \"sf\"         \"data.frame\"\n\n\nLets preview the shan_sf variable:\n\nhead(shan_sf)\n\nSimple feature collection with 6 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 98.2089 ymin: 19.67151 xmax: 101.17 ymax: 23.48802\nGeodetic CRS:  WGS 84\n            ST ST_PCODE        DT   DT_PCODE        TS  TS_PCODE\n1  Shan (East)   MMR016  Monghsat MMR016D002  Monghsat MMR016006\n2  Shan (East)   MMR016  Monghsat MMR016D002   Mongton MMR016008\n3  Shan (East)   MMR016 Tachileik MMR016D003 Monghpyak MMR016010\n4  Shan (East)   MMR016 Tachileik MMR016D003 Mongyawng MMR016011\n5  Shan (East)   MMR016 Tachileik MMR016D003 Tachileik MMR016009\n6 Shan (North)   MMR015    Hopang MMR015D006    Hopang MMR015021\n                        geometry\n1 MULTIPOLYGON (((99.17944 20...\n2 MULTIPOLYGON (((98.50567 20...\n3 MULTIPOLYGON (((100.0708 21...\n4 MULTIPOLYGON (((101.1053 21...\n5 MULTIPOLYGON (((100.3687 21...\n6 MULTIPOLYGON (((98.88008 23...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"…\n$ ST_PCODE &lt;chr&gt; \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR015\", \"…\n$ DT       &lt;chr&gt; \"Monghsat\", \"Monghsat\", \"Tachileik\", \"Tachileik\", \"Tachileik\"…\n$ DT_PCODE &lt;chr&gt; \"MMR016D002\", \"MMR016D002\", \"MMR016D003\", \"MMR016D003\", \"MMR0…\n$ TS       &lt;chr&gt; \"Monghsat\", \"Mongton\", \"Monghpyak\", \"Mongyawng\", \"Tachileik\",…\n$ TS_PCODE &lt;chr&gt; \"MMR016006\", \"MMR016008\", \"MMR016010\", \"MMR016011\", \"MMR01600…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((99.17944 20..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package. The code chunks used are shown below:\n\nict &lt;- read_csv (\"../../data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar.\nLets run this summary statistics of ict data.frame to get the summary:\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \nhead(ict_derived)\n\n# A tibble: 6 × 17\n  DT_PCODE   DT       TS_PCODE  TS      TT_HOUSEHOLDS RADIO    TV LLPHONE MPHONE\n  &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 MMR014D001 Taunggyi MMR014001 Taungg…         82604 30176 62388    6736  48461\n2 MMR014D001 Taunggyi MMR014002 Nyaung…         42634 13801 23640     810  14973\n3 MMR014D001 Taunggyi MMR014003 Hopong          24728  5083 11272     799   5192\n4 MMR014D001 Taunggyi MMR014004 Hsihse…         32771  8087 16568    1042   4755\n5 MMR014D001 Taunggyi MMR014005 Kalaw           41341 11607 25285    1739  16900\n6 MMR014D001 Taunggyi MMR014006 Pindaya         17544  7324  8862     348   2849\n# ℹ 8 more variables: COMPUTER &lt;dbl&gt;, INTERNET &lt;dbl&gt;, RADIO_PR &lt;dbl&gt;,\n#   TV_PR &lt;dbl&gt;, LLPHONE_PR &lt;dbl&gt;, MPHONE_PR &lt;dbl&gt;, COMPUTER_PR &lt;dbl&gt;,\n#   INTERNET_PR &lt;dbl&gt;\n\n\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"../../data/rds/week8/shan_sf.rds\")\n\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThis is definitely an improvement from the regular scatterplot since one half of the matrix, which will be repeated anyway, is used as shapes to better look at correlations in an intuitive manner to find possible problems of multi-collinearity. Sloped oval circles indicate higher correlation.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\n2    Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\n3  Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\n4  Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\n5  Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\n6     Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\n7    Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\n8    Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\n9    Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\n10    Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\nMongton     Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang       Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao     Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai     Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan     Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\nMatman       Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the row number has been replaced into the township name.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat  107.6749 460.1169  34.508769 189.51537   22.817273\nMongton   193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang    127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao   120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai   168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan   223.8632 453.2753  22.594047 105.23021   12.065335\nMatman    244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nCalculating proximity with euclidean distance:\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\nproxmat\n\n            Monghsat   Mongton Monghpyak Mongyawng Tachileik    Hopang\nMongton    150.98053                                                  \nMonghpyak  356.84917 258.04282                                        \nMongyawng  364.40429 375.22688 285.56475                              \nTachileik  677.09508 608.76740 444.04411 432.10118                    \nHopang     317.64824 273.50305 304.26577 290.51360 403.82035          \nMongmao    247.17708 206.57001 291.88846 296.40789 472.95568  78.29342\nMongyai    127.35225 159.79790 370.01575 445.78964 750.29555 408.73288\nTangyan    144.59626 198.88460 335.26416 377.52279 719.84066 412.22167\nMatman     313.59911 303.04574 470.46845 601.80824 890.12935 573.55355\nNarphan    278.21548 215.97925 448.40651 572.76394 760.29566 397.85908\nPangsang   256.37933 210.77938 315.11651 336.16703 481.31907  92.57672\nMabein     470.48135 425.16902 212.69450 193.49994 365.32538 368.55167\nMongmit    214.20854 192.67961 177.76325 214.21738 529.63213 281.05362\nKutkai     154.32012 107.06341 206.61627 281.03383 568.99109 263.31986\nMuse       663.76026 634.71074 539.43485 422.37358 221.19950 377.44407\nNamhkan    455.10875 414.53594 379.50202 321.21112 295.91660 146.18632\nManton     317.15603 310.20581 502.20840 629.43339 910.23039 577.52046\nNamhsan    169.56962 196.76188 352.70492 430.02019 754.03913 440.51555\nKengtung   383.72138 329.38387 221.47613 203.87199 295.90429 164.29921\nMongkhet   167.98445 223.22828 462.63265 522.91815 820.50164 451.51070\nMongla     429.00536 411.06668 408.03397 315.57550 347.33155 147.02444\nMongping   140.95392 119.86993 354.76537 455.59190 727.08969 379.27212\nMongyang   312.64797 295.60023 358.17599 304.21734 448.79027  69.25859\nPangwaun   343.53898 257.50434 381.95144 475.33116 540.60474 206.98364\nKonkyan    268.25060 248.25265 463.39594 522.38580 730.92980 348.18522\nLaukkaing  626.44910 604.66190 565.84279 454.80044 325.06329 331.67199\nHsipaw     121.78922  90.69766 237.67919 294.70967 576.18780 248.72536\nKyaukme    253.25370 229.28509 217.64419 181.55295 429.15493 154.91633\nNamtu      231.78673 308.71751 346.57799 262.24331 659.56458 408.24516\nNawnghkio  289.83220 225.81118  93.03711 220.61209 470.45533 279.84188\nHseni      331.22632 286.75945 200.26876 173.86004 354.90063 162.80878\nKunlong    202.31862 270.02165 357.44661 240.39800 595.70536 271.34451\nLashio     377.86793 347.11584 262.09281 172.70139 311.95286 170.63913\nPindaya    314.71506 283.35574 221.30579 332.92193 635.51774 443.26362\nYwangan    432.98028 361.23257 367.44835 570.56521 807.44220 596.19312\nLangkho    279.52329 236.70878 200.27496 186.11584 402.33622 134.24847\nMawkmai    275.09705 313.35220 536.71695 620.04321 919.38755 561.24281\nMongnai    125.25968 131.67061 253.26470 275.77546 563.95232 243.00945\nMongpan    283.30992 200.31803 187.85699 275.15989 411.03849 135.62913\nKunhing    165.38834 114.03609 250.74435 295.35984 532.26397 172.96164\nKyethi     190.50609 222.52947 328.16234 387.71518 728.87329 440.48114\nLaihka     158.93517 212.07320 293.22640 211.99976 549.08985 230.78652\nLoilen     118.65144 176.16001 296.99681 261.75211 573.75476 242.89326\nMonghsu    137.24737 107.04894 232.17823 312.85089 605.02113 301.84458\nMongkaing  375.60376 365.50032 568.21089 700.98284 967.14087 626.17673\nNansang    201.92690 199.58124 227.52638 191.11990 486.77266 196.47091\nHopong     100.45714 106.21031 267.95563 326.59925 632.45718 309.77356\nHsihseng   153.49551 194.64317 285.37627 309.51462 658.87060 370.01334\nPinlaung   160.44703 163.42143 222.20020 235.55497 555.01039 265.96924\nKalaw      317.96188 267.87522 167.08436 173.43078 373.64459 185.14704\nLawksawk   352.31496 311.07742 142.31691 179.07229 441.82621 321.16462\nNyaungshwe 286.37238 219.72196 103.97300 218.12104 445.81335 247.19891\nPekon      225.64279 208.14888 190.93173 248.43910 573.39528 336.38582\nTaunggyi   562.88102 508.40925 334.17439 287.73864 150.84117 329.95252\n             Mongmao   Mongyai   Tangyan    Matman   Narphan  Pangsang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai    335.61300                                                  \nTangyan    347.14183 109.08506                                        \nMatman     501.59903 186.95158 242.78233                              \nNarphan    331.42618 248.82845 348.84991 312.05193                    \nPangsang    57.60801 343.30638 364.76893 506.29940 316.30314          \nMabein     384.91867 516.40426 448.59948 637.53975 630.34312 418.54016\nMongmit    242.54541 256.72744 195.92520 401.25041 406.15714 272.67383\nKutkai     204.69232 188.94166 166.61820 340.86349 314.27683 228.33583\nMuse       451.82530 763.91399 736.93741 929.11283 770.40234 460.24292\nNamhkan    223.32205 550.62819 542.64078 715.42102 536.85519 231.38484\nManton     503.79786 195.59882 271.82672  59.52318 280.26395 504.75214\nNamhsan    371.71448  77.35900  63.67613 180.09747 316.54695 385.65526\nKengtung   207.58055 460.39706 429.95076 613.01033 505.40025 229.85484\nMongkhet   375.35820 104.98924 201.49393 203.02855 217.28718 375.58139\nMongla     216.24705 535.28615 526.80849 708.17595 531.46949 217.88123\nMongping   305.57166  65.38727 161.67411 201.65224 188.64567 308.33123\nMongyang    91.06281 414.31237 421.06366 585.61776 401.39475 108.37735\nPangwaun   187.40057 394.07696 447.05580 523.43600 264.64997 157.48757\nKonkyan    281.87425 287.87384 367.46064 392.40306 158.82353 274.81900\nLaukkaing  404.00848 732.68347 722.40954 903.72094 708.82887 408.04016\nHsipaw     185.99483 177.33790 167.69794 344.45451 295.40170 205.04337\nKyaukme    146.09228 339.27780 306.78359 505.52285 420.30003 175.35273\nNamtu      365.03882 278.02761 178.69483 416.65397 494.36143 392.97391\nNawnghkio  257.76465 319.57938 269.07880 444.05061 435.59661 287.10769\nHseni      184.67099 408.23212 373.07575 564.64051 474.12297 214.66375\nKunlong    224.43391 299.36066 268.07983 468.27436 413.07823 258.49342\nLashio     214.23677 466.36472 429.84475 628.11049 525.63854 236.72516\nPindaya    402.21719 287.41816 208.43740 354.39039 474.50209 428.24958\nYwangan    542.85957 333.12853 324.77002 255.22031 452.95769 556.82263\nLangkho    134.50170 358.95672 332.02048 518.86151 420.65204 167.65920\nMawkmai    485.52853 178.70499 262.66006 147.83545 273.75350 484.14757\nMongnai    188.29603 203.23607 180.37471 376.33870 329.31700 204.25746\nMongpan    131.59966 346.39710 340.39128 494.81014 371.13393 140.23910\nKunhing    103.91040 238.99570 249.74161 403.66587 281.62645 123.18870\nKyethi     377.89657 137.79420  47.79331 233.83079 374.90376 396.89963\nLaihka     185.99082 264.13364 224.29176 443.25453 392.32592 214.19291\nLoilen     190.26490 224.79239 196.60826 406.56282 354.79137 207.94433\nMonghsu    242.43599 154.86049 127.42203 308.13805 311.92379 260.52971\nMongkaing  552.31959 262.84016 348.56123 135.51424 285.65085 548.40662\nNansang    164.99494 288.55962 249.70235 458.06573 398.13308 193.36162\nHopong     244.16253 124.62791 106.82328 291.84351 294.40441 261.51075\nHsihseng   311.98001 162.27126  70.27241 304.02806 377.52977 335.52974\nPinlaung   217.58854 220.56339 169.50567 382.40610 371.26895 244.47146\nKalaw      195.18913 386.74701 348.06617 537.63884 463.53759 224.03998\nLawksawk   314.64777 391.26989 323.14701 515.39711 523.69580 345.91486\nNyaungshwe 230.45003 327.13541 284.14692 460.91883 427.94086 257.77823\nPekon      293.70625 242.52301 167.79937 368.25761 416.84901 321.81214\nTaunggyi   387.33906 635.94105 592.65262 778.45810 684.20905 405.59730\n              Mabein   Mongmit    Kutkai      Muse   Namhkan    Manton\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit    263.37099                                                  \nKutkai     340.55064  97.61092                                        \nMuse       453.27410 563.01629 592.90743                              \nNamhkan    379.56035 386.02794 392.48568 238.67060                    \nManton     674.01120 430.64070 361.82684 941.49778 721.86149          \nNamhsan    488.33873 237.78494 191.32762 778.52971 576.42717 210.48485\nKengtung   219.47071 246.45691 279.19573 330.08211 175.63015 631.99123\nMongkhet   610.30557 349.45980 273.91673 816.44931 596.19944 181.33894\nMongla     406.09124 384.30076 388.40984 256.80556  77.21355 712.51416\nMongping   518.16310 265.12574 182.75266 744.44948 523.74815 200.48082\nMongyang   411.88352 309.51302 285.33223 389.59919 167.72448 585.70558\nPangwaun   523.44632 381.51246 321.80465 541.97887 310.44067 510.79265\nKonkyan    613.51206 403.39082 310.60810 704.86973 481.59596 366.66876\nLaukkaing  520.67373 568.27732 580.38112 149.26996 196.46063 907.38406\nHsipaw     366.42787 118.18050  51.46282 591.03355 382.79302 359.60008\nKyaukme    264.88283 144.02475 170.93318 434.75768 247.81990 522.86003\nNamtu      366.16094 179.62251 225.28268 659.16927 506.32466 448.58230\nNawnghkio  204.63154  89.07103 147.44053 533.68806 367.33575 475.77296\nHseni      213.61240 189.37188 229.37894 381.30567 212.11323 584.63341\nKunlong    396.61508 224.12169 204.54010 547.24297 375.73885 479.76855\nLashio     231.28227 251.29457 289.82513 313.15288 173.27153 646.66493\nPindaya    313.45776 171.86828 212.81775 704.11252 543.81859 402.42888\nYwangan    529.14689 381.88259 360.11861 899.44137 714.43173 306.16379\nLangkho    253.84371 164.26299 180.51419 413.64173 224.40029 535.95620\nMawkmai    693.24602 434.92968 364.95519 926.93007 706.47792 109.08779\nMongnai    358.86053 115.86190  91.15307 571.97975 370.05669 391.54062\nMongpan    301.52942 193.32063 185.18173 447.49969 240.34131 507.96808\nKunhing    375.82140 173.50424 108.84990 533.00162 314.92119 410.49230\nKyethi     442.07679 202.92551 184.23422 757.16745 567.86202 272.03299\nLaihka     345.00222 141.87227 144.67198 526.65211 342.43665 458.30232\nLoilen     375.06406 145.48666 131.56529 560.43400 364.90647 419.06087\nMonghsu    367.19820 109.15790  62.60859 633.21624 431.32637 330.76503\nMongkaing  747.17454 503.61965 428.96133 995.66496 771.39688  81.75337\nNansang    287.92364 104.91839 130.04549 489.35308 302.89487 476.55544\nHopong     398.00917 136.93111  73.45899 648.68011 444.13246 310.58885\nHsihseng   381.20187 131.49728 128.21054 677.66886 492.09476 334.87758\nPinlaung   312.66966  57.46286  78.07733 571.58335 382.78835 405.83081\nKalaw      198.14085 160.05997 204.93018 412.46033 246.39577 560.16577\nLawksawk   130.36525 140.11550 224.64646 510.13288 379.41126 551.13000\nNyaungshwe 210.21337  99.38590 152.15482 505.88581 333.32428 488.79874\nPekon      282.26877  59.61977 114.98048 614.56144 442.77120 403.82131\nTaunggyi   226.24011 399.84278 450.33382 250.81471 257.29147 803.08034\n             Namhsan  Kengtung  Mongkhet    Mongla  Mongping  Mongyang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung   466.20497                                                  \nMongkhet   170.90848 531.35998                                        \nMongla     564.02740 202.45004 574.40292                              \nMongping   130.23777 442.80821 113.80917 512.61580                    \nMongyang   450.97869 217.08047 445.40621 146.66661 387.80686          \nPangwaun   448.58030 337.48335 407.02947 319.18643 340.37881 225.25026\nKonkyan    352.20115 474.82621 254.24424 468.09747 242.02901 329.39338\nLaukkaing  760.45960 351.48520 769.06406 202.55831 708.13447 326.19219\nHsipaw     194.47928 284.08582 253.80950 373.47509 168.92101 267.10497\nKyaukme    347.85944 136.23356 409.03553 241.58966 330.28984 188.59489\nNamtu      240.95555 385.33554 355.99713 483.49434 321.66441 413.26052\nNawnghkio  299.74967 208.29647 414.10280 381.40808 316.14719 323.32123\nHseni      411.96125  66.12817 481.88406 226.82048 395.58453 210.19929\nKunlong    310.40560 317.14187 341.68641 346.46200 309.05385 247.22785\nLashio     472.04024  59.85893 534.44463 179.95877 454.52548 209.33700\nPindaya    228.41073 385.68322 391.74783 549.42389 310.64850 475.93982\nYwangan    286.16305 573.23173 408.97731 728.16301 337.94020 630.71590\nLangkho    368.20978 107.16213 428.08061 229.01675 343.96455 175.35413\nMawkmai    215.19289 632.54638 115.58388 686.88950 194.31049 558.83162\nMongnai    218.10003 272.28711 275.76855 354.10985 202.99615 260.39387\nMongpan    364.77086 142.21554 412.17123 253.20001 318.47482 194.93467\nKunhing    270.79121 245.95083 292.49814 306.47566 212.59619 188.89405\nKyethi      68.67929 444.26274 233.25039 556.02500 187.43974 453.86726\nLaihka     273.79672 258.23950 324.97428 315.93218 272.82761 229.71502\nLoilen     242.15271 282.22935 284.76895 338.67408 231.99959 246.76592\nMonghsu    153.22576 316.91914 247.73318 424.51868 158.90478 323.95988\nMongkaing  288.66231 692.74693 222.60577 761.48327 257.18572 631.91325\nNansang    294.16284 193.67980 360.99219 289.45119 287.36626 218.49285\nHopong     132.70541 340.47382 212.99485 432.31105 134.00139 323.35704\nHsihseng   125.74240 370.72441 256.70338 478.66210 199.64389 382.59743\nPinlaung   214.33352 263.48638 305.86058 372.59678 229.75261 286.03834\nKalaw      385.88676  88.29335 465.52013 260.26411 375.64739 233.56349\nLawksawk   362.84062 209.38215 487.41102 393.18472 396.47081 363.37684\nNyaungshwe 315.91750 177.75714 417.08639 347.60273 319.32583 294.29500\nPekon      207.16559 297.67761 342.08722 441.20998 259.68288 363.58788\nTaunggyi   631.49232 186.28225 712.80752 297.09863 621.53039 374.58247\n            Pangwaun   Konkyan Laukkaing    Hsipaw   Kyaukme     Namtu\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan    263.97576                                                  \nLaukkaing  470.63605 635.92043                                        \nHsipaw     298.12447 296.74316 569.06099                              \nKyaukme    308.31407 393.79911 428.74978 163.95741                    \nNamtu      517.03554 478.37690 664.06286 229.44658 270.87277          \nNawnghkio  381.67478 439.34272 552.65554 176.09570 157.04230 257.52713\nHseni      330.70182 448.84563 391.74585 231.48538  81.20593 327.41448\nKunlong    392.45403 329.11433 521.88657 205.10051 215.63037 233.60474\nLashio     362.45608 485.51312 334.65738 290.86435 129.95255 365.88437\nPindaya    512.13162 500.86933 726.85355 245.98884 311.01487 225.40822\nYwangan    580.13146 528.12533 908.82520 388.63147 505.89191 444.66868\nLangkho    295.38434 386.95022 410.41270 183.05109  51.67279 305.03473\nMawkmai    500.68857 339.01411 882.51110 351.34601 512.02846 427.95451\nMongnai    312.13429 328.82831 551.56800  52.68195 142.45669 209.35473\nMongpan    232.52209 365.87588 435.58047 179.52054 110.37831 352.91394\nKunhing    229.09986 253.74202 500.41640  90.77517 145.00266 296.43996\nKyethi     476.62610 400.10989 749.99415 195.17677 328.14177 186.90932\nLaihka     351.78203 351.75354 507.39700 128.42987 128.24979 185.86794\nLoilen     331.69981 334.19820 535.57527  98.04789 146.92675 194.24075\nMonghsu    343.38498 331.72187 619.01766  58.55724 200.77712 209.64684\nMongkaing  536.95736 380.92091 954.11795 423.77868 586.05094 525.04057\nNansang    326.12960 374.70456 480.60074 120.24428  60.32773 217.61884\nHopong     346.00673 304.49287 628.48557  62.86179 218.84211 206.82668\nHsihseng   433.06326 383.49700 670.74564 136.54610 250.27059 131.89940\nPinlaung   356.37963 365.44693 563.81750  76.55260 139.67966 170.04533\nKalaw      338.35194 444.75859 427.77791 212.36711  79.42225 307.27427\nLawksawk   453.02765 520.31264 548.83928 249.35081 186.29066 260.95300\nNyaungshwe 352.92324 432.35040 520.24345 169.92664 126.50414 271.41464\nPekon      423.81347 421.48797 624.82399 145.37542 202.12206 165.02707\nTaunggyi   497.61245 650.56905 345.98041 462.31183 312.60547 518.72748\n           Nawnghkio     Hseni   Kunlong    Lashio   Pindaya   Ywangan\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni      164.05304                                                  \nKunlong    285.04608 276.19175                                        \nLashio     230.55346  79.41836 295.23103                              \nPindaya    180.64047 337.98982 355.47066 398.98167                    \nYwangan    377.87702 534.44679 531.63089 602.17475 257.31610          \nLangkho    156.51662  66.66133 224.52741 115.18145 323.28133 507.78892\nMawkmai    495.15047 582.53670 446.53763 638.60773 437.99577 397.03752\nMongnai    182.21245 216.81639 202.92529 270.86983 258.49346 422.71934\nMongpan    172.84425 120.66550 288.03320 172.33279 335.72896 483.68125\nKunhing    206.15773 206.47448 193.77551 255.10832 318.23811 449.67218\nKyethi     267.21607 388.33498 298.55859 447.10266 175.54012 287.29358\nLaihka     211.88187 204.49010 122.68682 238.64533 298.61288 491.83321\nLoilen     219.26405 227.10984 166.53599 268.92310 293.61143 469.51621\nMonghsu    170.09168 262.28462 239.89665 325.71557 198.35391 340.42789\nMongkaing  546.69447 648.04408 539.91284 708.65819 481.71125 364.98429\nNansang    151.13185 136.45492 183.01388 184.47950 275.44246 472.77637\nHopong     204.88286 286.41193 219.06817 345.31042 223.06050 352.85844\nHsihseng   209.88026 312.74375 231.85967 369.00833 172.00796 342.91035\nPinlaung   139.27495 204.47572 194.76257 262.51735 208.63519 400.05492\nKalaw      127.74787  38.52842 273.01375 106.69059 302.51785 499.53297\nLawksawk    90.82891 171.50398 318.30406 220.75270 204.32952 432.16535\nNyaungshwe  43.26545 130.86310 285.13095 201.58191 216.52463 407.11649\nPekon      113.15370 243.98001 249.36301 303.80011 117.91580 336.50410\nTaunggyi   344.79200 238.19389 471.29032 195.14541 503.75471 697.98323\n             Langkho   Mawkmai   Mongnai   Mongpan   Kunhing    Kyethi\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai    531.08019                                                  \nMongnai    174.67678 374.50873                                        \nMongpan     94.98486 509.99632 178.09554                              \nKunhing    146.38284 398.43973 110.55197 137.85278                    \nKyethi     350.91512 278.85535 210.50453 358.89620 278.95182          \nLaihka     160.94435 429.96554 100.53457 210.76951 142.03682 255.83275\nLoilen     184.10672 388.73386  58.41263 207.25000 130.39336 232.32965\nMonghsu    221.84918 332.07962  84.11238 216.25326 146.78891 146.61572\nMongkaing  597.42714 133.29995 456.00842 563.56780 465.03971 352.06533\nNansang     99.39859 462.41938  92.79567 144.77393 128.20940 273.02385\nHopong     239.63685 302.84362  91.53795 239.43845 145.15617 136.49038\nHsihseng   276.27441 329.29477 142.36728 295.87811 220.15490  84.04049\nPinlaung   168.44228 398.11227  64.52387 192.78316 141.58836 189.47065\nKalaw       67.19580 562.59200 200.34668 114.69105 197.63683 360.17247\nLawksawk   190.30257 567.52693 241.71260 228.54223 278.68953 317.74604\nNyaungshwe 128.26577 502.99026 169.63695 137.29734 189.97131 288.06872\nPekon      219.21623 416.00669 151.60031 243.30037 213.46379 162.43575\nTaunggyi   288.27478 810.74692 448.55282 319.81385 429.98509 599.57407\n              Laihka    Loilen   Monghsu Mongkaing   Nansang    Hopong\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai                                                               \nMongnai                                                               \nMongpan                                                               \nKunhing                                                               \nKyethi                                                                \nLaihka                                                                \nLoilen      59.69478                                                  \nMonghsu    163.28926 131.55208                                        \nMongkaing  522.96309 482.18190 400.71816                              \nNansang     78.78999  94.23028 153.59962 542.16609                    \nHopong     157.48857 124.74445  43.40665 379.37916 167.66291          \nHsihseng   175.89761 158.84853  97.82470 411.59788 193.53779  91.65458\nPinlaung   101.10150  91.56527  80.86834 476.29056  85.49572  98.14855\nKalaw      197.34633 217.19877 237.34578 625.24500 124.30500 264.16294\nLawksawk   246.74469 265.29318 242.04063 625.18712 188.78869 274.91604\nNyaungshwe 201.71653 206.40432 173.82799 557.32112 131.18943 209.32532\nPekon      182.23667 181.94596 113.84636 480.23965 160.37607 138.86577\nTaunggyi   425.36916 455.91617 486.91951 866.21117 365.04897 513.76415\n            Hsihseng  Pinlaung     Kalaw  Lawksawk Nyaungshwe     Pekon\nMongton                                                                \nMonghpyak                                                              \nMongyawng                                                              \nTachileik                                                              \nHopang                                                                 \nMongmao                                                                \nMongyai                                                                \nTangyan                                                                \nMatman                                                                 \nNarphan                                                                \nPangsang                                                               \nMabein                                                                 \nMongmit                                                                \nKutkai                                                                 \nMuse                                                                   \nNamhkan                                                                \nManton                                                                 \nNamhsan                                                                \nKengtung                                                               \nMongkhet                                                               \nMongla                                                                 \nMongping                                                               \nMongyang                                                               \nPangwaun                                                               \nKonkyan                                                                \nLaukkaing                                                              \nHsipaw                                                                 \nKyaukme                                                                \nNamtu                                                                  \nNawnghkio                                                              \nHseni                                                                  \nKunlong                                                                \nLashio                                                                 \nPindaya                                                                \nYwangan                                                                \nLangkho                                                                \nMawkmai                                                                \nMongnai                                                                \nMongpan                                                                \nKunhing                                                                \nKyethi                                                                 \nLaihka                                                                 \nLoilen                                                                 \nMonghsu                                                                \nMongkaing                                                              \nNansang                                                                \nHopong                                                                 \nHsihseng                                                               \nPinlaung   111.61846                                                   \nKalaw      287.11074 181.96406                                         \nLawksawk   257.11202 192.57320 140.01101                               \nNyaungshwe 225.80242 138.12050  95.66782 104.17830                     \nPekon      105.30573  94.61225 211.91531 157.51129  139.31874          \nTaunggyi   528.14240 429.54386 252.26066 304.96838  325.09619 440.66133\n\n\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nDraw a line horizontally, then lower it slowly to find the relevant groupings. As you go down, the number of clusters will increase. Sometimes lowering it too much will result in local optimization which finds relationships that dont hold in more global groups.\nPERSONAL QUESTION: What if i want the clustering to be done only on edge on a mobile phone? Will this local optimisation result in wrong clusters to be formed? What if 2 observations that are supposed to exist in the same group are found in 2 different mobile phones? Do they all have to be aggregated to a central database before clustering can occur or can it still be optimally clustered in the 2 phones with minimal comparisons? Could this be related: https://ieeexplore.ieee.org/document/9136696?\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\nshan.nb &lt;- poly2nb(shan_sf)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\n\n\nplot(st_geometry(shan_sf), border = grey(.5))\n\n\n\n\n\n\n\n\n\nplot(st_geometry(shan_sf), border = grey(.5))\npts &lt;- st_coordinates((st_centroid(shan_sf)))\nplot(shan.nb, \n     pts,\n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\nThis creates graph with maximum edges, before we can proceed to get the minimum spanning tree by removing each edge and checking if its all still connected. An example of minimum spanning tree is Kruskal.\nFinding the clusters is not enough! We need to find a way to interpret the behaviour of each cluster using Multivariate analysis found in the Hands on exercise below. We can use the box plot to find an adequate name.\nCopy of Handson exercise for faster reference:\n\n\n\n\nBy the end of this hands-on exercise, I will be able to:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\nQuestions I have before starting:\n\ncan these clustering tactics be integrated with existing pytorch unsupervised learning methods such as KMeans, etc?\nPytorch is known to speed up processes by maximising usage of existing CPUs, is it possible to take advantage of that in this clustering r package since it involves dealing with many small geographical points?\n\n\n\n\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)Getting Started\nImporting the relevant packages:\nhttps://stackoverflow.com/questions/21833028/error-in-as-doubley-cannot-coerce-type-s4-to-vector-of-type-double\n\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally, arulesViz, sp)\n\n\n\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\nRetrieved from: https://data.humdata.org/dataset/mimu-geonode-myanmar-township-boundaries-mimu?\n\nshan_sf &lt;- st_read(dsn = \"../../data/geospatial/week8\", \n                   layer = \"mmr_polbnda_adm3_250k_mimu_1\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week8' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.17 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE        DT   DT_PCODE        TS  TS_PCODE\n1   Shan (East)   MMR016  Monghsat MMR016D002  Monghsat MMR016006\n2   Shan (East)   MMR016  Monghsat MMR016D002   Mongton MMR016008\n3   Shan (East)   MMR016 Tachileik MMR016D003 Monghpyak MMR016010\n4   Shan (East)   MMR016 Tachileik MMR016D003 Mongyawng MMR016011\n5   Shan (East)   MMR016 Tachileik MMR016D003 Tachileik MMR016009\n6  Shan (North)   MMR015    Hopang MMR015D006    Hopang MMR015021\n7  Shan (North)   MMR015    Hopang MMR015D006   Mongmao MMR015008\n8  Shan (North)   MMR015    Lashio MMR015D001   Mongyai MMR015003\n9  Shan (North)   MMR015    Lashio MMR015D001   Tangyan MMR015004\n10 Shan (North)   MMR015    Matman MMR015D007    Matman MMR015024\n                         geometry\n1  MULTIPOLYGON (((99.17944 20...\n2  MULTIPOLYGON (((98.50567 20...\n3  MULTIPOLYGON (((100.0708 21...\n4  MULTIPOLYGON (((101.1053 21...\n5  MULTIPOLYGON (((100.3687 21...\n6  MULTIPOLYGON (((98.88008 23...\n7  MULTIPOLYGON (((98.94264 23...\n8  MULTIPOLYGON (((98.04246 22...\n9  MULTIPOLYGON (((98.27834 22...\n10 MULTIPOLYGON (((98.9057 22....\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"…\n$ ST_PCODE &lt;chr&gt; \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR015\", \"…\n$ DT       &lt;chr&gt; \"Monghsat\", \"Monghsat\", \"Tachileik\", \"Tachileik\", \"Tachileik\"…\n$ DT_PCODE &lt;chr&gt; \"MMR016D002\", \"MMR016D002\", \"MMR016D003\", \"MMR016D003\", \"MMR0…\n$ TS       &lt;chr&gt; \"Monghsat\", \"Mongton\", \"Monghpyak\", \"Mongyawng\", \"Tachileik\",…\n$ TS_PCODE &lt;chr&gt; \"MMR016006\", \"MMR016008\", \"MMR016010\", \"MMR016011\", \"MMR01600…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((99.17944 20..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict &lt;- read_csv (\"../../data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\n\n\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR.\n\n\n\n\n\n\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"../../data/rds/week8/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\nshan_sf &lt;- read_rds(\"../../data/rds/week8/shan_sf.rds\")\n\n\n\n\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\") + tm_fill()\n\n\n\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nCan you identify the differences?\n\n\n\n\n\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both.\n\n\n\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\n2    Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\n3  Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\n4  Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\n5  Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\n6     Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\n7    Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\n8    Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\n9    Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\n10    Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\nMongton     Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang       Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao     Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai     Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan     Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\nMatman       Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\n\n\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n            Monghsat   Mongton Monghpyak Mongyawng Tachileik    Hopang\nMongton    150.98053                                                  \nMonghpyak  356.84917 258.04282                                        \nMongyawng  364.40429 375.22688 285.56475                              \nTachileik  677.09508 608.76740 444.04411 432.10118                    \nHopang     317.64824 273.50305 304.26577 290.51360 403.82035          \nMongmao    247.17708 206.57001 291.88846 296.40789 472.95568  78.29342\nMongyai    127.35225 159.79790 370.01575 445.78964 750.29555 408.73288\nTangyan    144.59626 198.88460 335.26416 377.52279 719.84066 412.22167\nMatman     313.59911 303.04574 470.46845 601.80824 890.12935 573.55355\nNarphan    278.21548 215.97925 448.40651 572.76394 760.29566 397.85908\nPangsang   256.37933 210.77938 315.11651 336.16703 481.31907  92.57672\nMabein     470.48135 425.16902 212.69450 193.49994 365.32538 368.55167\nMongmit    214.20854 192.67961 177.76325 214.21738 529.63213 281.05362\nKutkai     154.32012 107.06341 206.61627 281.03383 568.99109 263.31986\nMuse       663.76026 634.71074 539.43485 422.37358 221.19950 377.44407\nNamhkan    455.10875 414.53594 379.50202 321.21112 295.91660 146.18632\nManton     317.15603 310.20581 502.20840 629.43339 910.23039 577.52046\nNamhsan    169.56962 196.76188 352.70492 430.02019 754.03913 440.51555\nKengtung   383.72138 329.38387 221.47613 203.87199 295.90429 164.29921\nMongkhet   167.98445 223.22828 462.63265 522.91815 820.50164 451.51070\nMongla     429.00536 411.06668 408.03397 315.57550 347.33155 147.02444\nMongping   140.95392 119.86993 354.76537 455.59190 727.08969 379.27212\nMongyang   312.64797 295.60023 358.17599 304.21734 448.79027  69.25859\nPangwaun   343.53898 257.50434 381.95144 475.33116 540.60474 206.98364\nKonkyan    268.25060 248.25265 463.39594 522.38580 730.92980 348.18522\nLaukkaing  626.44910 604.66190 565.84279 454.80044 325.06329 331.67199\nHsipaw     121.78922  90.69766 237.67919 294.70967 576.18780 248.72536\nKyaukme    253.25370 229.28509 217.64419 181.55295 429.15493 154.91633\nNamtu      231.78673 308.71751 346.57799 262.24331 659.56458 408.24516\nNawnghkio  289.83220 225.81118  93.03711 220.61209 470.45533 279.84188\nHseni      331.22632 286.75945 200.26876 173.86004 354.90063 162.80878\nKunlong    202.31862 270.02165 357.44661 240.39800 595.70536 271.34451\nLashio     377.86793 347.11584 262.09281 172.70139 311.95286 170.63913\nPindaya    314.71506 283.35574 221.30579 332.92193 635.51774 443.26362\nYwangan    432.98028 361.23257 367.44835 570.56521 807.44220 596.19312\nLangkho    279.52329 236.70878 200.27496 186.11584 402.33622 134.24847\nMawkmai    275.09705 313.35220 536.71695 620.04321 919.38755 561.24281\nMongnai    125.25968 131.67061 253.26470 275.77546 563.95232 243.00945\nMongpan    283.30992 200.31803 187.85699 275.15989 411.03849 135.62913\nKunhing    165.38834 114.03609 250.74435 295.35984 532.26397 172.96164\nKyethi     190.50609 222.52947 328.16234 387.71518 728.87329 440.48114\nLaihka     158.93517 212.07320 293.22640 211.99976 549.08985 230.78652\nLoilen     118.65144 176.16001 296.99681 261.75211 573.75476 242.89326\nMonghsu    137.24737 107.04894 232.17823 312.85089 605.02113 301.84458\nMongkaing  375.60376 365.50032 568.21089 700.98284 967.14087 626.17673\nNansang    201.92690 199.58124 227.52638 191.11990 486.77266 196.47091\nHopong     100.45714 106.21031 267.95563 326.59925 632.45718 309.77356\nHsihseng   153.49551 194.64317 285.37627 309.51462 658.87060 370.01334\nPinlaung   160.44703 163.42143 222.20020 235.55497 555.01039 265.96924\nKalaw      317.96188 267.87522 167.08436 173.43078 373.64459 185.14704\nLawksawk   352.31496 311.07742 142.31691 179.07229 441.82621 321.16462\nNyaungshwe 286.37238 219.72196 103.97300 218.12104 445.81335 247.19891\nPekon      225.64279 208.14888 190.93173 248.43910 573.39528 336.38582\nTaunggyi   562.88102 508.40925 334.17439 287.73864 150.84117 329.95252\n             Mongmao   Mongyai   Tangyan    Matman   Narphan  Pangsang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai    335.61300                                                  \nTangyan    347.14183 109.08506                                        \nMatman     501.59903 186.95158 242.78233                              \nNarphan    331.42618 248.82845 348.84991 312.05193                    \nPangsang    57.60801 343.30638 364.76893 506.29940 316.30314          \nMabein     384.91867 516.40426 448.59948 637.53975 630.34312 418.54016\nMongmit    242.54541 256.72744 195.92520 401.25041 406.15714 272.67383\nKutkai     204.69232 188.94166 166.61820 340.86349 314.27683 228.33583\nMuse       451.82530 763.91399 736.93741 929.11283 770.40234 460.24292\nNamhkan    223.32205 550.62819 542.64078 715.42102 536.85519 231.38484\nManton     503.79786 195.59882 271.82672  59.52318 280.26395 504.75214\nNamhsan    371.71448  77.35900  63.67613 180.09747 316.54695 385.65526\nKengtung   207.58055 460.39706 429.95076 613.01033 505.40025 229.85484\nMongkhet   375.35820 104.98924 201.49393 203.02855 217.28718 375.58139\nMongla     216.24705 535.28615 526.80849 708.17595 531.46949 217.88123\nMongping   305.57166  65.38727 161.67411 201.65224 188.64567 308.33123\nMongyang    91.06281 414.31237 421.06366 585.61776 401.39475 108.37735\nPangwaun   187.40057 394.07696 447.05580 523.43600 264.64997 157.48757\nKonkyan    281.87425 287.87384 367.46064 392.40306 158.82353 274.81900\nLaukkaing  404.00848 732.68347 722.40954 903.72094 708.82887 408.04016\nHsipaw     185.99483 177.33790 167.69794 344.45451 295.40170 205.04337\nKyaukme    146.09228 339.27780 306.78359 505.52285 420.30003 175.35273\nNamtu      365.03882 278.02761 178.69483 416.65397 494.36143 392.97391\nNawnghkio  257.76465 319.57938 269.07880 444.05061 435.59661 287.10769\nHseni      184.67099 408.23212 373.07575 564.64051 474.12297 214.66375\nKunlong    224.43391 299.36066 268.07983 468.27436 413.07823 258.49342\nLashio     214.23677 466.36472 429.84475 628.11049 525.63854 236.72516\nPindaya    402.21719 287.41816 208.43740 354.39039 474.50209 428.24958\nYwangan    542.85957 333.12853 324.77002 255.22031 452.95769 556.82263\nLangkho    134.50170 358.95672 332.02048 518.86151 420.65204 167.65920\nMawkmai    485.52853 178.70499 262.66006 147.83545 273.75350 484.14757\nMongnai    188.29603 203.23607 180.37471 376.33870 329.31700 204.25746\nMongpan    131.59966 346.39710 340.39128 494.81014 371.13393 140.23910\nKunhing    103.91040 238.99570 249.74161 403.66587 281.62645 123.18870\nKyethi     377.89657 137.79420  47.79331 233.83079 374.90376 396.89963\nLaihka     185.99082 264.13364 224.29176 443.25453 392.32592 214.19291\nLoilen     190.26490 224.79239 196.60826 406.56282 354.79137 207.94433\nMonghsu    242.43599 154.86049 127.42203 308.13805 311.92379 260.52971\nMongkaing  552.31959 262.84016 348.56123 135.51424 285.65085 548.40662\nNansang    164.99494 288.55962 249.70235 458.06573 398.13308 193.36162\nHopong     244.16253 124.62791 106.82328 291.84351 294.40441 261.51075\nHsihseng   311.98001 162.27126  70.27241 304.02806 377.52977 335.52974\nPinlaung   217.58854 220.56339 169.50567 382.40610 371.26895 244.47146\nKalaw      195.18913 386.74701 348.06617 537.63884 463.53759 224.03998\nLawksawk   314.64777 391.26989 323.14701 515.39711 523.69580 345.91486\nNyaungshwe 230.45003 327.13541 284.14692 460.91883 427.94086 257.77823\nPekon      293.70625 242.52301 167.79937 368.25761 416.84901 321.81214\nTaunggyi   387.33906 635.94105 592.65262 778.45810 684.20905 405.59730\n              Mabein   Mongmit    Kutkai      Muse   Namhkan    Manton\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit    263.37099                                                  \nKutkai     340.55064  97.61092                                        \nMuse       453.27410 563.01629 592.90743                              \nNamhkan    379.56035 386.02794 392.48568 238.67060                    \nManton     674.01120 430.64070 361.82684 941.49778 721.86149          \nNamhsan    488.33873 237.78494 191.32762 778.52971 576.42717 210.48485\nKengtung   219.47071 246.45691 279.19573 330.08211 175.63015 631.99123\nMongkhet   610.30557 349.45980 273.91673 816.44931 596.19944 181.33894\nMongla     406.09124 384.30076 388.40984 256.80556  77.21355 712.51416\nMongping   518.16310 265.12574 182.75266 744.44948 523.74815 200.48082\nMongyang   411.88352 309.51302 285.33223 389.59919 167.72448 585.70558\nPangwaun   523.44632 381.51246 321.80465 541.97887 310.44067 510.79265\nKonkyan    613.51206 403.39082 310.60810 704.86973 481.59596 366.66876\nLaukkaing  520.67373 568.27732 580.38112 149.26996 196.46063 907.38406\nHsipaw     366.42787 118.18050  51.46282 591.03355 382.79302 359.60008\nKyaukme    264.88283 144.02475 170.93318 434.75768 247.81990 522.86003\nNamtu      366.16094 179.62251 225.28268 659.16927 506.32466 448.58230\nNawnghkio  204.63154  89.07103 147.44053 533.68806 367.33575 475.77296\nHseni      213.61240 189.37188 229.37894 381.30567 212.11323 584.63341\nKunlong    396.61508 224.12169 204.54010 547.24297 375.73885 479.76855\nLashio     231.28227 251.29457 289.82513 313.15288 173.27153 646.66493\nPindaya    313.45776 171.86828 212.81775 704.11252 543.81859 402.42888\nYwangan    529.14689 381.88259 360.11861 899.44137 714.43173 306.16379\nLangkho    253.84371 164.26299 180.51419 413.64173 224.40029 535.95620\nMawkmai    693.24602 434.92968 364.95519 926.93007 706.47792 109.08779\nMongnai    358.86053 115.86190  91.15307 571.97975 370.05669 391.54062\nMongpan    301.52942 193.32063 185.18173 447.49969 240.34131 507.96808\nKunhing    375.82140 173.50424 108.84990 533.00162 314.92119 410.49230\nKyethi     442.07679 202.92551 184.23422 757.16745 567.86202 272.03299\nLaihka     345.00222 141.87227 144.67198 526.65211 342.43665 458.30232\nLoilen     375.06406 145.48666 131.56529 560.43400 364.90647 419.06087\nMonghsu    367.19820 109.15790  62.60859 633.21624 431.32637 330.76503\nMongkaing  747.17454 503.61965 428.96133 995.66496 771.39688  81.75337\nNansang    287.92364 104.91839 130.04549 489.35308 302.89487 476.55544\nHopong     398.00917 136.93111  73.45899 648.68011 444.13246 310.58885\nHsihseng   381.20187 131.49728 128.21054 677.66886 492.09476 334.87758\nPinlaung   312.66966  57.46286  78.07733 571.58335 382.78835 405.83081\nKalaw      198.14085 160.05997 204.93018 412.46033 246.39577 560.16577\nLawksawk   130.36525 140.11550 224.64646 510.13288 379.41126 551.13000\nNyaungshwe 210.21337  99.38590 152.15482 505.88581 333.32428 488.79874\nPekon      282.26877  59.61977 114.98048 614.56144 442.77120 403.82131\nTaunggyi   226.24011 399.84278 450.33382 250.81471 257.29147 803.08034\n             Namhsan  Kengtung  Mongkhet    Mongla  Mongping  Mongyang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung   466.20497                                                  \nMongkhet   170.90848 531.35998                                        \nMongla     564.02740 202.45004 574.40292                              \nMongping   130.23777 442.80821 113.80917 512.61580                    \nMongyang   450.97869 217.08047 445.40621 146.66661 387.80686          \nPangwaun   448.58030 337.48335 407.02947 319.18643 340.37881 225.25026\nKonkyan    352.20115 474.82621 254.24424 468.09747 242.02901 329.39338\nLaukkaing  760.45960 351.48520 769.06406 202.55831 708.13447 326.19219\nHsipaw     194.47928 284.08582 253.80950 373.47509 168.92101 267.10497\nKyaukme    347.85944 136.23356 409.03553 241.58966 330.28984 188.59489\nNamtu      240.95555 385.33554 355.99713 483.49434 321.66441 413.26052\nNawnghkio  299.74967 208.29647 414.10280 381.40808 316.14719 323.32123\nHseni      411.96125  66.12817 481.88406 226.82048 395.58453 210.19929\nKunlong    310.40560 317.14187 341.68641 346.46200 309.05385 247.22785\nLashio     472.04024  59.85893 534.44463 179.95877 454.52548 209.33700\nPindaya    228.41073 385.68322 391.74783 549.42389 310.64850 475.93982\nYwangan    286.16305 573.23173 408.97731 728.16301 337.94020 630.71590\nLangkho    368.20978 107.16213 428.08061 229.01675 343.96455 175.35413\nMawkmai    215.19289 632.54638 115.58388 686.88950 194.31049 558.83162\nMongnai    218.10003 272.28711 275.76855 354.10985 202.99615 260.39387\nMongpan    364.77086 142.21554 412.17123 253.20001 318.47482 194.93467\nKunhing    270.79121 245.95083 292.49814 306.47566 212.59619 188.89405\nKyethi      68.67929 444.26274 233.25039 556.02500 187.43974 453.86726\nLaihka     273.79672 258.23950 324.97428 315.93218 272.82761 229.71502\nLoilen     242.15271 282.22935 284.76895 338.67408 231.99959 246.76592\nMonghsu    153.22576 316.91914 247.73318 424.51868 158.90478 323.95988\nMongkaing  288.66231 692.74693 222.60577 761.48327 257.18572 631.91325\nNansang    294.16284 193.67980 360.99219 289.45119 287.36626 218.49285\nHopong     132.70541 340.47382 212.99485 432.31105 134.00139 323.35704\nHsihseng   125.74240 370.72441 256.70338 478.66210 199.64389 382.59743\nPinlaung   214.33352 263.48638 305.86058 372.59678 229.75261 286.03834\nKalaw      385.88676  88.29335 465.52013 260.26411 375.64739 233.56349\nLawksawk   362.84062 209.38215 487.41102 393.18472 396.47081 363.37684\nNyaungshwe 315.91750 177.75714 417.08639 347.60273 319.32583 294.29500\nPekon      207.16559 297.67761 342.08722 441.20998 259.68288 363.58788\nTaunggyi   631.49232 186.28225 712.80752 297.09863 621.53039 374.58247\n            Pangwaun   Konkyan Laukkaing    Hsipaw   Kyaukme     Namtu\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan    263.97576                                                  \nLaukkaing  470.63605 635.92043                                        \nHsipaw     298.12447 296.74316 569.06099                              \nKyaukme    308.31407 393.79911 428.74978 163.95741                    \nNamtu      517.03554 478.37690 664.06286 229.44658 270.87277          \nNawnghkio  381.67478 439.34272 552.65554 176.09570 157.04230 257.52713\nHseni      330.70182 448.84563 391.74585 231.48538  81.20593 327.41448\nKunlong    392.45403 329.11433 521.88657 205.10051 215.63037 233.60474\nLashio     362.45608 485.51312 334.65738 290.86435 129.95255 365.88437\nPindaya    512.13162 500.86933 726.85355 245.98884 311.01487 225.40822\nYwangan    580.13146 528.12533 908.82520 388.63147 505.89191 444.66868\nLangkho    295.38434 386.95022 410.41270 183.05109  51.67279 305.03473\nMawkmai    500.68857 339.01411 882.51110 351.34601 512.02846 427.95451\nMongnai    312.13429 328.82831 551.56800  52.68195 142.45669 209.35473\nMongpan    232.52209 365.87588 435.58047 179.52054 110.37831 352.91394\nKunhing    229.09986 253.74202 500.41640  90.77517 145.00266 296.43996\nKyethi     476.62610 400.10989 749.99415 195.17677 328.14177 186.90932\nLaihka     351.78203 351.75354 507.39700 128.42987 128.24979 185.86794\nLoilen     331.69981 334.19820 535.57527  98.04789 146.92675 194.24075\nMonghsu    343.38498 331.72187 619.01766  58.55724 200.77712 209.64684\nMongkaing  536.95736 380.92091 954.11795 423.77868 586.05094 525.04057\nNansang    326.12960 374.70456 480.60074 120.24428  60.32773 217.61884\nHopong     346.00673 304.49287 628.48557  62.86179 218.84211 206.82668\nHsihseng   433.06326 383.49700 670.74564 136.54610 250.27059 131.89940\nPinlaung   356.37963 365.44693 563.81750  76.55260 139.67966 170.04533\nKalaw      338.35194 444.75859 427.77791 212.36711  79.42225 307.27427\nLawksawk   453.02765 520.31264 548.83928 249.35081 186.29066 260.95300\nNyaungshwe 352.92324 432.35040 520.24345 169.92664 126.50414 271.41464\nPekon      423.81347 421.48797 624.82399 145.37542 202.12206 165.02707\nTaunggyi   497.61245 650.56905 345.98041 462.31183 312.60547 518.72748\n           Nawnghkio     Hseni   Kunlong    Lashio   Pindaya   Ywangan\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni      164.05304                                                  \nKunlong    285.04608 276.19175                                        \nLashio     230.55346  79.41836 295.23103                              \nPindaya    180.64047 337.98982 355.47066 398.98167                    \nYwangan    377.87702 534.44679 531.63089 602.17475 257.31610          \nLangkho    156.51662  66.66133 224.52741 115.18145 323.28133 507.78892\nMawkmai    495.15047 582.53670 446.53763 638.60773 437.99577 397.03752\nMongnai    182.21245 216.81639 202.92529 270.86983 258.49346 422.71934\nMongpan    172.84425 120.66550 288.03320 172.33279 335.72896 483.68125\nKunhing    206.15773 206.47448 193.77551 255.10832 318.23811 449.67218\nKyethi     267.21607 388.33498 298.55859 447.10266 175.54012 287.29358\nLaihka     211.88187 204.49010 122.68682 238.64533 298.61288 491.83321\nLoilen     219.26405 227.10984 166.53599 268.92310 293.61143 469.51621\nMonghsu    170.09168 262.28462 239.89665 325.71557 198.35391 340.42789\nMongkaing  546.69447 648.04408 539.91284 708.65819 481.71125 364.98429\nNansang    151.13185 136.45492 183.01388 184.47950 275.44246 472.77637\nHopong     204.88286 286.41193 219.06817 345.31042 223.06050 352.85844\nHsihseng   209.88026 312.74375 231.85967 369.00833 172.00796 342.91035\nPinlaung   139.27495 204.47572 194.76257 262.51735 208.63519 400.05492\nKalaw      127.74787  38.52842 273.01375 106.69059 302.51785 499.53297\nLawksawk    90.82891 171.50398 318.30406 220.75270 204.32952 432.16535\nNyaungshwe  43.26545 130.86310 285.13095 201.58191 216.52463 407.11649\nPekon      113.15370 243.98001 249.36301 303.80011 117.91580 336.50410\nTaunggyi   344.79200 238.19389 471.29032 195.14541 503.75471 697.98323\n             Langkho   Mawkmai   Mongnai   Mongpan   Kunhing    Kyethi\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai    531.08019                                                  \nMongnai    174.67678 374.50873                                        \nMongpan     94.98486 509.99632 178.09554                              \nKunhing    146.38284 398.43973 110.55197 137.85278                    \nKyethi     350.91512 278.85535 210.50453 358.89620 278.95182          \nLaihka     160.94435 429.96554 100.53457 210.76951 142.03682 255.83275\nLoilen     184.10672 388.73386  58.41263 207.25000 130.39336 232.32965\nMonghsu    221.84918 332.07962  84.11238 216.25326 146.78891 146.61572\nMongkaing  597.42714 133.29995 456.00842 563.56780 465.03971 352.06533\nNansang     99.39859 462.41938  92.79567 144.77393 128.20940 273.02385\nHopong     239.63685 302.84362  91.53795 239.43845 145.15617 136.49038\nHsihseng   276.27441 329.29477 142.36728 295.87811 220.15490  84.04049\nPinlaung   168.44228 398.11227  64.52387 192.78316 141.58836 189.47065\nKalaw       67.19580 562.59200 200.34668 114.69105 197.63683 360.17247\nLawksawk   190.30257 567.52693 241.71260 228.54223 278.68953 317.74604\nNyaungshwe 128.26577 502.99026 169.63695 137.29734 189.97131 288.06872\nPekon      219.21623 416.00669 151.60031 243.30037 213.46379 162.43575\nTaunggyi   288.27478 810.74692 448.55282 319.81385 429.98509 599.57407\n              Laihka    Loilen   Monghsu Mongkaing   Nansang    Hopong\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai                                                               \nMongnai                                                               \nMongpan                                                               \nKunhing                                                               \nKyethi                                                                \nLaihka                                                                \nLoilen      59.69478                                                  \nMonghsu    163.28926 131.55208                                        \nMongkaing  522.96309 482.18190 400.71816                              \nNansang     78.78999  94.23028 153.59962 542.16609                    \nHopong     157.48857 124.74445  43.40665 379.37916 167.66291          \nHsihseng   175.89761 158.84853  97.82470 411.59788 193.53779  91.65458\nPinlaung   101.10150  91.56527  80.86834 476.29056  85.49572  98.14855\nKalaw      197.34633 217.19877 237.34578 625.24500 124.30500 264.16294\nLawksawk   246.74469 265.29318 242.04063 625.18712 188.78869 274.91604\nNyaungshwe 201.71653 206.40432 173.82799 557.32112 131.18943 209.32532\nPekon      182.23667 181.94596 113.84636 480.23965 160.37607 138.86577\nTaunggyi   425.36916 455.91617 486.91951 866.21117 365.04897 513.76415\n            Hsihseng  Pinlaung     Kalaw  Lawksawk Nyaungshwe     Pekon\nMongton                                                                \nMonghpyak                                                              \nMongyawng                                                              \nTachileik                                                              \nHopang                                                                 \nMongmao                                                                \nMongyai                                                                \nTangyan                                                                \nMatman                                                                 \nNarphan                                                                \nPangsang                                                               \nMabein                                                                 \nMongmit                                                                \nKutkai                                                                 \nMuse                                                                   \nNamhkan                                                                \nManton                                                                 \nNamhsan                                                                \nKengtung                                                               \nMongkhet                                                               \nMongla                                                                 \nMongping                                                               \nMongyang                                                               \nPangwaun                                                               \nKonkyan                                                                \nLaukkaing                                                              \nHsipaw                                                                 \nKyaukme                                                                \nNamtu                                                                  \nNawnghkio                                                              \nHseni                                                                  \nKunlong                                                                \nLashio                                                                 \nPindaya                                                                \nYwangan                                                                \nLangkho                                                                \nMawkmai                                                                \nMongnai                                                                \nMongpan                                                                \nKunhing                                                                \nKyethi                                                                 \nLaihka                                                                 \nLoilen                                                                 \nMonghsu                                                                \nMongkaing                                                              \nNansang                                                                \nHopong                                                                 \nHsihseng                                                               \nPinlaung   111.61846                                                   \nKalaw      287.11074 181.96406                                         \nLawksawk   257.11202 192.57320 140.01101                               \nNyaungshwe 225.80242 138.12050  95.66782 104.17830                     \nPekon      105.30573  94.61225 211.91531 157.51129  139.31874          \nTaunggyi   528.14240 429.54386 252.26066 304.96838  325.09619 440.66133\n\n\n\n\n\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\nPERSONAL OBSERVATION: SAME AS KMEANS Clustering –&gt; elbow method. Most important overarching concept concept: Bias variance tradeoff!\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\nPERSONAL NOTE: Same as a migration patterns study I found online previously! Used to find which point in TIME different races from other countries mixed with racial groups in India such as the Iranian farmers.\n\n\n\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\nRADIO_PRTV_PRLLPHONE_PRMPHONE_PRCOMPUTER_PRNarphanPangwaunMongpanNansangKyaukmeKalawHseniLangkhoKunhingLaihkaMonghsatLoilenMongnaiMongtonHsipawHopongMonghsuPinlaungMongmitPekonKutkaiNamtuHsihsengKyethiTangyanNamhsanMongyaiMongpingMongkhetMawkmaiMongkaingMantonMatmanYwanganPindayaLawksawkNyaungshweNawnghkioMonghpyakMabeinMongyawngKunlongKonkyanMongyangMongmaoHopangNamhkanLaukkaingMonglaPangsangKengtungLashioTaunggyiTachileikMuse\n0.000.250.500.751.00Geographic Segmentation of Shan State by ICT indicatorsICT IndicatorsTownships of Shan State\n\n\n\n\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.\n\n\n\n\nIn this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\nThis code junk is unnecessary now!\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\n#plot(shan_sp, \n#     border=grey(.5))\n#plot(shan.nb, \n#     coordinates(shan_sp), \n#     col=\"blue\", \n#     add=TRUE)\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn      S0       S1        S2\nB 55 3025 76338.3 58090482 524376272\n\n\n\n\n\n\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   50  94.61225\n[2,]   50   53 138.12050\n[3,]   53   51  95.66782\n[4,]   51   52 140.01101\n[5,]   52   31  90.82891\n[6,]   31   29 157.04230\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\n#plot(shan_sp, border=gray(.5))\n#plot.mst(shan.mst, \n#         coordinates(shan_sp), \n#         col=\"blue\", \n#         cex.lab=0.7, \n#         cex.circles=0.005, \n#        add=TRUE)\n\n\n\n\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 2 2 2 2 2 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 35 51 52 14 50 54 53 31 29 55 ...\n  .. ..$ edge: num [1:10, 1:3] 51 14 52 50 54 53 51 31 29 52 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 25 7 4 22 17 15 6 24 20 12 ...\n  .. ..$ edge: num [1:17, 1:3] 4 15 17 22 6 24 15 20 7 15 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 39 42 9 19 8 45 49 23 2 28 ...\n  .. ..$ edge: num [1:21, 1:3] 42 19 9 49 23 8 2 45 28 39 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 37 40\n  .. ..$ edge: num [1, 1:3] 37 40 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 11\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 36\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 2 2 2 2 2 3 3 3 5 2 1 1 2 2 2 3 3 2 3 2 3 2 2 2 2 3 1 3 1 2 2 2 1 6 4 3\n[39] 3 4 3 3 3 3 3 3 3 3 3 1 1 1 1 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n11 18 22  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\n#plot(shan_sp, border=gray(.5))\n#plot(clust6, \n#     coordinates(shan_sp), \n#     cex.lab=.7,\n#     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n#     cex.circles=0.005, \n#     add=TRUE)\n\n\n\n\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster objecct.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\n\n\n\n\n\nCode chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\n\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               237.        402.            23.9           134.\n2 2               221.        521.            44.2           246.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5                98.6       499.            74.5           468.\n6 6               124.        224.            38.0           132.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;\n\n\nPersonal reflection:\nThis exercise was enlightening in finding out ways to visualise how the clustering algorithms find split points to split the clusters and allows data scientists to understand the decision points, such as certain behaviours of that group, that led to a machine learning model to split the data for that cluster. The dendogram was especially useful for understanding these. This was especially enlightening when i found other real world applications such as Tracking Viruses through Phylogenetic Trees (https://towardsdatascience.com/hierarchical-clustering-and-its-applications-41c1ad4441a6). However, certain plotting libraries used here such as arulesViz are very outdated and kept throwing errors during the rendering process such as . It could be because not enough developers are continously updating the project to keep it forward compatible with newest technologies such as the macbook pro and latest windows os systems. Thus, more updated interactive plotting libraries R that have more developers working on them continously can be used instead.\n\n\n\n\nhttps://r4gdsa.netlify.app/chap09.html\nhttps://r4gdsa.netlify.app/chap10.html\nFile Management:\n\nhttps://www.geeksforgeeks.org/file-handling-in-r-programming/"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#importing-r-relevant-packages",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#importing-r-relevant-packages",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "https://stackoverflow.com/questions/21833028/error-in-as-doubley-cannot-coerce-type-s4-to-vector-of-type-double\n\npacman::p_load(sp, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally, arulesViz)\n\n\n\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment. We need to filter out the regions “Shan (East)”, “Shan (North)”, “Shan (South)” and this is done with the key word “in”, just like in SQL statements! It uses the global coordinate system WGS 84 and for now it is alright since other data do not use cooridate system for now, so there is no need to synchronise this crs system to any other system for now.\n\nshan_sf &lt;- st_read(dsn = \"../../data/geospatial/week8\", \n                   layer = \"mmr_polbnda_adm3_250k_mimu_1\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week8' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\nLets check out the data type of the variable shan_sf using the useful class function:\n\nclass(shan_sf)\n\n[1] \"sf\"         \"data.frame\"\n\n\nLets preview the shan_sf variable:\n\nhead(shan_sf)\n\nSimple feature collection with 6 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 98.2089 ymin: 19.67151 xmax: 101.17 ymax: 23.48802\nGeodetic CRS:  WGS 84\n            ST ST_PCODE        DT   DT_PCODE        TS  TS_PCODE\n1  Shan (East)   MMR016  Monghsat MMR016D002  Monghsat MMR016006\n2  Shan (East)   MMR016  Monghsat MMR016D002   Mongton MMR016008\n3  Shan (East)   MMR016 Tachileik MMR016D003 Monghpyak MMR016010\n4  Shan (East)   MMR016 Tachileik MMR016D003 Mongyawng MMR016011\n5  Shan (East)   MMR016 Tachileik MMR016D003 Tachileik MMR016009\n6 Shan (North)   MMR015    Hopang MMR015D006    Hopang MMR015021\n                        geometry\n1 MULTIPOLYGON (((99.17944 20...\n2 MULTIPOLYGON (((98.50567 20...\n3 MULTIPOLYGON (((100.0708 21...\n4 MULTIPOLYGON (((101.1053 21...\n5 MULTIPOLYGON (((100.3687 21...\n6 MULTIPOLYGON (((98.88008 23...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"…\n$ ST_PCODE &lt;chr&gt; \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR015\", \"…\n$ DT       &lt;chr&gt; \"Monghsat\", \"Monghsat\", \"Tachileik\", \"Tachileik\", \"Tachileik\"…\n$ DT_PCODE &lt;chr&gt; \"MMR016D002\", \"MMR016D002\", \"MMR016D003\", \"MMR016D003\", \"MMR0…\n$ TS       &lt;chr&gt; \"Monghsat\", \"Mongton\", \"Monghpyak\", \"Mongyawng\", \"Tachileik\",…\n$ TS_PCODE &lt;chr&gt; \"MMR016006\", \"MMR016008\", \"MMR016010\", \"MMR016011\", \"MMR01600…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((99.17944 20..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package. The code chunks used are shown below:\n\nict &lt;- read_csv (\"../../data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar.\nLets run this summary statistics of ict data.frame to get the summary:\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \nhead(ict_derived)\n\n# A tibble: 6 × 17\n  DT_PCODE   DT       TS_PCODE  TS      TT_HOUSEHOLDS RADIO    TV LLPHONE MPHONE\n  &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n1 MMR014D001 Taunggyi MMR014001 Taungg…         82604 30176 62388    6736  48461\n2 MMR014D001 Taunggyi MMR014002 Nyaung…         42634 13801 23640     810  14973\n3 MMR014D001 Taunggyi MMR014003 Hopong          24728  5083 11272     799   5192\n4 MMR014D001 Taunggyi MMR014004 Hsihse…         32771  8087 16568    1042   4755\n5 MMR014D001 Taunggyi MMR014005 Kalaw           41341 11607 25285    1739  16900\n6 MMR014D001 Taunggyi MMR014006 Pindaya         17544  7324  8862     348   2849\n# ℹ 8 more variables: COMPUTER &lt;dbl&gt;, INTERNET &lt;dbl&gt;, RADIO_PR &lt;dbl&gt;,\n#   TV_PR &lt;dbl&gt;, LLPHONE_PR &lt;dbl&gt;, MPHONE_PR &lt;dbl&gt;, COMPUTER_PR &lt;dbl&gt;,\n#   INTERNET_PR &lt;dbl&gt;\n\n\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"../../data/rds/week8/shan_sf.rds\")\n\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThis is definitely an improvement from the regular scatterplot since one half of the matrix, which will be repeated anyway, is used as shapes to better look at correlations in an intuitive manner to find possible problems of multi-collinearity. Sloped oval circles indicate higher correlation.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\n2    Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\n3  Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\n4  Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\n5  Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\n6     Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\n7    Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\n8    Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\n9    Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\n10    Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\nMongton     Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang       Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao     Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai     Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan     Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\nMatman       Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the row number has been replaced into the township name.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat  107.6749 460.1169  34.508769 189.51537   22.817273\nMongton   193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang    127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao   120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai   168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan   223.8632 453.2753  22.594047 105.23021   12.065335\nMatman    244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nCalculating proximity with euclidean distance:\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\nproxmat\n\n            Monghsat   Mongton Monghpyak Mongyawng Tachileik    Hopang\nMongton    150.98053                                                  \nMonghpyak  356.84917 258.04282                                        \nMongyawng  364.40429 375.22688 285.56475                              \nTachileik  677.09508 608.76740 444.04411 432.10118                    \nHopang     317.64824 273.50305 304.26577 290.51360 403.82035          \nMongmao    247.17708 206.57001 291.88846 296.40789 472.95568  78.29342\nMongyai    127.35225 159.79790 370.01575 445.78964 750.29555 408.73288\nTangyan    144.59626 198.88460 335.26416 377.52279 719.84066 412.22167\nMatman     313.59911 303.04574 470.46845 601.80824 890.12935 573.55355\nNarphan    278.21548 215.97925 448.40651 572.76394 760.29566 397.85908\nPangsang   256.37933 210.77938 315.11651 336.16703 481.31907  92.57672\nMabein     470.48135 425.16902 212.69450 193.49994 365.32538 368.55167\nMongmit    214.20854 192.67961 177.76325 214.21738 529.63213 281.05362\nKutkai     154.32012 107.06341 206.61627 281.03383 568.99109 263.31986\nMuse       663.76026 634.71074 539.43485 422.37358 221.19950 377.44407\nNamhkan    455.10875 414.53594 379.50202 321.21112 295.91660 146.18632\nManton     317.15603 310.20581 502.20840 629.43339 910.23039 577.52046\nNamhsan    169.56962 196.76188 352.70492 430.02019 754.03913 440.51555\nKengtung   383.72138 329.38387 221.47613 203.87199 295.90429 164.29921\nMongkhet   167.98445 223.22828 462.63265 522.91815 820.50164 451.51070\nMongla     429.00536 411.06668 408.03397 315.57550 347.33155 147.02444\nMongping   140.95392 119.86993 354.76537 455.59190 727.08969 379.27212\nMongyang   312.64797 295.60023 358.17599 304.21734 448.79027  69.25859\nPangwaun   343.53898 257.50434 381.95144 475.33116 540.60474 206.98364\nKonkyan    268.25060 248.25265 463.39594 522.38580 730.92980 348.18522\nLaukkaing  626.44910 604.66190 565.84279 454.80044 325.06329 331.67199\nHsipaw     121.78922  90.69766 237.67919 294.70967 576.18780 248.72536\nKyaukme    253.25370 229.28509 217.64419 181.55295 429.15493 154.91633\nNamtu      231.78673 308.71751 346.57799 262.24331 659.56458 408.24516\nNawnghkio  289.83220 225.81118  93.03711 220.61209 470.45533 279.84188\nHseni      331.22632 286.75945 200.26876 173.86004 354.90063 162.80878\nKunlong    202.31862 270.02165 357.44661 240.39800 595.70536 271.34451\nLashio     377.86793 347.11584 262.09281 172.70139 311.95286 170.63913\nPindaya    314.71506 283.35574 221.30579 332.92193 635.51774 443.26362\nYwangan    432.98028 361.23257 367.44835 570.56521 807.44220 596.19312\nLangkho    279.52329 236.70878 200.27496 186.11584 402.33622 134.24847\nMawkmai    275.09705 313.35220 536.71695 620.04321 919.38755 561.24281\nMongnai    125.25968 131.67061 253.26470 275.77546 563.95232 243.00945\nMongpan    283.30992 200.31803 187.85699 275.15989 411.03849 135.62913\nKunhing    165.38834 114.03609 250.74435 295.35984 532.26397 172.96164\nKyethi     190.50609 222.52947 328.16234 387.71518 728.87329 440.48114\nLaihka     158.93517 212.07320 293.22640 211.99976 549.08985 230.78652\nLoilen     118.65144 176.16001 296.99681 261.75211 573.75476 242.89326\nMonghsu    137.24737 107.04894 232.17823 312.85089 605.02113 301.84458\nMongkaing  375.60376 365.50032 568.21089 700.98284 967.14087 626.17673\nNansang    201.92690 199.58124 227.52638 191.11990 486.77266 196.47091\nHopong     100.45714 106.21031 267.95563 326.59925 632.45718 309.77356\nHsihseng   153.49551 194.64317 285.37627 309.51462 658.87060 370.01334\nPinlaung   160.44703 163.42143 222.20020 235.55497 555.01039 265.96924\nKalaw      317.96188 267.87522 167.08436 173.43078 373.64459 185.14704\nLawksawk   352.31496 311.07742 142.31691 179.07229 441.82621 321.16462\nNyaungshwe 286.37238 219.72196 103.97300 218.12104 445.81335 247.19891\nPekon      225.64279 208.14888 190.93173 248.43910 573.39528 336.38582\nTaunggyi   562.88102 508.40925 334.17439 287.73864 150.84117 329.95252\n             Mongmao   Mongyai   Tangyan    Matman   Narphan  Pangsang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai    335.61300                                                  \nTangyan    347.14183 109.08506                                        \nMatman     501.59903 186.95158 242.78233                              \nNarphan    331.42618 248.82845 348.84991 312.05193                    \nPangsang    57.60801 343.30638 364.76893 506.29940 316.30314          \nMabein     384.91867 516.40426 448.59948 637.53975 630.34312 418.54016\nMongmit    242.54541 256.72744 195.92520 401.25041 406.15714 272.67383\nKutkai     204.69232 188.94166 166.61820 340.86349 314.27683 228.33583\nMuse       451.82530 763.91399 736.93741 929.11283 770.40234 460.24292\nNamhkan    223.32205 550.62819 542.64078 715.42102 536.85519 231.38484\nManton     503.79786 195.59882 271.82672  59.52318 280.26395 504.75214\nNamhsan    371.71448  77.35900  63.67613 180.09747 316.54695 385.65526\nKengtung   207.58055 460.39706 429.95076 613.01033 505.40025 229.85484\nMongkhet   375.35820 104.98924 201.49393 203.02855 217.28718 375.58139\nMongla     216.24705 535.28615 526.80849 708.17595 531.46949 217.88123\nMongping   305.57166  65.38727 161.67411 201.65224 188.64567 308.33123\nMongyang    91.06281 414.31237 421.06366 585.61776 401.39475 108.37735\nPangwaun   187.40057 394.07696 447.05580 523.43600 264.64997 157.48757\nKonkyan    281.87425 287.87384 367.46064 392.40306 158.82353 274.81900\nLaukkaing  404.00848 732.68347 722.40954 903.72094 708.82887 408.04016\nHsipaw     185.99483 177.33790 167.69794 344.45451 295.40170 205.04337\nKyaukme    146.09228 339.27780 306.78359 505.52285 420.30003 175.35273\nNamtu      365.03882 278.02761 178.69483 416.65397 494.36143 392.97391\nNawnghkio  257.76465 319.57938 269.07880 444.05061 435.59661 287.10769\nHseni      184.67099 408.23212 373.07575 564.64051 474.12297 214.66375\nKunlong    224.43391 299.36066 268.07983 468.27436 413.07823 258.49342\nLashio     214.23677 466.36472 429.84475 628.11049 525.63854 236.72516\nPindaya    402.21719 287.41816 208.43740 354.39039 474.50209 428.24958\nYwangan    542.85957 333.12853 324.77002 255.22031 452.95769 556.82263\nLangkho    134.50170 358.95672 332.02048 518.86151 420.65204 167.65920\nMawkmai    485.52853 178.70499 262.66006 147.83545 273.75350 484.14757\nMongnai    188.29603 203.23607 180.37471 376.33870 329.31700 204.25746\nMongpan    131.59966 346.39710 340.39128 494.81014 371.13393 140.23910\nKunhing    103.91040 238.99570 249.74161 403.66587 281.62645 123.18870\nKyethi     377.89657 137.79420  47.79331 233.83079 374.90376 396.89963\nLaihka     185.99082 264.13364 224.29176 443.25453 392.32592 214.19291\nLoilen     190.26490 224.79239 196.60826 406.56282 354.79137 207.94433\nMonghsu    242.43599 154.86049 127.42203 308.13805 311.92379 260.52971\nMongkaing  552.31959 262.84016 348.56123 135.51424 285.65085 548.40662\nNansang    164.99494 288.55962 249.70235 458.06573 398.13308 193.36162\nHopong     244.16253 124.62791 106.82328 291.84351 294.40441 261.51075\nHsihseng   311.98001 162.27126  70.27241 304.02806 377.52977 335.52974\nPinlaung   217.58854 220.56339 169.50567 382.40610 371.26895 244.47146\nKalaw      195.18913 386.74701 348.06617 537.63884 463.53759 224.03998\nLawksawk   314.64777 391.26989 323.14701 515.39711 523.69580 345.91486\nNyaungshwe 230.45003 327.13541 284.14692 460.91883 427.94086 257.77823\nPekon      293.70625 242.52301 167.79937 368.25761 416.84901 321.81214\nTaunggyi   387.33906 635.94105 592.65262 778.45810 684.20905 405.59730\n              Mabein   Mongmit    Kutkai      Muse   Namhkan    Manton\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit    263.37099                                                  \nKutkai     340.55064  97.61092                                        \nMuse       453.27410 563.01629 592.90743                              \nNamhkan    379.56035 386.02794 392.48568 238.67060                    \nManton     674.01120 430.64070 361.82684 941.49778 721.86149          \nNamhsan    488.33873 237.78494 191.32762 778.52971 576.42717 210.48485\nKengtung   219.47071 246.45691 279.19573 330.08211 175.63015 631.99123\nMongkhet   610.30557 349.45980 273.91673 816.44931 596.19944 181.33894\nMongla     406.09124 384.30076 388.40984 256.80556  77.21355 712.51416\nMongping   518.16310 265.12574 182.75266 744.44948 523.74815 200.48082\nMongyang   411.88352 309.51302 285.33223 389.59919 167.72448 585.70558\nPangwaun   523.44632 381.51246 321.80465 541.97887 310.44067 510.79265\nKonkyan    613.51206 403.39082 310.60810 704.86973 481.59596 366.66876\nLaukkaing  520.67373 568.27732 580.38112 149.26996 196.46063 907.38406\nHsipaw     366.42787 118.18050  51.46282 591.03355 382.79302 359.60008\nKyaukme    264.88283 144.02475 170.93318 434.75768 247.81990 522.86003\nNamtu      366.16094 179.62251 225.28268 659.16927 506.32466 448.58230\nNawnghkio  204.63154  89.07103 147.44053 533.68806 367.33575 475.77296\nHseni      213.61240 189.37188 229.37894 381.30567 212.11323 584.63341\nKunlong    396.61508 224.12169 204.54010 547.24297 375.73885 479.76855\nLashio     231.28227 251.29457 289.82513 313.15288 173.27153 646.66493\nPindaya    313.45776 171.86828 212.81775 704.11252 543.81859 402.42888\nYwangan    529.14689 381.88259 360.11861 899.44137 714.43173 306.16379\nLangkho    253.84371 164.26299 180.51419 413.64173 224.40029 535.95620\nMawkmai    693.24602 434.92968 364.95519 926.93007 706.47792 109.08779\nMongnai    358.86053 115.86190  91.15307 571.97975 370.05669 391.54062\nMongpan    301.52942 193.32063 185.18173 447.49969 240.34131 507.96808\nKunhing    375.82140 173.50424 108.84990 533.00162 314.92119 410.49230\nKyethi     442.07679 202.92551 184.23422 757.16745 567.86202 272.03299\nLaihka     345.00222 141.87227 144.67198 526.65211 342.43665 458.30232\nLoilen     375.06406 145.48666 131.56529 560.43400 364.90647 419.06087\nMonghsu    367.19820 109.15790  62.60859 633.21624 431.32637 330.76503\nMongkaing  747.17454 503.61965 428.96133 995.66496 771.39688  81.75337\nNansang    287.92364 104.91839 130.04549 489.35308 302.89487 476.55544\nHopong     398.00917 136.93111  73.45899 648.68011 444.13246 310.58885\nHsihseng   381.20187 131.49728 128.21054 677.66886 492.09476 334.87758\nPinlaung   312.66966  57.46286  78.07733 571.58335 382.78835 405.83081\nKalaw      198.14085 160.05997 204.93018 412.46033 246.39577 560.16577\nLawksawk   130.36525 140.11550 224.64646 510.13288 379.41126 551.13000\nNyaungshwe 210.21337  99.38590 152.15482 505.88581 333.32428 488.79874\nPekon      282.26877  59.61977 114.98048 614.56144 442.77120 403.82131\nTaunggyi   226.24011 399.84278 450.33382 250.81471 257.29147 803.08034\n             Namhsan  Kengtung  Mongkhet    Mongla  Mongping  Mongyang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung   466.20497                                                  \nMongkhet   170.90848 531.35998                                        \nMongla     564.02740 202.45004 574.40292                              \nMongping   130.23777 442.80821 113.80917 512.61580                    \nMongyang   450.97869 217.08047 445.40621 146.66661 387.80686          \nPangwaun   448.58030 337.48335 407.02947 319.18643 340.37881 225.25026\nKonkyan    352.20115 474.82621 254.24424 468.09747 242.02901 329.39338\nLaukkaing  760.45960 351.48520 769.06406 202.55831 708.13447 326.19219\nHsipaw     194.47928 284.08582 253.80950 373.47509 168.92101 267.10497\nKyaukme    347.85944 136.23356 409.03553 241.58966 330.28984 188.59489\nNamtu      240.95555 385.33554 355.99713 483.49434 321.66441 413.26052\nNawnghkio  299.74967 208.29647 414.10280 381.40808 316.14719 323.32123\nHseni      411.96125  66.12817 481.88406 226.82048 395.58453 210.19929\nKunlong    310.40560 317.14187 341.68641 346.46200 309.05385 247.22785\nLashio     472.04024  59.85893 534.44463 179.95877 454.52548 209.33700\nPindaya    228.41073 385.68322 391.74783 549.42389 310.64850 475.93982\nYwangan    286.16305 573.23173 408.97731 728.16301 337.94020 630.71590\nLangkho    368.20978 107.16213 428.08061 229.01675 343.96455 175.35413\nMawkmai    215.19289 632.54638 115.58388 686.88950 194.31049 558.83162\nMongnai    218.10003 272.28711 275.76855 354.10985 202.99615 260.39387\nMongpan    364.77086 142.21554 412.17123 253.20001 318.47482 194.93467\nKunhing    270.79121 245.95083 292.49814 306.47566 212.59619 188.89405\nKyethi      68.67929 444.26274 233.25039 556.02500 187.43974 453.86726\nLaihka     273.79672 258.23950 324.97428 315.93218 272.82761 229.71502\nLoilen     242.15271 282.22935 284.76895 338.67408 231.99959 246.76592\nMonghsu    153.22576 316.91914 247.73318 424.51868 158.90478 323.95988\nMongkaing  288.66231 692.74693 222.60577 761.48327 257.18572 631.91325\nNansang    294.16284 193.67980 360.99219 289.45119 287.36626 218.49285\nHopong     132.70541 340.47382 212.99485 432.31105 134.00139 323.35704\nHsihseng   125.74240 370.72441 256.70338 478.66210 199.64389 382.59743\nPinlaung   214.33352 263.48638 305.86058 372.59678 229.75261 286.03834\nKalaw      385.88676  88.29335 465.52013 260.26411 375.64739 233.56349\nLawksawk   362.84062 209.38215 487.41102 393.18472 396.47081 363.37684\nNyaungshwe 315.91750 177.75714 417.08639 347.60273 319.32583 294.29500\nPekon      207.16559 297.67761 342.08722 441.20998 259.68288 363.58788\nTaunggyi   631.49232 186.28225 712.80752 297.09863 621.53039 374.58247\n            Pangwaun   Konkyan Laukkaing    Hsipaw   Kyaukme     Namtu\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan    263.97576                                                  \nLaukkaing  470.63605 635.92043                                        \nHsipaw     298.12447 296.74316 569.06099                              \nKyaukme    308.31407 393.79911 428.74978 163.95741                    \nNamtu      517.03554 478.37690 664.06286 229.44658 270.87277          \nNawnghkio  381.67478 439.34272 552.65554 176.09570 157.04230 257.52713\nHseni      330.70182 448.84563 391.74585 231.48538  81.20593 327.41448\nKunlong    392.45403 329.11433 521.88657 205.10051 215.63037 233.60474\nLashio     362.45608 485.51312 334.65738 290.86435 129.95255 365.88437\nPindaya    512.13162 500.86933 726.85355 245.98884 311.01487 225.40822\nYwangan    580.13146 528.12533 908.82520 388.63147 505.89191 444.66868\nLangkho    295.38434 386.95022 410.41270 183.05109  51.67279 305.03473\nMawkmai    500.68857 339.01411 882.51110 351.34601 512.02846 427.95451\nMongnai    312.13429 328.82831 551.56800  52.68195 142.45669 209.35473\nMongpan    232.52209 365.87588 435.58047 179.52054 110.37831 352.91394\nKunhing    229.09986 253.74202 500.41640  90.77517 145.00266 296.43996\nKyethi     476.62610 400.10989 749.99415 195.17677 328.14177 186.90932\nLaihka     351.78203 351.75354 507.39700 128.42987 128.24979 185.86794\nLoilen     331.69981 334.19820 535.57527  98.04789 146.92675 194.24075\nMonghsu    343.38498 331.72187 619.01766  58.55724 200.77712 209.64684\nMongkaing  536.95736 380.92091 954.11795 423.77868 586.05094 525.04057\nNansang    326.12960 374.70456 480.60074 120.24428  60.32773 217.61884\nHopong     346.00673 304.49287 628.48557  62.86179 218.84211 206.82668\nHsihseng   433.06326 383.49700 670.74564 136.54610 250.27059 131.89940\nPinlaung   356.37963 365.44693 563.81750  76.55260 139.67966 170.04533\nKalaw      338.35194 444.75859 427.77791 212.36711  79.42225 307.27427\nLawksawk   453.02765 520.31264 548.83928 249.35081 186.29066 260.95300\nNyaungshwe 352.92324 432.35040 520.24345 169.92664 126.50414 271.41464\nPekon      423.81347 421.48797 624.82399 145.37542 202.12206 165.02707\nTaunggyi   497.61245 650.56905 345.98041 462.31183 312.60547 518.72748\n           Nawnghkio     Hseni   Kunlong    Lashio   Pindaya   Ywangan\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni      164.05304                                                  \nKunlong    285.04608 276.19175                                        \nLashio     230.55346  79.41836 295.23103                              \nPindaya    180.64047 337.98982 355.47066 398.98167                    \nYwangan    377.87702 534.44679 531.63089 602.17475 257.31610          \nLangkho    156.51662  66.66133 224.52741 115.18145 323.28133 507.78892\nMawkmai    495.15047 582.53670 446.53763 638.60773 437.99577 397.03752\nMongnai    182.21245 216.81639 202.92529 270.86983 258.49346 422.71934\nMongpan    172.84425 120.66550 288.03320 172.33279 335.72896 483.68125\nKunhing    206.15773 206.47448 193.77551 255.10832 318.23811 449.67218\nKyethi     267.21607 388.33498 298.55859 447.10266 175.54012 287.29358\nLaihka     211.88187 204.49010 122.68682 238.64533 298.61288 491.83321\nLoilen     219.26405 227.10984 166.53599 268.92310 293.61143 469.51621\nMonghsu    170.09168 262.28462 239.89665 325.71557 198.35391 340.42789\nMongkaing  546.69447 648.04408 539.91284 708.65819 481.71125 364.98429\nNansang    151.13185 136.45492 183.01388 184.47950 275.44246 472.77637\nHopong     204.88286 286.41193 219.06817 345.31042 223.06050 352.85844\nHsihseng   209.88026 312.74375 231.85967 369.00833 172.00796 342.91035\nPinlaung   139.27495 204.47572 194.76257 262.51735 208.63519 400.05492\nKalaw      127.74787  38.52842 273.01375 106.69059 302.51785 499.53297\nLawksawk    90.82891 171.50398 318.30406 220.75270 204.32952 432.16535\nNyaungshwe  43.26545 130.86310 285.13095 201.58191 216.52463 407.11649\nPekon      113.15370 243.98001 249.36301 303.80011 117.91580 336.50410\nTaunggyi   344.79200 238.19389 471.29032 195.14541 503.75471 697.98323\n             Langkho   Mawkmai   Mongnai   Mongpan   Kunhing    Kyethi\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai    531.08019                                                  \nMongnai    174.67678 374.50873                                        \nMongpan     94.98486 509.99632 178.09554                              \nKunhing    146.38284 398.43973 110.55197 137.85278                    \nKyethi     350.91512 278.85535 210.50453 358.89620 278.95182          \nLaihka     160.94435 429.96554 100.53457 210.76951 142.03682 255.83275\nLoilen     184.10672 388.73386  58.41263 207.25000 130.39336 232.32965\nMonghsu    221.84918 332.07962  84.11238 216.25326 146.78891 146.61572\nMongkaing  597.42714 133.29995 456.00842 563.56780 465.03971 352.06533\nNansang     99.39859 462.41938  92.79567 144.77393 128.20940 273.02385\nHopong     239.63685 302.84362  91.53795 239.43845 145.15617 136.49038\nHsihseng   276.27441 329.29477 142.36728 295.87811 220.15490  84.04049\nPinlaung   168.44228 398.11227  64.52387 192.78316 141.58836 189.47065\nKalaw       67.19580 562.59200 200.34668 114.69105 197.63683 360.17247\nLawksawk   190.30257 567.52693 241.71260 228.54223 278.68953 317.74604\nNyaungshwe 128.26577 502.99026 169.63695 137.29734 189.97131 288.06872\nPekon      219.21623 416.00669 151.60031 243.30037 213.46379 162.43575\nTaunggyi   288.27478 810.74692 448.55282 319.81385 429.98509 599.57407\n              Laihka    Loilen   Monghsu Mongkaing   Nansang    Hopong\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai                                                               \nMongnai                                                               \nMongpan                                                               \nKunhing                                                               \nKyethi                                                                \nLaihka                                                                \nLoilen      59.69478                                                  \nMonghsu    163.28926 131.55208                                        \nMongkaing  522.96309 482.18190 400.71816                              \nNansang     78.78999  94.23028 153.59962 542.16609                    \nHopong     157.48857 124.74445  43.40665 379.37916 167.66291          \nHsihseng   175.89761 158.84853  97.82470 411.59788 193.53779  91.65458\nPinlaung   101.10150  91.56527  80.86834 476.29056  85.49572  98.14855\nKalaw      197.34633 217.19877 237.34578 625.24500 124.30500 264.16294\nLawksawk   246.74469 265.29318 242.04063 625.18712 188.78869 274.91604\nNyaungshwe 201.71653 206.40432 173.82799 557.32112 131.18943 209.32532\nPekon      182.23667 181.94596 113.84636 480.23965 160.37607 138.86577\nTaunggyi   425.36916 455.91617 486.91951 866.21117 365.04897 513.76415\n            Hsihseng  Pinlaung     Kalaw  Lawksawk Nyaungshwe     Pekon\nMongton                                                                \nMonghpyak                                                              \nMongyawng                                                              \nTachileik                                                              \nHopang                                                                 \nMongmao                                                                \nMongyai                                                                \nTangyan                                                                \nMatman                                                                 \nNarphan                                                                \nPangsang                                                               \nMabein                                                                 \nMongmit                                                                \nKutkai                                                                 \nMuse                                                                   \nNamhkan                                                                \nManton                                                                 \nNamhsan                                                                \nKengtung                                                               \nMongkhet                                                               \nMongla                                                                 \nMongping                                                               \nMongyang                                                               \nPangwaun                                                               \nKonkyan                                                                \nLaukkaing                                                              \nHsipaw                                                                 \nKyaukme                                                                \nNamtu                                                                  \nNawnghkio                                                              \nHseni                                                                  \nKunlong                                                                \nLashio                                                                 \nPindaya                                                                \nYwangan                                                                \nLangkho                                                                \nMawkmai                                                                \nMongnai                                                                \nMongpan                                                                \nKunhing                                                                \nKyethi                                                                 \nLaihka                                                                 \nLoilen                                                                 \nMonghsu                                                                \nMongkaing                                                              \nNansang                                                                \nHopong                                                                 \nHsihseng                                                               \nPinlaung   111.61846                                                   \nKalaw      287.11074 181.96406                                         \nLawksawk   257.11202 192.57320 140.01101                               \nNyaungshwe 225.80242 138.12050  95.66782 104.17830                     \nPekon      105.30573  94.61225 211.91531 157.51129  139.31874          \nTaunggyi   528.14240 429.54386 252.26066 304.96838  325.09619 440.66133\n\n\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nDraw a line horizontally, then lower it slowly to find the relevant groupings. As you go down, the number of clusters will increase. Sometimes lowering it too much will result in local optimization which finds relationships that dont hold in more global groups.\nPERSONAL QUESTION: What if i want the clustering to be done only on edge on a mobile phone? Will this local optimisation result in wrong clusters to be formed? What if 2 observations that are supposed to exist in the same group are found in 2 different mobile phones? Do they all have to be aggregated to a central database before clustering can occur or can it still be optimally clustered in the 2 phones with minimal comparisons? Could this be related: https://ieeexplore.ieee.org/document/9136696?\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\nshan.nb &lt;- poly2nb(shan_sf)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\n\n\nplot(st_geometry(shan_sf), border = grey(.5))\n\n\n\n\n\n\n\n\n\nplot(st_geometry(shan_sf), border = grey(.5))\npts &lt;- st_coordinates((st_centroid(shan_sf)))\nplot(shan.nb, \n     pts,\n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\nThis creates graph with maximum edges, before we can proceed to get the minimum spanning tree by removing each edge and checking if its all still connected. An example of minimum spanning tree is Kruskal.\nFinding the clusters is not enough! We need to find a way to interpret the behaviour of each cluster using Multivariate analysis found in the Hands on exercise below. We can use the box plot to find an adequate name.\nCopy of Handson exercise for faster reference:"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#overview",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#overview",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "By the end of this hands-on exercise, I will be able to:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\nQuestions I have before starting:\n\ncan these clustering tactics be integrated with existing pytorch unsupervised learning methods such as KMeans, etc?\nPytorch is known to speed up processes by maximising usage of existing CPUs, is it possible to take advantage of that in this clustering r package since it involves dealing with many small geographical points?"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#data-being-used",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#data-being-used",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Two data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)Getting Started\nImporting the relevant packages:\nhttps://stackoverflow.com/questions/21833028/error-in-as-doubley-cannot-coerce-type-s4-to-vector-of-type-double\n\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally, arulesViz, sp)\n\n\n\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\nRetrieved from: https://data.humdata.org/dataset/mimu-geonode-myanmar-township-boundaries-mimu?\n\nshan_sf &lt;- st_read(dsn = \"../../data/geospatial/week8\", \n                   layer = \"mmr_polbnda_adm3_250k_mimu_1\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week8' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.17 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE        DT   DT_PCODE        TS  TS_PCODE\n1   Shan (East)   MMR016  Monghsat MMR016D002  Monghsat MMR016006\n2   Shan (East)   MMR016  Monghsat MMR016D002   Mongton MMR016008\n3   Shan (East)   MMR016 Tachileik MMR016D003 Monghpyak MMR016010\n4   Shan (East)   MMR016 Tachileik MMR016D003 Mongyawng MMR016011\n5   Shan (East)   MMR016 Tachileik MMR016D003 Tachileik MMR016009\n6  Shan (North)   MMR015    Hopang MMR015D006    Hopang MMR015021\n7  Shan (North)   MMR015    Hopang MMR015D006   Mongmao MMR015008\n8  Shan (North)   MMR015    Lashio MMR015D001   Mongyai MMR015003\n9  Shan (North)   MMR015    Lashio MMR015D001   Tangyan MMR015004\n10 Shan (North)   MMR015    Matman MMR015D007    Matman MMR015024\n                         geometry\n1  MULTIPOLYGON (((99.17944 20...\n2  MULTIPOLYGON (((98.50567 20...\n3  MULTIPOLYGON (((100.0708 21...\n4  MULTIPOLYGON (((101.1053 21...\n5  MULTIPOLYGON (((100.3687 21...\n6  MULTIPOLYGON (((98.88008 23...\n7  MULTIPOLYGON (((98.94264 23...\n8  MULTIPOLYGON (((98.04246 22...\n9  MULTIPOLYGON (((98.27834 22...\n10 MULTIPOLYGON (((98.9057 22....\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"Shan (East)\", \"…\n$ ST_PCODE &lt;chr&gt; \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR016\", \"MMR015\", \"…\n$ DT       &lt;chr&gt; \"Monghsat\", \"Monghsat\", \"Tachileik\", \"Tachileik\", \"Tachileik\"…\n$ DT_PCODE &lt;chr&gt; \"MMR016D002\", \"MMR016D002\", \"MMR016D003\", \"MMR016D003\", \"MMR0…\n$ TS       &lt;chr&gt; \"Monghsat\", \"Mongton\", \"Monghpyak\", \"Mongyawng\", \"Tachileik\",…\n$ TS_PCODE &lt;chr&gt; \"MMR016006\", \"MMR016008\", \"MMR016010\", \"MMR016011\", \"MMR01600…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((99.17944 20..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict &lt;- read_csv (\"../../data/aspatial/Shan-ICT.csv\")\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\n\n\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#exploratory-data-analysis-eda",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#exploratory-data-analysis-eda",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "We can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nIn the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"../../data/rds/week8/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\nshan_sf &lt;- read_rds(\"../../data/rds/week8/shan_sf.rds\")\n\n\n\n\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\") + tm_fill()\n\n\n\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nCan you identify the differences?"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#correlation-analysis",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#correlation-analysis",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Before we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#hierarchy-cluster-analysis",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#hierarchy-cluster-analysis",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\n2    Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\n3  Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\n4  Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\n5  Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\n6     Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\n7    Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\n8    Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\n9    Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\n10    Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMonghsat   Monghsat 107.6749 460.1169  34.508769 189.51537   22.817273\nMongton     Mongton 193.5181 388.4453  25.129169 290.51198   21.841240\nMonghpyak Monghpyak 405.0284 503.3252  42.497972 381.83293   25.141930\nMongyawng Mongyawng 278.0850 739.2953 121.978196 324.06383   15.326276\nTachileik Tachileik 363.3535 759.4214  59.751756 735.43090   92.401937\nHopang       Hopang 127.6044 556.8737  81.746586 487.68817   24.523976\nMongmao     Mongmao 120.0574 512.6855  85.495452 424.98803   11.297271\nMongyai     Mongyai 168.4424 364.2707  20.333133 135.12905    9.378752\nTangyan     Tangyan 223.8632 453.2753  22.594047 105.23021   12.065335\nMatman       Matman 244.1230 219.4093   8.438819  45.20796    6.027728\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\n\n\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n            Monghsat   Mongton Monghpyak Mongyawng Tachileik    Hopang\nMongton    150.98053                                                  \nMonghpyak  356.84917 258.04282                                        \nMongyawng  364.40429 375.22688 285.56475                              \nTachileik  677.09508 608.76740 444.04411 432.10118                    \nHopang     317.64824 273.50305 304.26577 290.51360 403.82035          \nMongmao    247.17708 206.57001 291.88846 296.40789 472.95568  78.29342\nMongyai    127.35225 159.79790 370.01575 445.78964 750.29555 408.73288\nTangyan    144.59626 198.88460 335.26416 377.52279 719.84066 412.22167\nMatman     313.59911 303.04574 470.46845 601.80824 890.12935 573.55355\nNarphan    278.21548 215.97925 448.40651 572.76394 760.29566 397.85908\nPangsang   256.37933 210.77938 315.11651 336.16703 481.31907  92.57672\nMabein     470.48135 425.16902 212.69450 193.49994 365.32538 368.55167\nMongmit    214.20854 192.67961 177.76325 214.21738 529.63213 281.05362\nKutkai     154.32012 107.06341 206.61627 281.03383 568.99109 263.31986\nMuse       663.76026 634.71074 539.43485 422.37358 221.19950 377.44407\nNamhkan    455.10875 414.53594 379.50202 321.21112 295.91660 146.18632\nManton     317.15603 310.20581 502.20840 629.43339 910.23039 577.52046\nNamhsan    169.56962 196.76188 352.70492 430.02019 754.03913 440.51555\nKengtung   383.72138 329.38387 221.47613 203.87199 295.90429 164.29921\nMongkhet   167.98445 223.22828 462.63265 522.91815 820.50164 451.51070\nMongla     429.00536 411.06668 408.03397 315.57550 347.33155 147.02444\nMongping   140.95392 119.86993 354.76537 455.59190 727.08969 379.27212\nMongyang   312.64797 295.60023 358.17599 304.21734 448.79027  69.25859\nPangwaun   343.53898 257.50434 381.95144 475.33116 540.60474 206.98364\nKonkyan    268.25060 248.25265 463.39594 522.38580 730.92980 348.18522\nLaukkaing  626.44910 604.66190 565.84279 454.80044 325.06329 331.67199\nHsipaw     121.78922  90.69766 237.67919 294.70967 576.18780 248.72536\nKyaukme    253.25370 229.28509 217.64419 181.55295 429.15493 154.91633\nNamtu      231.78673 308.71751 346.57799 262.24331 659.56458 408.24516\nNawnghkio  289.83220 225.81118  93.03711 220.61209 470.45533 279.84188\nHseni      331.22632 286.75945 200.26876 173.86004 354.90063 162.80878\nKunlong    202.31862 270.02165 357.44661 240.39800 595.70536 271.34451\nLashio     377.86793 347.11584 262.09281 172.70139 311.95286 170.63913\nPindaya    314.71506 283.35574 221.30579 332.92193 635.51774 443.26362\nYwangan    432.98028 361.23257 367.44835 570.56521 807.44220 596.19312\nLangkho    279.52329 236.70878 200.27496 186.11584 402.33622 134.24847\nMawkmai    275.09705 313.35220 536.71695 620.04321 919.38755 561.24281\nMongnai    125.25968 131.67061 253.26470 275.77546 563.95232 243.00945\nMongpan    283.30992 200.31803 187.85699 275.15989 411.03849 135.62913\nKunhing    165.38834 114.03609 250.74435 295.35984 532.26397 172.96164\nKyethi     190.50609 222.52947 328.16234 387.71518 728.87329 440.48114\nLaihka     158.93517 212.07320 293.22640 211.99976 549.08985 230.78652\nLoilen     118.65144 176.16001 296.99681 261.75211 573.75476 242.89326\nMonghsu    137.24737 107.04894 232.17823 312.85089 605.02113 301.84458\nMongkaing  375.60376 365.50032 568.21089 700.98284 967.14087 626.17673\nNansang    201.92690 199.58124 227.52638 191.11990 486.77266 196.47091\nHopong     100.45714 106.21031 267.95563 326.59925 632.45718 309.77356\nHsihseng   153.49551 194.64317 285.37627 309.51462 658.87060 370.01334\nPinlaung   160.44703 163.42143 222.20020 235.55497 555.01039 265.96924\nKalaw      317.96188 267.87522 167.08436 173.43078 373.64459 185.14704\nLawksawk   352.31496 311.07742 142.31691 179.07229 441.82621 321.16462\nNyaungshwe 286.37238 219.72196 103.97300 218.12104 445.81335 247.19891\nPekon      225.64279 208.14888 190.93173 248.43910 573.39528 336.38582\nTaunggyi   562.88102 508.40925 334.17439 287.73864 150.84117 329.95252\n             Mongmao   Mongyai   Tangyan    Matman   Narphan  Pangsang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai    335.61300                                                  \nTangyan    347.14183 109.08506                                        \nMatman     501.59903 186.95158 242.78233                              \nNarphan    331.42618 248.82845 348.84991 312.05193                    \nPangsang    57.60801 343.30638 364.76893 506.29940 316.30314          \nMabein     384.91867 516.40426 448.59948 637.53975 630.34312 418.54016\nMongmit    242.54541 256.72744 195.92520 401.25041 406.15714 272.67383\nKutkai     204.69232 188.94166 166.61820 340.86349 314.27683 228.33583\nMuse       451.82530 763.91399 736.93741 929.11283 770.40234 460.24292\nNamhkan    223.32205 550.62819 542.64078 715.42102 536.85519 231.38484\nManton     503.79786 195.59882 271.82672  59.52318 280.26395 504.75214\nNamhsan    371.71448  77.35900  63.67613 180.09747 316.54695 385.65526\nKengtung   207.58055 460.39706 429.95076 613.01033 505.40025 229.85484\nMongkhet   375.35820 104.98924 201.49393 203.02855 217.28718 375.58139\nMongla     216.24705 535.28615 526.80849 708.17595 531.46949 217.88123\nMongping   305.57166  65.38727 161.67411 201.65224 188.64567 308.33123\nMongyang    91.06281 414.31237 421.06366 585.61776 401.39475 108.37735\nPangwaun   187.40057 394.07696 447.05580 523.43600 264.64997 157.48757\nKonkyan    281.87425 287.87384 367.46064 392.40306 158.82353 274.81900\nLaukkaing  404.00848 732.68347 722.40954 903.72094 708.82887 408.04016\nHsipaw     185.99483 177.33790 167.69794 344.45451 295.40170 205.04337\nKyaukme    146.09228 339.27780 306.78359 505.52285 420.30003 175.35273\nNamtu      365.03882 278.02761 178.69483 416.65397 494.36143 392.97391\nNawnghkio  257.76465 319.57938 269.07880 444.05061 435.59661 287.10769\nHseni      184.67099 408.23212 373.07575 564.64051 474.12297 214.66375\nKunlong    224.43391 299.36066 268.07983 468.27436 413.07823 258.49342\nLashio     214.23677 466.36472 429.84475 628.11049 525.63854 236.72516\nPindaya    402.21719 287.41816 208.43740 354.39039 474.50209 428.24958\nYwangan    542.85957 333.12853 324.77002 255.22031 452.95769 556.82263\nLangkho    134.50170 358.95672 332.02048 518.86151 420.65204 167.65920\nMawkmai    485.52853 178.70499 262.66006 147.83545 273.75350 484.14757\nMongnai    188.29603 203.23607 180.37471 376.33870 329.31700 204.25746\nMongpan    131.59966 346.39710 340.39128 494.81014 371.13393 140.23910\nKunhing    103.91040 238.99570 249.74161 403.66587 281.62645 123.18870\nKyethi     377.89657 137.79420  47.79331 233.83079 374.90376 396.89963\nLaihka     185.99082 264.13364 224.29176 443.25453 392.32592 214.19291\nLoilen     190.26490 224.79239 196.60826 406.56282 354.79137 207.94433\nMonghsu    242.43599 154.86049 127.42203 308.13805 311.92379 260.52971\nMongkaing  552.31959 262.84016 348.56123 135.51424 285.65085 548.40662\nNansang    164.99494 288.55962 249.70235 458.06573 398.13308 193.36162\nHopong     244.16253 124.62791 106.82328 291.84351 294.40441 261.51075\nHsihseng   311.98001 162.27126  70.27241 304.02806 377.52977 335.52974\nPinlaung   217.58854 220.56339 169.50567 382.40610 371.26895 244.47146\nKalaw      195.18913 386.74701 348.06617 537.63884 463.53759 224.03998\nLawksawk   314.64777 391.26989 323.14701 515.39711 523.69580 345.91486\nNyaungshwe 230.45003 327.13541 284.14692 460.91883 427.94086 257.77823\nPekon      293.70625 242.52301 167.79937 368.25761 416.84901 321.81214\nTaunggyi   387.33906 635.94105 592.65262 778.45810 684.20905 405.59730\n              Mabein   Mongmit    Kutkai      Muse   Namhkan    Manton\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit    263.37099                                                  \nKutkai     340.55064  97.61092                                        \nMuse       453.27410 563.01629 592.90743                              \nNamhkan    379.56035 386.02794 392.48568 238.67060                    \nManton     674.01120 430.64070 361.82684 941.49778 721.86149          \nNamhsan    488.33873 237.78494 191.32762 778.52971 576.42717 210.48485\nKengtung   219.47071 246.45691 279.19573 330.08211 175.63015 631.99123\nMongkhet   610.30557 349.45980 273.91673 816.44931 596.19944 181.33894\nMongla     406.09124 384.30076 388.40984 256.80556  77.21355 712.51416\nMongping   518.16310 265.12574 182.75266 744.44948 523.74815 200.48082\nMongyang   411.88352 309.51302 285.33223 389.59919 167.72448 585.70558\nPangwaun   523.44632 381.51246 321.80465 541.97887 310.44067 510.79265\nKonkyan    613.51206 403.39082 310.60810 704.86973 481.59596 366.66876\nLaukkaing  520.67373 568.27732 580.38112 149.26996 196.46063 907.38406\nHsipaw     366.42787 118.18050  51.46282 591.03355 382.79302 359.60008\nKyaukme    264.88283 144.02475 170.93318 434.75768 247.81990 522.86003\nNamtu      366.16094 179.62251 225.28268 659.16927 506.32466 448.58230\nNawnghkio  204.63154  89.07103 147.44053 533.68806 367.33575 475.77296\nHseni      213.61240 189.37188 229.37894 381.30567 212.11323 584.63341\nKunlong    396.61508 224.12169 204.54010 547.24297 375.73885 479.76855\nLashio     231.28227 251.29457 289.82513 313.15288 173.27153 646.66493\nPindaya    313.45776 171.86828 212.81775 704.11252 543.81859 402.42888\nYwangan    529.14689 381.88259 360.11861 899.44137 714.43173 306.16379\nLangkho    253.84371 164.26299 180.51419 413.64173 224.40029 535.95620\nMawkmai    693.24602 434.92968 364.95519 926.93007 706.47792 109.08779\nMongnai    358.86053 115.86190  91.15307 571.97975 370.05669 391.54062\nMongpan    301.52942 193.32063 185.18173 447.49969 240.34131 507.96808\nKunhing    375.82140 173.50424 108.84990 533.00162 314.92119 410.49230\nKyethi     442.07679 202.92551 184.23422 757.16745 567.86202 272.03299\nLaihka     345.00222 141.87227 144.67198 526.65211 342.43665 458.30232\nLoilen     375.06406 145.48666 131.56529 560.43400 364.90647 419.06087\nMonghsu    367.19820 109.15790  62.60859 633.21624 431.32637 330.76503\nMongkaing  747.17454 503.61965 428.96133 995.66496 771.39688  81.75337\nNansang    287.92364 104.91839 130.04549 489.35308 302.89487 476.55544\nHopong     398.00917 136.93111  73.45899 648.68011 444.13246 310.58885\nHsihseng   381.20187 131.49728 128.21054 677.66886 492.09476 334.87758\nPinlaung   312.66966  57.46286  78.07733 571.58335 382.78835 405.83081\nKalaw      198.14085 160.05997 204.93018 412.46033 246.39577 560.16577\nLawksawk   130.36525 140.11550 224.64646 510.13288 379.41126 551.13000\nNyaungshwe 210.21337  99.38590 152.15482 505.88581 333.32428 488.79874\nPekon      282.26877  59.61977 114.98048 614.56144 442.77120 403.82131\nTaunggyi   226.24011 399.84278 450.33382 250.81471 257.29147 803.08034\n             Namhsan  Kengtung  Mongkhet    Mongla  Mongping  Mongyang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung   466.20497                                                  \nMongkhet   170.90848 531.35998                                        \nMongla     564.02740 202.45004 574.40292                              \nMongping   130.23777 442.80821 113.80917 512.61580                    \nMongyang   450.97869 217.08047 445.40621 146.66661 387.80686          \nPangwaun   448.58030 337.48335 407.02947 319.18643 340.37881 225.25026\nKonkyan    352.20115 474.82621 254.24424 468.09747 242.02901 329.39338\nLaukkaing  760.45960 351.48520 769.06406 202.55831 708.13447 326.19219\nHsipaw     194.47928 284.08582 253.80950 373.47509 168.92101 267.10497\nKyaukme    347.85944 136.23356 409.03553 241.58966 330.28984 188.59489\nNamtu      240.95555 385.33554 355.99713 483.49434 321.66441 413.26052\nNawnghkio  299.74967 208.29647 414.10280 381.40808 316.14719 323.32123\nHseni      411.96125  66.12817 481.88406 226.82048 395.58453 210.19929\nKunlong    310.40560 317.14187 341.68641 346.46200 309.05385 247.22785\nLashio     472.04024  59.85893 534.44463 179.95877 454.52548 209.33700\nPindaya    228.41073 385.68322 391.74783 549.42389 310.64850 475.93982\nYwangan    286.16305 573.23173 408.97731 728.16301 337.94020 630.71590\nLangkho    368.20978 107.16213 428.08061 229.01675 343.96455 175.35413\nMawkmai    215.19289 632.54638 115.58388 686.88950 194.31049 558.83162\nMongnai    218.10003 272.28711 275.76855 354.10985 202.99615 260.39387\nMongpan    364.77086 142.21554 412.17123 253.20001 318.47482 194.93467\nKunhing    270.79121 245.95083 292.49814 306.47566 212.59619 188.89405\nKyethi      68.67929 444.26274 233.25039 556.02500 187.43974 453.86726\nLaihka     273.79672 258.23950 324.97428 315.93218 272.82761 229.71502\nLoilen     242.15271 282.22935 284.76895 338.67408 231.99959 246.76592\nMonghsu    153.22576 316.91914 247.73318 424.51868 158.90478 323.95988\nMongkaing  288.66231 692.74693 222.60577 761.48327 257.18572 631.91325\nNansang    294.16284 193.67980 360.99219 289.45119 287.36626 218.49285\nHopong     132.70541 340.47382 212.99485 432.31105 134.00139 323.35704\nHsihseng   125.74240 370.72441 256.70338 478.66210 199.64389 382.59743\nPinlaung   214.33352 263.48638 305.86058 372.59678 229.75261 286.03834\nKalaw      385.88676  88.29335 465.52013 260.26411 375.64739 233.56349\nLawksawk   362.84062 209.38215 487.41102 393.18472 396.47081 363.37684\nNyaungshwe 315.91750 177.75714 417.08639 347.60273 319.32583 294.29500\nPekon      207.16559 297.67761 342.08722 441.20998 259.68288 363.58788\nTaunggyi   631.49232 186.28225 712.80752 297.09863 621.53039 374.58247\n            Pangwaun   Konkyan Laukkaing    Hsipaw   Kyaukme     Namtu\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan    263.97576                                                  \nLaukkaing  470.63605 635.92043                                        \nHsipaw     298.12447 296.74316 569.06099                              \nKyaukme    308.31407 393.79911 428.74978 163.95741                    \nNamtu      517.03554 478.37690 664.06286 229.44658 270.87277          \nNawnghkio  381.67478 439.34272 552.65554 176.09570 157.04230 257.52713\nHseni      330.70182 448.84563 391.74585 231.48538  81.20593 327.41448\nKunlong    392.45403 329.11433 521.88657 205.10051 215.63037 233.60474\nLashio     362.45608 485.51312 334.65738 290.86435 129.95255 365.88437\nPindaya    512.13162 500.86933 726.85355 245.98884 311.01487 225.40822\nYwangan    580.13146 528.12533 908.82520 388.63147 505.89191 444.66868\nLangkho    295.38434 386.95022 410.41270 183.05109  51.67279 305.03473\nMawkmai    500.68857 339.01411 882.51110 351.34601 512.02846 427.95451\nMongnai    312.13429 328.82831 551.56800  52.68195 142.45669 209.35473\nMongpan    232.52209 365.87588 435.58047 179.52054 110.37831 352.91394\nKunhing    229.09986 253.74202 500.41640  90.77517 145.00266 296.43996\nKyethi     476.62610 400.10989 749.99415 195.17677 328.14177 186.90932\nLaihka     351.78203 351.75354 507.39700 128.42987 128.24979 185.86794\nLoilen     331.69981 334.19820 535.57527  98.04789 146.92675 194.24075\nMonghsu    343.38498 331.72187 619.01766  58.55724 200.77712 209.64684\nMongkaing  536.95736 380.92091 954.11795 423.77868 586.05094 525.04057\nNansang    326.12960 374.70456 480.60074 120.24428  60.32773 217.61884\nHopong     346.00673 304.49287 628.48557  62.86179 218.84211 206.82668\nHsihseng   433.06326 383.49700 670.74564 136.54610 250.27059 131.89940\nPinlaung   356.37963 365.44693 563.81750  76.55260 139.67966 170.04533\nKalaw      338.35194 444.75859 427.77791 212.36711  79.42225 307.27427\nLawksawk   453.02765 520.31264 548.83928 249.35081 186.29066 260.95300\nNyaungshwe 352.92324 432.35040 520.24345 169.92664 126.50414 271.41464\nPekon      423.81347 421.48797 624.82399 145.37542 202.12206 165.02707\nTaunggyi   497.61245 650.56905 345.98041 462.31183 312.60547 518.72748\n           Nawnghkio     Hseni   Kunlong    Lashio   Pindaya   Ywangan\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni      164.05304                                                  \nKunlong    285.04608 276.19175                                        \nLashio     230.55346  79.41836 295.23103                              \nPindaya    180.64047 337.98982 355.47066 398.98167                    \nYwangan    377.87702 534.44679 531.63089 602.17475 257.31610          \nLangkho    156.51662  66.66133 224.52741 115.18145 323.28133 507.78892\nMawkmai    495.15047 582.53670 446.53763 638.60773 437.99577 397.03752\nMongnai    182.21245 216.81639 202.92529 270.86983 258.49346 422.71934\nMongpan    172.84425 120.66550 288.03320 172.33279 335.72896 483.68125\nKunhing    206.15773 206.47448 193.77551 255.10832 318.23811 449.67218\nKyethi     267.21607 388.33498 298.55859 447.10266 175.54012 287.29358\nLaihka     211.88187 204.49010 122.68682 238.64533 298.61288 491.83321\nLoilen     219.26405 227.10984 166.53599 268.92310 293.61143 469.51621\nMonghsu    170.09168 262.28462 239.89665 325.71557 198.35391 340.42789\nMongkaing  546.69447 648.04408 539.91284 708.65819 481.71125 364.98429\nNansang    151.13185 136.45492 183.01388 184.47950 275.44246 472.77637\nHopong     204.88286 286.41193 219.06817 345.31042 223.06050 352.85844\nHsihseng   209.88026 312.74375 231.85967 369.00833 172.00796 342.91035\nPinlaung   139.27495 204.47572 194.76257 262.51735 208.63519 400.05492\nKalaw      127.74787  38.52842 273.01375 106.69059 302.51785 499.53297\nLawksawk    90.82891 171.50398 318.30406 220.75270 204.32952 432.16535\nNyaungshwe  43.26545 130.86310 285.13095 201.58191 216.52463 407.11649\nPekon      113.15370 243.98001 249.36301 303.80011 117.91580 336.50410\nTaunggyi   344.79200 238.19389 471.29032 195.14541 503.75471 697.98323\n             Langkho   Mawkmai   Mongnai   Mongpan   Kunhing    Kyethi\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai    531.08019                                                  \nMongnai    174.67678 374.50873                                        \nMongpan     94.98486 509.99632 178.09554                              \nKunhing    146.38284 398.43973 110.55197 137.85278                    \nKyethi     350.91512 278.85535 210.50453 358.89620 278.95182          \nLaihka     160.94435 429.96554 100.53457 210.76951 142.03682 255.83275\nLoilen     184.10672 388.73386  58.41263 207.25000 130.39336 232.32965\nMonghsu    221.84918 332.07962  84.11238 216.25326 146.78891 146.61572\nMongkaing  597.42714 133.29995 456.00842 563.56780 465.03971 352.06533\nNansang     99.39859 462.41938  92.79567 144.77393 128.20940 273.02385\nHopong     239.63685 302.84362  91.53795 239.43845 145.15617 136.49038\nHsihseng   276.27441 329.29477 142.36728 295.87811 220.15490  84.04049\nPinlaung   168.44228 398.11227  64.52387 192.78316 141.58836 189.47065\nKalaw       67.19580 562.59200 200.34668 114.69105 197.63683 360.17247\nLawksawk   190.30257 567.52693 241.71260 228.54223 278.68953 317.74604\nNyaungshwe 128.26577 502.99026 169.63695 137.29734 189.97131 288.06872\nPekon      219.21623 416.00669 151.60031 243.30037 213.46379 162.43575\nTaunggyi   288.27478 810.74692 448.55282 319.81385 429.98509 599.57407\n              Laihka    Loilen   Monghsu Mongkaing   Nansang    Hopong\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai                                                               \nMongnai                                                               \nMongpan                                                               \nKunhing                                                               \nKyethi                                                                \nLaihka                                                                \nLoilen      59.69478                                                  \nMonghsu    163.28926 131.55208                                        \nMongkaing  522.96309 482.18190 400.71816                              \nNansang     78.78999  94.23028 153.59962 542.16609                    \nHopong     157.48857 124.74445  43.40665 379.37916 167.66291          \nHsihseng   175.89761 158.84853  97.82470 411.59788 193.53779  91.65458\nPinlaung   101.10150  91.56527  80.86834 476.29056  85.49572  98.14855\nKalaw      197.34633 217.19877 237.34578 625.24500 124.30500 264.16294\nLawksawk   246.74469 265.29318 242.04063 625.18712 188.78869 274.91604\nNyaungshwe 201.71653 206.40432 173.82799 557.32112 131.18943 209.32532\nPekon      182.23667 181.94596 113.84636 480.23965 160.37607 138.86577\nTaunggyi   425.36916 455.91617 486.91951 866.21117 365.04897 513.76415\n            Hsihseng  Pinlaung     Kalaw  Lawksawk Nyaungshwe     Pekon\nMongton                                                                \nMonghpyak                                                              \nMongyawng                                                              \nTachileik                                                              \nHopang                                                                 \nMongmao                                                                \nMongyai                                                                \nTangyan                                                                \nMatman                                                                 \nNarphan                                                                \nPangsang                                                               \nMabein                                                                 \nMongmit                                                                \nKutkai                                                                 \nMuse                                                                   \nNamhkan                                                                \nManton                                                                 \nNamhsan                                                                \nKengtung                                                               \nMongkhet                                                               \nMongla                                                                 \nMongping                                                               \nMongyang                                                               \nPangwaun                                                               \nKonkyan                                                                \nLaukkaing                                                              \nHsipaw                                                                 \nKyaukme                                                                \nNamtu                                                                  \nNawnghkio                                                              \nHseni                                                                  \nKunlong                                                                \nLashio                                                                 \nPindaya                                                                \nYwangan                                                                \nLangkho                                                                \nMawkmai                                                                \nMongnai                                                                \nMongpan                                                                \nKunhing                                                                \nKyethi                                                                 \nLaihka                                                                 \nLoilen                                                                 \nMonghsu                                                                \nMongkaing                                                              \nNansang                                                                \nHopong                                                                 \nHsihseng                                                               \nPinlaung   111.61846                                                   \nKalaw      287.11074 181.96406                                         \nLawksawk   257.11202 192.57320 140.01101                               \nNyaungshwe 225.80242 138.12050  95.66782 104.17830                     \nPekon      105.30573  94.61225 211.91531 157.51129  139.31874          \nTaunggyi   528.14240 429.54386 252.26066 304.96838  325.09619 440.66133\n\n\n\n\n\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\nPERSONAL OBSERVATION: SAME AS KMEANS Clustering –&gt; elbow method. Most important overarching concept concept: Bias variance tradeoff!\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\nPERSONAL NOTE: Same as a migration patterns study I found online previously! Used to find which point in TIME different races from other countries mixed with racial groups in India such as the Iranian farmers.\n\n\n\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\nRADIO_PRTV_PRLLPHONE_PRMPHONE_PRCOMPUTER_PRNarphanPangwaunMongpanNansangKyaukmeKalawHseniLangkhoKunhingLaihkaMonghsatLoilenMongnaiMongtonHsipawHopongMonghsuPinlaungMongmitPekonKutkaiNamtuHsihsengKyethiTangyanNamhsanMongyaiMongpingMongkhetMawkmaiMongkaingMantonMatmanYwanganPindayaLawksawkNyaungshweNawnghkioMonghpyakMabeinMongyawngKunlongKonkyanMongyangMongmaoHopangNamhkanLaukkaingMonglaPangsangKengtungLashioTaunggyiTachileikMuse\n0.000.250.500.751.00Geographic Segmentation of Shan State by ICT indicatorsICT IndicatorsTownships of Shan State\n\n\n\n\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#spatially-constrained-clustering-skater-approach",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#spatially-constrained-clustering-skater-approach",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\nThis code junk is unnecessary now!\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\n#plot(shan_sp, \n#     border=grey(.5))\n#plot(shan.nb, \n#     coordinates(shan_sp), \n#     col=\"blue\", \n#     add=TRUE)\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn      S0       S1        S2\nB 55 3025 76338.3 58090482 524376272\n\n\n\n\n\n\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   50  94.61225\n[2,]   50   53 138.12050\n[3,]   53   51  95.66782\n[4,]   51   52 140.01101\n[5,]   52   31  90.82891\n[6,]   31   29 157.04230\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\n#plot(shan_sp, border=gray(.5))\n#plot.mst(shan.mst, \n#         coordinates(shan_sp), \n#         col=\"blue\", \n#         cex.lab=0.7, \n#         cex.circles=0.005, \n#        add=TRUE)\n\n\n\n\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 2 2 2 2 2 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 35 51 52 14 50 54 53 31 29 55 ...\n  .. ..$ edge: num [1:10, 1:3] 51 14 52 50 54 53 51 31 29 52 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 25 7 4 22 17 15 6 24 20 12 ...\n  .. ..$ edge: num [1:17, 1:3] 4 15 17 22 6 24 15 20 7 15 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 39 42 9 19 8 45 49 23 2 28 ...\n  .. ..$ edge: num [1:21, 1:3] 42 19 9 49 23 8 2 45 28 39 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 37 40\n  .. ..$ edge: num [1, 1:3] 37 40 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 11\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 36\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 2 2 2 2 2 3 3 3 5 2 1 1 2 2 2 3 3 2 3 2 3 2 2 2 2 3 1 3 1 2 2 2 1 6 4 3\n[39] 3 4 3 3 3 3 3 3 3 3 3 1 1 1 1 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n11 18 22  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\n#plot(shan_sp, border=gray(.5))\n#plot(clust6, \n#     coordinates(shan_sp), \n#     cex.lab=.7,\n#     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n#     cex.circles=0.005, \n#     add=TRUE)\n\n\n\n\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#spatially-constrained-clustering-clustgeo-method",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#spatially-constrained-clustering-clustgeo-method",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "In this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.3 will be used as shown in the code chunk below.\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster objecct.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nWe can now plot the map of the newly delineated spatially constrained clusters."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#visual-interpretation-of-clusters",
    "href": "In-class_Ex/In-class_Ex09/Inclass_Ex09.html#visual-interpretation-of-clusters",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Code chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\n\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               237.        402.            23.9           134.\n2 2               221.        521.            44.2           246.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5                98.6       499.            74.5           468.\n6 6               124.        224.            38.0           132.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;\n\n\nPersonal reflection:\nThis exercise was enlightening in finding out ways to visualise how the clustering algorithms find split points to split the clusters and allows data scientists to understand the decision points, such as certain behaviours of that group, that led to a machine learning model to split the data for that cluster. The dendogram was especially useful for understanding these. This was especially enlightening when i found other real world applications such as Tracking Viruses through Phylogenetic Trees (https://towardsdatascience.com/hierarchical-clustering-and-its-applications-41c1ad4441a6). However, certain plotting libraries used here such as arulesViz are very outdated and kept throwing errors during the rendering process such as . It could be because not enough developers are continously updating the project to keep it forward compatible with newest technologies such as the macbook pro and latest windows os systems. Thus, more updated interactive plotting libraries R that have more developers working on them continously can be used instead.\n\n\n\n\nhttps://r4gdsa.netlify.app/chap09.html\nhttps://r4gdsa.netlify.app/chap10.html\nFile Management:\n\nhttps://www.geeksforgeeks.org/file-handling-in-r-programming/"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html",
    "href": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Two data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)\n\n\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, ggstatsplot)\n\n\n\n\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis.\n\n\n\n\n\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"../../data/geospatial/week10\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week10' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\n\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\n\n\n\n\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"../../data/aspatial/week10/Condo_resale_2015.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nPersonal Notes:\n\nggcorrmat: This is another package that does the same thing.\n\n\nggcorrmat(condo_resale[,5:23])"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#the-data",
    "href": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#the-data",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "Two data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#getting-started",
    "href": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#getting-started",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "The code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, ggstatsplot)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#a-short-note-about-gwmodel",
    "href": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#a-short-note-about-gwmodel",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "GWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#geospatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#geospatial-data-wrangling",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "The geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"../../data/geospatial/week10\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week10' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\n\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#aspatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex010/Inclass_Ex010.html#aspatial-data-wrangling",
    "title": "In-Class Exercise 9: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "",
    "text": "The condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"../../data/aspatial/week10/Condo_resale_2015.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nPersonal Notes:\n\nggcorrmat: This is another package that does the same thing.\n\n\nggcorrmat(condo_resale[,5:23])"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html",
    "href": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "Two data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)\n\n\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, ggstatsplot)\n\n\n\n\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis.\n\n\n\n\n\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"../../data/geospatial/week10\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week10' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\n\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\n\n\n\n\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"../../data/aspatial/week10/Condo_resale_2015.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nPersonal Notes:\n\nggcorrmat: This is another package that does the same thing.\n\n\nggcorrmat(condo_resale[,5:23])\n\n\n\n\n\n\n\n\n\n\n\nIn this code, using SELLING_PRICE, ,AREA_SQM and AGE as predictors/independent variables for building the model:\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.592 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.592                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nWe use the function tbl_regression to create a regression report:\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n\n\nAREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n\n\nAGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n\n\nPROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n\n\nPROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n\n\nPROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n\n\nPROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n\n\nPROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n\n\nPROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n\n\nPROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n\n\nPROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n\n\nPROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n\n\nNO_Of_UNITS\n-245\n-418, -73\n0.005\n\n\nFAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n\n\nFREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\nWe can change the report slightly to gives additional information such as R square value and adjusted R square value and other metrics. This is a frequently tested machine learning concept. Interesting! Adding more metrics:\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n\n\n\nmlr.p &lt;- ggcoefstats(condo.mlr1, sort = \"ascending\")\nmlr.p\n\n\n\n\n\n\n\n\nPersonal questions and notes:\n\nwhy is this plot much more messier than prof’s plot? Ans: need to adjust figure’s height and width\nSeeing a shorter line/interval indicates higher confidence than a longer line which indicates that the value is less stable resulting in higher range of possible values for the independent variable\nif coefficient/independent variable is not normally distributed, replace “parametric” with “median” variable for meta.type variable in ggcoefstats function\nusing sort=“ascending” will make clearer.\nInterpreting B: Any one unit increase of independent variable, there will be increase in resale price. E.g. 1 m^2 increaes in area_sqm results in 12777.52 increase in resale price.\nimportant to specify longlat as False since the lat long has already been projected above (in metres!) to the correct distance so the circles do not have be recalculated\nthe cv value converges eventually to get the fixed distance\n\nThe cv value converges eventually to get the fixed distance\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 22\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.379526e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3396 CV score: 4.721292e+14 \nFixed bandwidth: 971.3402 CV score: 4.721292e+14 \nFixed bandwidth: 971.3398 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3399 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \n\n\nWe can round up the final result 971…m to 1000m.\nGWModel method\n\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 11:28:36.457911 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.34 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3599e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7426e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5001e+06 -1.5970e+05  3.1970e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8074e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112794435\n   AREA_SQM                 21575\n   AGE                     434203\n   PROX_CBD               2704604\n   PROX_CHILDCARE         1654086\n   PROX_ELDERLYCARE      38867861\n   PROX_URA_GROWTH_AREA  78515805\n   PROX_MRT               3124325\n   PROX_PARK             18122439\n   PROX_PRIMARY_SCH       4637517\n   PROX_SHOPPING_MALL     1529953\n   PROX_BUS_STOP         11342209\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720745\n   FREEHOLD               6073642\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3807 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6193 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.534069e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430418 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 11:28:37.365182 \n\n\nGeogrpahically weighted result such as the “GWR coefficient estimates” and “model calibration” results are the new additional insights we can get from the above chart. It will build multiple models, each with their own estimates. The significance stars report can be compared with the diagnostic information. Both of them have r squared and r square adjusted metrics (which is used to compare the performance of models). Spatially accounting for the model - improved the explanatory power of model - one can account for 84% of the model while other one only accounts for 64% of the model!\nThe number of neighbors for best CV value is recommended in adaptive bandwith method. It shows that 30 neighbors is the recommended data points to be used below. Personal observation: At one point it goes below 30 and adjusts itself to converge to 30 for optimal CV value.\n\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\n\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 11:28:44.258418 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 11:28:45.260326 \n\n\nThe model can be explained by up to 85%! It is a light increase from fixed bandwidth method. gwr.adaptive variable can be inspective for each variable standard error in the format (feature_name)_SE\nWe are interested in the SDF which has the spatial points so use dollar sign to get the subset of table:\n\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.95        0   -0.72065801   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 76\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\nBy URA Planning region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#the-data",
    "href": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#the-data",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "Two data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#getting-started",
    "href": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#getting-started",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "The code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, ggstatsplot)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#a-short-note-about-gwmodel",
    "href": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#a-short-note-about-gwmodel",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "GWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#geospatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#geospatial-data-wrangling",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "The geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"../../data/geospatial/week10\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week10' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\n\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#aspatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#aspatial-data-wrangling",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "The condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"../../data/aspatial/week10/Condo_resale_2015.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nPersonal Notes:\n\nggcorrmat: This is another package that does the same thing.\n\n\nggcorrmat(condo_resale[,5:23])\n\n\n\n\n\n\n\n\n\n\n\nIn this code, using SELLING_PRICE, ,AREA_SQM and AGE as predictors/independent variables for building the model:\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.592 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.592                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nWe use the function tbl_regression to create a regression report:\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n\n\nAREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n\n\nAGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n\n\nPROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n\n\nPROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n\n\nPROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n\n\nPROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n\n\nPROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n\n\nPROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n\n\nPROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n\n\nPROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n\n\nPROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n\n\nNO_Of_UNITS\n-245\n-418, -73\n0.005\n\n\nFAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n\n\nFREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\nWe can change the report slightly to gives additional information such as R square value and adjusted R square value and other metrics. This is a frequently tested machine learning concept. Interesting! Adding more metrics:\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#overview",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#the-data",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "13.2 The Data",
    "text": "13.2 The Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#getting-started",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "13.3 Getting Started",
    "text": "13.3 Getting Started\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for calibrating geographical weighted family of models\n\nGWmodel\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#a-short-note-about-gwmodel",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#a-short-note-about-gwmodel",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "13.4 A short note about GWmodel",
    "text": "13.4 A short note about GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "13.5 Geospatial Data Wrangling",
    "text": "13.5 Geospatial Data Wrangling\n\n13.5.1 Importing geospatial data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"../../data/geospatial/week10\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week10' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\n13.5.2 Updating CRS information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#aspatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#aspatial-data-wrangling",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "13.6 Aspatial Data Wrangling",
    "text": "13.6 Aspatial Data Wrangling\n\n13.6.1 Importing the aspatial data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"../../data/aspatial/week10/Condo_resale_2015.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n13.6.2 Converting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "13.7 Exploratory Data Analysis (EDA)",
    "text": "13.7 Exploratory Data Analysis (EDA)\nIn the section, you will learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\n13.7.1 EDA using statistical graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nNow, you can plot the LOG_SELLING_PRICE using the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation.\n\n\n13.7.2 Multiple Histogram Plots distribution of variables\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n\n\n\n\n13.7.3 Drawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#hedonic-pricing-modelling-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "13.8 Hedonic Pricing Modelling in R",
    "text": "13.8 Hedonic Pricing Modelling in R\nIn this section, you will learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\n13.8.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices.\n\n\n13.8.2 Multiple Linear Regression Method\n\n13.8.2.1 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. In this section, the corrplot package will be used.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\n13.8.3 Building a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n13.8.4 Preparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.592 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.592                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n13.8.5 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n\n\nAREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n\n\nAGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n\n\nPROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n\n\nPROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n\n\nPROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n\n\nPROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n\n\nPROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n\n\nPROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n\n\nPROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n\n\nPROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n\n\nPROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n\n\nNO_Of_UNITS\n-245\n-418, -73\n0.005\n\n\nFAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n\n\nFREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nFor more customisation options, refer to Tutorial: tbl_regression\n\n13.8.5.1 Checking for multicolinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n13.8.5.2 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n13.8.5.3 Test for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\n13.8.5.4 Testing for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\nThe code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\nRemember to switch back to “plot” mode before continue.\n\ntmap_mode(\"plot\")\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "13.9 Building Hedonic Pricing Models using GWmodel",
    "text": "13.9 Building Hedonic Pricing Models using GWmodel\nIn this section, you are going to learn how to modelling hedonic pricing using both the fixed and adaptive bandwidth schemes\n\n13.9.1 Building Fixed Bandwidth GWR Model\n\n13.9.1.1 Computing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.379526e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3396 CV score: 4.721292e+14 \nFixed bandwidth: 971.3402 CV score: 4.721292e+14 \nFixed bandwidth: 971.3398 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3399 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres. (Quiz: Do you know why it is in metre?)\n\n\n13.9.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-15 10:16:03.088302 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.34 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3599e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7426e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5001e+06 -1.5970e+05  3.1970e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8074e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112794435\n   AREA_SQM                 21575\n   AGE                     434203\n   PROX_CBD               2704604\n   PROX_CHILDCARE         1654086\n   PROX_ELDERLYCARE      38867861\n   PROX_URA_GROWTH_AREA  78515805\n   PROX_MRT               3124325\n   PROX_PARK             18122439\n   PROX_PRIMARY_SCH       4637517\n   PROX_SHOPPING_MALL     1529953\n   PROX_BUS_STOP         11342209\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720745\n   FREEHOLD               6073642\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3807 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6193 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.534069e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430418 \n\n   ***********************************************************************\n   Program stops at: 2024-03-15 10:16:03.994538 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1.\n\n\n\n13.9.2 Building Adaptive Bandwidth GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\n13.9.2.1 Computing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n13.9.2.2 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\nThe code below can be used to display the model output.\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-15 10:16:11.121158 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-03-15 10:16:12.123898 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n\n13.9.3 Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n13.9.4 Converting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.95        0   -0.72065801   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n13.9.5 Visualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n\n13.9.6 Visualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"view\")\nAREA_SQM_SE &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n13.9.6.1 By URA Plannign Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#reflectionspersonal-take",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#reflectionspersonal-take",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "Reflections/Personal Take",
    "text": "Reflections/Personal Take\nThis hands on exercise was insightful in helping my understand spatial relations and how it can be used for predictive modelling. The problem of multicollinearity was also exciting to understand in this exercise as it is commonly discussed in machine learning blogs and understanding it in depth for spatial usecases was exciting for me."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex-10/Hands-on_Ex10.html#reference",
    "title": "Hands-on Exercise 10: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "13.10 Reference",
    "text": "13.10 Reference\n\nhttps://r4gdsa.netlify.app/chap13.html"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#visualising-coefficient",
    "href": "In-class_Ex/In-class_Ex10/Inclass_Ex10.html#visualising-coefficient",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "mlr.p &lt;- ggcoefstats(condo.mlr1, sort = \"ascending\")\nmlr.p\n\n\n\n\n\n\n\n\nPersonal questions and notes:\n\nwhy is this plot much more messier than prof’s plot? Ans: need to adjust figure’s height and width\nSeeing a shorter line/interval indicates higher confidence than a longer line which indicates that the value is less stable resulting in higher range of possible values for the independent variable\nif coefficient/independent variable is not normally distributed, replace “parametric” with “median” variable for meta.type variable in ggcoefstats function\nusing sort=“ascending” will make clearer.\nInterpreting B: Any one unit increase of independent variable, there will be increase in resale price. E.g. 1 m^2 increaes in area_sqm results in 12777.52 increase in resale price.\nimportant to specify longlat as False since the lat long has already been projected above (in metres!) to the correct distance so the circles do not have be recalculated\nthe cv value converges eventually to get the fixed distance\n\nThe cv value converges eventually to get the fixed distance\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 22\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.379526e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3396 CV score: 4.721292e+14 \nFixed bandwidth: 971.3402 CV score: 4.721292e+14 \nFixed bandwidth: 971.3398 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3399 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \n\n\nWe can round up the final result 971…m to 1000m.\nGWModel method\n\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 11:28:36.457911 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.34 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3599e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7426e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5001e+06 -1.5970e+05  3.1970e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8074e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112794435\n   AREA_SQM                 21575\n   AGE                     434203\n   PROX_CBD               2704604\n   PROX_CHILDCARE         1654086\n   PROX_ELDERLYCARE      38867861\n   PROX_URA_GROWTH_AREA  78515805\n   PROX_MRT               3124325\n   PROX_PARK             18122439\n   PROX_PRIMARY_SCH       4637517\n   PROX_SHOPPING_MALL     1529953\n   PROX_BUS_STOP         11342209\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720745\n   FREEHOLD               6073642\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3807 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6193 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.534069e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430418 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 11:28:37.365182 \n\n\nGeogrpahically weighted result such as the “GWR coefficient estimates” and “model calibration” results are the new additional insights we can get from the above chart. It will build multiple models, each with their own estimates. The significance stars report can be compared with the diagnostic information. Both of them have r squared and r square adjusted metrics (which is used to compare the performance of models). Spatially accounting for the model - improved the explanatory power of model - one can account for 84% of the model while other one only accounts for 64% of the model!\nThe number of neighbors for best CV value is recommended in adaptive bandwith method. It shows that 30 neighbors is the recommended data points to be used below. Personal observation: At one point it goes below 30 and adjusts itself to converge to 30 for optimal CV value.\n\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\n\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-11 11:28:44.258418 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-03-11 11:28:45.260326 \n\n\nThe model can be explained by up to 85%! It is a light increase from fixed bandwidth method. gwr.adaptive variable can be inspective for each variable standard error in the format (feature_name)_SE\nWe are interested in the SDF which has the spatial points so use dollar sign to get the subset of table:\n\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.95        0   -0.72065801   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 76\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\nBy URA Planning region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#time-series-cube",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#time-series-cube",
    "title": "In Class Exercise 5",
    "section": "Time Series Cube",
    "text": "Time Series Cube\n\npacman::p_load(sf, sfdep, tmap, plotly, tidyverse)\n\n\nhunan &lt;- st_read(dsn = \"../../data/geospatial/week5\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/maarunipandithurai/Documents/maars202/geospatial/IS415-GAA/data/geospatial/week5' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\nGDPPC &lt;- read_csv(\"../../data/aspatial/Hunan_GDPPC.csv\")\nGDPPC\n\n# A tibble: 1,496 × 3\n    Year County    GDPPC\n   &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1  2005 Longshan   3469\n 2  2005 Changsha  24612\n 3  2005 Wangcheng 14659\n 4  2005 Ningxiang 11687\n 5  2005 Liuyang   13406\n 6  2005 Zhuzhou    8546\n 7  2005 You       10944\n 8  2005 Chaling    8040\n 9  2005 Yanling    7383\n10  2005 Liling    11688\n# ℹ 1,486 more rows\n\n\n\nGDPPC_st &lt;- spacetime(GDPPC, hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\n\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#computing-gi",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#computing-gi",
    "title": "In Class Exercise 5",
    "section": "Computing Gi*",
    "text": "Computing Gi*\n\ngi_stars &lt;- GDPPC_nb %&gt;% \n  group_by(Year) %&gt;% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;% \n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#arrange-to-show-significant-emerging-hotcold-spots",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#arrange-to-show-significant-emerging-hotcold-spots",
    "title": "In Class Exercise 5",
    "section": "Arrange to show significant emerging hot/cold spots",
    "text": "Arrange to show significant emerging hot/cold spots\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:5)\nemerging\n\n# A tibble: 5 × 6\n  County        tau         sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Shuangfeng  0.868 0.00000143   118  136.  589.\n2 Xiangtan    0.868 0.00000143   118  136.  589.\n3 Xiangxiang  0.868 0.00000143   118  136.  589.\n4 Chengbu    -0.824 0.00000482  -112  136.  589.\n5 Dongan     -0.824 0.00000482  -112  136.  589."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#performing-emerging-hotspot-analysis",
    "href": "In-class_Ex/In-class_Ex05/Inclass_Ex05.html#performing-emerging-hotspot-analysis",
    "title": "In Class Exercise 5",
    "section": "Performing Emerging Hotspot Analysis",
    "text": "Performing Emerging Hotspot Analysis\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st, \n  .var = \"GDPPC\", \n  k = 1, \n  nsim = 99\n)\nehsa\n\n# A tibble: 88 × 4\n   location     tau    p_value classification     \n   &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;              \n 1 Anxiang    0.221 0.232      sporadic coldspot  \n 2 Hanshou    0.147 0.434      sporadic hotspot   \n 3 Jinshi     0.441 0.0151     oscilating hotspot \n 4 Li        -0.824 0.00000482 sporadic coldspot  \n 5 Linli      0.118 0.537      oscilating hotspot \n 6 Shimen    -0.471 0.00946    oscilating coldspot\n 7 Liuyang    0.868 0.00000143 sporadic hotspot   \n 8 Ningxiang -0.559 0.00201    sporadic coldspot  \n 9 Wangcheng -0.162 0.387      sporadic coldspot  \n10 Anren      0.456 0.0120     sporadic coldspot  \n# ℹ 78 more rows\n\n\n\nVisualising the distribution of EHSA classes\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nVisualising EHSA\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa,\n            by = join_by(County == location))\n\n\nehsa_sig &lt;- hunan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "data/takehomeassigment2/geospatial/TAINAN_VILLAGE.html",
    "href": "data/takehomeassigment2/geospatial/TAINAN_VILLAGE.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“TWD97”,DATUM[“Taiwan Datum 1997”,ELLIPSOID[“GRS 1980”,6378137,298.257222101,LENGTHUNIT[“metre”,1]]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“Taiwan, Republic of China - onshore and offshore - Taiwan Island, Penghu (Pescadores) Islands.”],BBOX[17.36,114.32,26.96,123.61]],ID[“EPSG”,3824]] +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs 27230 3824 EPSG:3824 TWD97 longlat EPSG:7019 true"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "",
    "text": "Predictive modelling uses statistical learning or machine learning techniques to predict outcomes. By and large, the event one wants to predict is in the future. However, a set of known outcome and predictors (also known as variables) will be used to calibrate the predictive models.\nGeospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. When geographically referenced data are used, occurrences of events are neither uniform nor random in distribution over space. There are geospatial factors (infrastructure, sociocultural, topographic, etc.) that constrain and influence where the locations of events occur. Geospatial predictive modeling attempts to describe those constraints and influences by spatially correlating occurrences of historical geospatial locations with environmental factors that represent those constraints and influences.\n\n\nIn this in-class exercise, you will learn how to build predictive model by using geographical random forest method. By the end of this hands-on exercise, you will acquire the skills of:\n\npreparing training and test data sets by using appropriate data sampling methods,\ncalibrating predictive models by using both geospatial statistical learning and machine learning methods,\ncomparing and selecting the best model for predicting the future outcome,\npredicting the future outcomes by using the best model calibrated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#overview",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "",
    "text": "Predictive modelling uses statistical learning or machine learning techniques to predict outcomes. By and large, the event one wants to predict is in the future. However, a set of known outcome and predictors (also known as variables) will be used to calibrate the predictive models.\nGeospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. When geographically referenced data are used, occurrences of events are neither uniform nor random in distribution over space. There are geospatial factors (infrastructure, sociocultural, topographic, etc.) that constrain and influence where the locations of events occur. Geospatial predictive modeling attempts to describe those constraints and influences by spatially correlating occurrences of historical geospatial locations with environmental factors that represent those constraints and influences.\n\n\nIn this in-class exercise, you will learn how to build predictive model by using geographical random forest method. By the end of this hands-on exercise, you will acquire the skills of:\n\npreparing training and test data sets by using appropriate data sampling methods,\ncalibrating predictive models by using both geospatial statistical learning and machine learning methods,\ncomparing and selecting the best model for predicting the future outcome,\npredicting the future outcomes by using the best model calibrated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#the-data",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.2 The Data",
    "text": "14.2 The Data\n\nAspatial dataset:\n\nHDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg.\n\nGeospatial dataset:\n\nMP14_SUBZONE_WEB_PL: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg\n\nLocational factors with geographic coordinates:\n\nDownloaded from Data.gov.sg.\n\nEldercare data is a list of eldercare in Singapore. It is in shapefile format.\nHawker Centre data is a list of hawker centres in Singapore. It is in geojson format.\nParks data is a list of parks in Singapore. It is in geojson format.\nSupermarket data is a list of supermarkets in Singapore. It is in geojson format.\nCHAS clinics data is a list of CHAS clinics in Singapore. It is in geojson format.\nChildcare service data is a list of childcare services in Singapore. It is in geojson format.\nKindergartens data is a list of kindergartens in Singapore. It is in geojson format.\n\nDownloaded from Datamall.lta.gov.sg.\n\nMRT data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.\nBus stops data is a list of bus stops in Singapore. It is in shapefile format.\n\n\nLocational factors without geographic coordinates:\n\nDownloaded from Data.gov.sg.\n\nPrimary school data is extracted from the list on General information of schools from data.gov portal. It is in csv format.\n\nRetrieved/Scraped from other sources\n\nCBD coordinates obtained from Google.\nShopping malls data is a list of Shopping malls in Singapore obtained from Wikipedia.\nGood primary schools is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at Local Salary Forum."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.3 Installing and Loading R packages",
    "text": "14.3 Installing and Loading R packages\nThis code chunk performs 3 tasks:\n\nA list called packages will be created and will consists of all the R packages required to accomplish this exercise.\nCheck if R packages on package have been installed in R and if not, they will be installed.\nAfter all the R packages have been installed, they will be loaded.\n\n\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, Metrics, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#preparing-data",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#preparing-data",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.4 Preparing Data",
    "text": "14.4 Preparing Data\n\n14.4.1 Reading data file to rds\nReading the input data sets. It is in simple feature data frame.\n\nmdata &lt;- read_rds(\"../../data/aspatial/mdata.rds\")\n\n\n\n14.4.2 Data Sampling\nThe entire data are split into training and test data sets with 65% and 35% respectively by using initial_split() of rsample package. rsample is one of the package of tigymodels.\n\nset.seed(1234)\nresale_split &lt;- initial_split(mdata, \n                              prop = 6.5/10,)\ntrain_data &lt;- training(resale_split)\ntest_data &lt;- testing(resale_split)\n\n\nwrite_rds(train_data, \"../../data/aspatial/train_data.rds\")\nwrite_rds(test_data, \"../../data/aspatial/test_data.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#computing-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#computing-correlation-matrix",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.5 Computing Correlation Matrix",
    "text": "14.5 Computing Correlation Matrix\nBefore loading the predictors into a predictive model, it is always a good practice to use correlation matrix to examine if there is sign of multicolinearity.\n\nmdata_nogeo &lt;- mdata %&gt;%\n  st_drop_geometry()\ncorrplot::corrplot(cor(mdata_nogeo[, 2:17]), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#retriving-the-stored-data",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#retriving-the-stored-data",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.6 Retriving the Stored Data",
    "text": "14.6 Retriving the Stored Data\n\ntrain_data &lt;- read_rds(\"../../data/aspatial/train_data.rds\")\ntest_data &lt;- read_rds(\"../../data/aspatial/test_data.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#building-a-non-spatial-multiple-linear-regression",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#building-a-non-spatial-multiple-linear-regression",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.7 Building a non-spatial multiple linear regression",
    "text": "14.7 Building a non-spatial multiple linear regression\n\nprice_mlr &lt;- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nsummary(price_mlr)\n\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)              107601.073  10601.261  10.150  &lt; 2e-16 ***\nfloor_area_sqm             2780.698     90.579  30.699  &lt; 2e-16 ***\nstorey_order              14299.298    339.115  42.167  &lt; 2e-16 ***\nremaining_lease_mths        344.490      4.592  75.027  &lt; 2e-16 ***\nPROX_CBD                 -16930.196    201.254 -84.124  &lt; 2e-16 ***\nPROX_ELDERLYCARE         -14441.025    994.867 -14.516  &lt; 2e-16 ***\nPROX_HAWKER              -19265.648   1273.597 -15.127  &lt; 2e-16 ***\nPROX_MRT                 -32564.272   1744.232 -18.670  &lt; 2e-16 ***\nPROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\nPROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\nPROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\nWITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  &lt; 2e-16 ***\nWITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  &lt; 2e-16 ***\nWITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\nWITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61650 on 10320 degrees of freedom\nMultiple R-squared:  0.7373,    Adjusted R-squared:  0.737 \nF-statistic:  2069 on 14 and 10320 DF,  p-value: &lt; 2.2e-16\n\n\n\nwrite_rds(price_mlr, \"../../data/aspatial/price_mlr.rds\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#gwr-predictive-method",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#gwr-predictive-method",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.8 gwr predictive method",
    "text": "14.8 gwr predictive method\nIn this section, you will learn how to calibrate a model to predict HDB resale price by using geographically weighted regression method of GWmodel package.\n\n14.8.1 Converting the sf data.frame to SpatialPointDataFrame\n\ntrain_data_sp &lt;- as_Spatial(train_data)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n\n\n\n\n14.8.2 Computing adaptive bandwidth\nNext, bw.gwr() of GWmodel package will be used to determine the optimal bandwidth to be used.\n\nbw_adaptive &lt;- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n\nThe result shows that 40 neighbour points will be the optimal bandwidth to be used if adaptive bandwidth is used for this data set.\n\nwrite_rds(bw_adaptive, \"../../data/aspatial/bw_adaptive.rds\")\n\n\n\n14.8.3 Constructing the adaptive bandwidth gwr model\nFirst, let us call the save bandwidth by using the code chunk below.\n\nbw_adaptive &lt;- read_rds(\"../../data/aspatial/bw_adaptive.rds\")\n\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and Gaussian kernel as shown in the code chunk below.\n\ngwr_adaptive &lt;- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n\nThe code chunk below will be used to save the model in rds format for future use.\n\nwrite_rds(gwr_adaptive, \"../../data/aspatial/gwr_adaptive.rds\")\n\n\n\n14.8.4 Retrieve gwr output object\nThe code chunk below will be used to retrieve the save gwr model object.\n\ngwr_adaptive &lt;- read_rds(\"../../data/aspatial/gwr_adaptive.rds\")\n\nThe code below can be used to display the model output.\n\ngwr_adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-03-15 09:48:15.924345 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 10335\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)              107601.073  10601.261  10.150  &lt; 2e-16 ***\n   floor_area_sqm             2780.698     90.579  30.699  &lt; 2e-16 ***\n   storey_order              14299.298    339.115  42.167  &lt; 2e-16 ***\n   remaining_lease_mths        344.490      4.592  75.027  &lt; 2e-16 ***\n   PROX_CBD                 -16930.196    201.254 -84.124  &lt; 2e-16 ***\n   PROX_ELDERLYCARE         -14441.025    994.867 -14.516  &lt; 2e-16 ***\n   PROX_HAWKER              -19265.648   1273.597 -15.127  &lt; 2e-16 ***\n   PROX_MRT                 -32564.272   1744.232 -18.670  &lt; 2e-16 ***\n   PROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\n   PROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\n   PROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\n   WITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  &lt; 2e-16 ***\n   WITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  &lt; 2e-16 ***\n   WITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\n   WITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  &lt; 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61650 on 10320 degrees of freedom\n   Multiple R-squared: 0.7373\n   Adjusted R-squared: 0.737 \n   F-statistic:  2069 on 14 and 10320 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.922202e+13\n   Sigma(hat): 61610.08\n   AIC:  257320.2\n   AICc:  257320.3\n   BIC:  247249\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -3.2594e+08 -4.7727e+05 -8.3004e+03  5.5025e+05\n   floor_area_sqm           -2.8714e+04  1.4475e+03  2.3011e+03  3.3900e+03\n   storey_order              3.3186e+03  8.5899e+03  1.0826e+04  1.3397e+04\n   remaining_lease_mths     -1.4431e+03  2.6063e+02  3.9048e+02  5.2865e+02\n   PROX_CBD                 -1.0837e+07 -5.7697e+04 -1.3787e+04  2.6552e+04\n   PROX_ELDERLYCARE         -3.2291e+07 -4.0643e+04  1.0562e+04  6.1054e+04\n   PROX_HAWKER              -2.3985e+08 -5.1365e+04  3.0026e+03  6.4287e+04\n   PROX_MRT                 -1.1660e+07 -1.0488e+05 -4.9373e+04  5.1037e+03\n   PROX_PARK                -6.5961e+06 -4.8671e+04 -8.8128e+02  5.3498e+04\n   PROX_MALL                -1.8112e+07 -7.4238e+04 -1.3982e+04  4.9779e+04\n   PROX_SUPERMARKET         -4.5761e+06 -6.3461e+04 -1.7429e+04  3.5616e+04\n   WITHIN_350M_KINDERGARTEN -4.1881e+05 -6.0040e+03  9.0209e+01  4.7127e+03\n   WITHIN_350M_CHILDCARE    -1.0273e+05 -2.2375e+03  2.6668e+02  2.6388e+03\n   WITHIN_350M_BUS          -1.1757e+05 -1.4719e+03  1.1626e+02  1.7584e+03\n   WITHIN_1KM_PRISCH        -6.6465e+05 -5.5959e+03  2.6916e+02  5.7500e+03\n                                  Max.\n   Intercept                1.6493e+08\n   floor_area_sqm           5.0907e+04\n   storey_order             2.9537e+04\n   remaining_lease_mths     1.8119e+03\n   PROX_CBD                 2.2489e+07\n   PROX_ELDERLYCARE         8.2444e+07\n   PROX_HAWKER              5.9654e+06\n   PROX_MRT                 2.0189e+08\n   PROX_PARK                1.5224e+07\n   PROX_MALL                1.0443e+07\n   PROX_SUPERMARKET         3.8330e+06\n   WITHIN_350M_KINDERGARTEN 6.6799e+05\n   WITHIN_350M_CHILDCARE    1.0802e+05\n   WITHIN_350M_BUS          3.7313e+04\n   WITHIN_1KM_PRISCH        5.0262e+05\n   ************************Diagnostic information*************************\n   Number of data points: 10335 \n   Effective number of parameters (2trace(S) - trace(S'S)): 1730.101 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 8604.899 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 238871.8 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 237036.9 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 238209 \n   Residual sum of squares: 4.829177e+12 \n   R-square value:  0.9676571 \n   Adjusted R-square value:  0.9611535 \n\n   ***********************************************************************\n   Program stops at: 2024-03-15 09:49:12.764554 \n\n\n\n\n14.8.5 Converting the test data from sf data.frame to SpatialPointDataFrame\n\ntest_data_sp &lt;- test_data %&gt;%\n  as_Spatial()\ntest_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 5566 \nextent      : 11597.31, 42623.63, 28287.8, 48669.59  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,         PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       230888,             74,            1,                  546, 1.00583660772922, 3.34897933104965e-07, 0.0474019664161957, 0.0414043955932523, 0.0502664084494264, 0.0907500295577619,                0, 4.55547870890763e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1050000,            138,           14,                 1151,  19.632402730488,     3.30163731686804,   2.83106651960209,   2.13060636038504,   2.41313695915468,   10.6169590126272, 2.26056404492346,     0.79249074802552,     1.53786629004208,                        7,                    16, ... \n\n\n\n\n14.8.6 Computing adaptive bandwidth for the test data\n\ngwr_bw_test_adaptive &lt;- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n\n\n\n14.8.7 Computing predicted values of the test data\n\ngwr_pred &lt;- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw=40, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#reflectionspersonal-take",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#reflectionspersonal-take",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "Reflections/Personal Take",
    "text": "Reflections/Personal Take"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#reference",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "13.10 Reference",
    "text": "13.10 Reference\n\nhttps://r4gdsa.netlify.app/chap13.html"
  },
  {
    "objectID": "data/geospatial/week11/MPSZ-2019.html",
    "href": "data/geospatial/week11/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#preparing-coordinates-data",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#preparing-coordinates-data",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.9 Preparing coordinates data",
    "text": "14.9 Preparing coordinates data\n\n14.9.1 Extracting coordinates data\nThe code chunk below extract the x,y coordinates of the full, training and test data sets.\n\ncoords &lt;- st_coordinates(mdata)\ncoords_train &lt;- st_coordinates(train_data)\ncoords_test &lt;- st_coordinates(test_data)\n\nBefore continue, we write all the output into rds for future used.\n\ncoords_train &lt;- write_rds(coords_train, \"../../data/aspatial/coords_train.rds\" )\ncoords_test &lt;- write_rds(coords_test, \"../../data/aspatial/coords_test.rds\" )\n\n\n\n14.9.2 Droping geometry field\nFirst, we will drop geometry column of the sf data.frame by using st_drop_geometry() of sf package.\n\ntrain_data &lt;- train_data %&gt;% \n  st_drop_geometry()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#calibrating-random-forest-model",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#calibrating-random-forest-model",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.10 Calibrating Random Forest Model",
    "text": "14.10 Calibrating Random Forest Model\nIn this section, you will learn how to calibrate a model to predict HDB resale price by using random forest function of ranger package.\n\nset.seed(1234)\nrf &lt;- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data)\nrf\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       731404460 \nR squared (OOB):                  0.9493789 \n\n\n\nwrite_rds(rf, \"../../data/aspatial/rf.rds\")\n\n\nrf &lt;- read_rds(\"../../data/aspatial/rf.rds\")\nrf\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       731404460 \nR squared (OOB):                  0.9493789"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#calibrating-geographical-random-forest-model",
    "href": "Hands-on_Ex/Hands-on_Ex-11/Hands-on_Ex11.html#calibrating-geographical-random-forest-model",
    "title": "Hands-on Exercise 9 - Week 11: Geographically Weighted Predictive Models",
    "section": "14.11 Calibrating Geographical Random Forest Model",
    "text": "14.11 Calibrating Geographical Random Forest Model\nIn this section, you will learn how to calibrate a model to predict HDB resale price by using grf() of SpatialML package.\n\n14.11.1 Calibrating using training data\nThe code chunk below calibrate a geographic ranform forest model by using grf() of SpatialML package.\n\ncoords_train &lt;- read_rds(\"../../data/aspatial/coords_train.rds\")\ncoords_test &lt;- read_rds(\"../../data/aspatial/coords_test.rds\")\n\n\nset.seed(1234)\ngwRF_adaptive &lt;- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\nLet’s save the model output by using the code chunk below.\n\nwrite_rds(gwRF_adaptive, \"../../data/aspatial/gwRF_adaptive.rds\")\n\nThe code chunk below can be used to retrieve the save model in future.\n\ngwRF_adaptive &lt;- read_rds(\"../../data/aspatial/gwRF_adaptive.rds\")\n\n\n\n14.11.2 Predicting by using test data\n\n14.11.2.1 Preparing the test data\nThe code chunk below will be used to combine the test data with its corresponding coordinates data.\n\ntest_data &lt;- cbind(test_data, coords_test) %&gt;%\n  st_drop_geometry()\n\n\n\n14.11.2.2 Predicting with test data\nNext, predict.grf() of spatialML package will be used to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\ngwRF_pred &lt;- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n\nBefore moving on, let us save the output into rds file for future use.\n\nGRF_pred &lt;- write_rds(gwRF_pred, \"../../data/aspatial/GRF_pred.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html",
    "href": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html",
    "title": "In-Class Exercise 9 - week 11",
    "section": "",
    "text": "Model comparison and assessment both use only test data to get the metrics\nRecursive partitioning - how to link to single and multiple linear regression: cannot see and visualise the stuff similar to multiple linear regression\nSimple splitting rules, provides purities or impurities — concept in analytics foundation\nResponse variable - predictive variable \nCategorical or numerical — not such a stringent required?\nSplitting rule — always mutually exclusive — model will take care of it - important to note when explaining the model - is it similar to hierarchical clustering where the groups might share commonalities and as we go down the graph they are more exclusively grouped and can only belong to one group? \nRegression tree and decision tree \nCategorical or numerical — since categorical for churn, — good for decision/classfication tree — using the classes\nProperty price — average price of price — find out best split rules — use average to get the splitting rule - (important)Unlike single variable regression which uses all values and draws a line to get the relationship \nContinuous predictor — best split value — always mutually exclusive — like 12.3 is chosen as the split point for determining churn rate\nMust state explicitly whether the categorical variable is nominal or ordinal\nCART:\n\nWhen the cart is allowed to stop splitting the groups, specify the process by stating these variables in the model:\n\nthe leaves of the tree should have size minimum leaf size — by default, minimum leaf size is 5\nMax depth of tree \n\n\nThe splitting at each level — it can be based on the same predictors from previous level\nIf dataset is very small, the model might overfit — so recursive partitioning is inefficient \nAdvanced recursive partitioning/random forest expands on this idea and prevents overfitting problem by (bagging method)creating large number of decision trees(an ensemble used together to get the overall prediction) — gets subsets from existing dataset and puts each subset into each of the trees - the trees might have overlaps and duplicates\nBootstrap forest is another different method\nWe cannot put x, y coordinates for the gwRF! - requires us to define the spatial properties — fixed or adaptive distance to get the variables that we can plug into the tree - not the x, y coordinates \n\n\n\n\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)\n\n\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, tidymodels, gtsummary, tidyverse,\n               rpart, rpart.plot, \n               ggstatsplot, performance, Metrics, tidyverse)\n\nSome notes about the packages:\n\nSpatialML – only for random forests but not any other machine learning models\ntidymodels is useful for getting all the machine learning models! It is a wrapper that combines other packages such as yardstick for performance measurement, etc.\nrpart, rpart.plot are only in the in class exercise - used for recursive partitioning\n\n\n\n\n\n\n\n\n\n\nrs_sf &lt;- read_rds(\"data/rds/HDB_resale.rds\")\n\nIt is in simple feature collection format.\n\nset.seed(1234)\nresale_split &lt;- initial_split(rs_sf, \n                              prop = 5/10,)\ntrain_data &lt;- training(resale_split)\ntest_data &lt;- testing(resale_split)\n\nRsample is very useful and uses 2 steps:\n\nInitially splitting data (can be random or stratified) - by default is random\n\nSave train and test samples and reload them to be more memory efficient.\n\ntrain_data_df &lt;- train_data %&gt;%\n  st_drop_geometry() %&gt;%\n  as.data.frame()\n\ntest_data_df &lt;- test_data %&gt;%\n  st_drop_geometry() %&gt;%\n  as.data.frame()\n\nBoth of them will have one less column due to dropping geometry column.\n\n\n\n\nrs_sf1 &lt;- rs_sf %&gt;%\n  st_drop_geometry()\nggcorrmat(rs_sf1[, 2:17])\n\nR function to convert to upper class\n\ntoupper(\"floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\")\n\n\nrs_mlr &lt;- lm(resale_price ~ FLOOR_AREA_SQM +                  STOREY_ORDER + REMAINING_LEASE_MTHS + PROX_CHAS +\n               PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL  +\n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n                data=train_df)\nsummary(rs_mlr)\nsummary(rs_mlr)\n\n\n\n\n\ntrain_df &lt;- train_df %&gt;%\n  select(-c(PROX_CHAS))\ntrain_sf &lt;- train_sf %&gt;%\n  select(-c(PROX_CHAS))\n\ntest_df &lt;- test_df %&gt;%\n  select(-c(PROX_CHAS))\ntest_sf &lt;- test_sf %&gt;%\n  select(-c(PROX_CHAS))\n\nCHAS variable might not be be a signifcant contributor since its a Singapore policy that motivates health prices, NOT resale prices for house, as CHAS members get discounts for hospital charges, etc. So after removing it we will have 1 less variable.\nSo lets get rs_mlr without PROX_CHAS variable:\n\nrs_mlr &lt;- lm(resale_price ~ FLOOR_AREA_SQM +                  STOREY_ORDER + REMAINING_LEASE_MTHS +\n               PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL  +\n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n                data=train_df)\nsummary(rs_mlr)\n\n\n\n\n\ntrain_data_sp &lt;- as_Spatial(train_data)\ntrain_data_sp\n\nThis code chunk extracts out the x, y coordinates of full, training and testing data sets.\n\ncoords &lt;- st_coordinates(rs_sf)\ncoords_train &lt;- st_coordinates(train_sf)\ncoords_test &lt;- st_coordinates(test_sf)\n\n\n\n\n\nset.seed(1234)\nrs_rp &lt;- rpart(resale_price ~ FLOOR_AREA_SQM +                  STOREY_ORDER + REMAINING_LEASE_MTHS +\n               PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL  +\n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n                data=train_df)\nsummary(rs_rp)\n\nGenerates partitioning explanation diagram, which is a binary tree to explain where the split points occur:\n\nrpart.plot(rs_rp)\n\nGood to use as data scientists can easily refer to diagram to create SQL statements for each of the classfiied groups.\n\n\n\nWe can calibrate the modelto predict HDB resale price using random forest function.\n\n\n\n\nset.seed(1234)\nrs_rf &lt;- ranger(resale_price ~ FLOOR_AREA_SQM +                  STOREY_ORDER + REMAINING_LEASE_MTHS +\n               PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL  +\n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n                data=train_df, \n               importance = \"impurity\")\nrs_rf[[\"variable.importance\"]]\n\nVariance of responses is determined by importance criterion which can be “impurity” or others as well.\nLets take a closer look at the variables’ contribution to the reparitioning process by creating a dataframe from the variable’s importance:\n\nvi &lt;- as.data.frame(rs_rf$variable.importance)\nvi$variables &lt;- rownames(vi)\nvi &lt;- vi  %&gt;%\n  rename(vi = \"rs_rf$variable.importance\")\n\nThis create vi column with the column names.\n\nggplot(vi, \n       aes(x = vi,\n           y = reorder(variables, vi))) + \n  geom_bar(stat = \"identity\")\n\nJust nice all of the variables have differing orders. However, if all the bars are the same size, then it is the quasi-separation issue! The variables are not contributing to the splits! Then, we need to remove those variables are they do not contribute the the divisions.\n\nbw_adaptive &lt;- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_df,\n                  kernel=\"adaptive\",\n                  coords = coords_train,\n                  bw.min = 25,\n                  bw.max = 60,\n                  step = 1,\n                  nthreads = 16,\n                  forest = FALSE,\n                  weighted = TRUE)\n\nWith bandwidth, insert this into the model:\n\nset.seed(1234)\nrs_grf &lt;- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\n\nwrite_rds(rs_grf, \"path\")\n\n\n\n\n\n\ntest_df = cbind()\n\nOnly one column:\n\ngrf_pred = read_rds(\"data/models/grf_pred.rds\")\ngrf_pred_df = as.data.frame(grf_pred)\n\nCombine with another column:\n\ntest_pred = test_df %&gt;%\n  select(RESALE_PRICE) %&gt;%\n  cbind(grf_pred_df)\n\nProblem: Since test_df couldnt be loaded earlier, this is not runnable."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#lecture-notes",
    "href": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#lecture-notes",
    "title": "In-Class Exercise 9 - week 11",
    "section": "",
    "text": "Model comparison and assessment both use only test data to get the metrics\nRecursive partitioning - how to link to single and multiple linear regression: cannot see and visualise the stuff similar to multiple linear regression\nSimple splitting rules, provides purities or impurities — concept in analytics foundation\nResponse variable - predictive variable \nCategorical or numerical — not such a stringent required?\nSplitting rule — always mutually exclusive — model will take care of it - important to note when explaining the model - is it similar to hierarchical clustering where the groups might share commonalities and as we go down the graph they are more exclusively grouped and can only belong to one group? \nRegression tree and decision tree \nCategorical or numerical — since categorical for churn, — good for decision/classfication tree — using the classes\nProperty price — average price of price — find out best split rules — use average to get the splitting rule - (important)Unlike single variable regression which uses all values and draws a line to get the relationship \nContinuous predictor — best split value — always mutually exclusive — like 12.3 is chosen as the split point for determining churn rate\nMust state explicitly whether the categorical variable is nominal or ordinal\nCART:\n\nWhen the cart is allowed to stop splitting the groups, specify the process by stating these variables in the model:\n\nthe leaves of the tree should have size minimum leaf size — by default, minimum leaf size is 5\nMax depth of tree \n\n\nThe splitting at each level — it can be based on the same predictors from previous level\nIf dataset is very small, the model might overfit — so recursive partitioning is inefficient \nAdvanced recursive partitioning/random forest expands on this idea and prevents overfitting problem by (bagging method)creating large number of decision trees(an ensemble used together to get the overall prediction) — gets subsets from existing dataset and puts each subset into each of the trees - the trees might have overlaps and duplicates\nBootstrap forest is another different method\nWe cannot put x, y coordinates for the gwRF! - requires us to define the spatial properties — fixed or adaptive distance to get the variables that we can plug into the tree - not the x, y coordinates"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#the-data",
    "href": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#the-data",
    "title": "In-Class Exercise 9 - week 11",
    "section": "",
    "text": "Two data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#getting-started",
    "href": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#getting-started",
    "title": "In-Class Exercise 9 - week 11",
    "section": "",
    "text": "The code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, tidymodels, gtsummary, tidyverse,\n               rpart, rpart.plot, \n               ggstatsplot, performance, Metrics, tidyverse)\n\nSome notes about the packages:\n\nSpatialML – only for random forests but not any other machine learning models\ntidymodels is useful for getting all the machine learning models! It is a wrapper that combines other packages such as yardstick for performance measurement, etc.\nrpart, rpart.plot are only in the in class exercise - used for recursive partitioning"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#geospatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#geospatial-data-wrangling",
    "title": "In-Class Exercise 9 - week 11",
    "section": "",
    "text": "rs_sf &lt;- read_rds(\"data/rds/HDB_resale.rds\")\n\nIt is in simple feature collection format.\n\nset.seed(1234)\nresale_split &lt;- initial_split(rs_sf, \n                              prop = 5/10,)\ntrain_data &lt;- training(resale_split)\ntest_data &lt;- testing(resale_split)\n\nRsample is very useful and uses 2 steps:\n\nInitially splitting data (can be random or stratified) - by default is random\n\nSave train and test samples and reload them to be more memory efficient.\n\ntrain_data_df &lt;- train_data %&gt;%\n  st_drop_geometry() %&gt;%\n  as.data.frame()\n\ntest_data_df &lt;- test_data %&gt;%\n  st_drop_geometry() %&gt;%\n  as.data.frame()\n\nBoth of them will have one less column due to dropping geometry column.\n\n\n\n\nrs_sf1 &lt;- rs_sf %&gt;%\n  st_drop_geometry()\nggcorrmat(rs_sf1[, 2:17])\n\nR function to convert to upper class\n\ntoupper(\"floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\")\n\n\nrs_mlr &lt;- lm(resale_price ~ FLOOR_AREA_SQM +                  STOREY_ORDER + REMAINING_LEASE_MTHS + PROX_CHAS +\n               PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL  +\n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n                data=train_df)\nsummary(rs_mlr)\nsummary(rs_mlr)\n\n\n\n\n\ntrain_df &lt;- train_df %&gt;%\n  select(-c(PROX_CHAS))\ntrain_sf &lt;- train_sf %&gt;%\n  select(-c(PROX_CHAS))\n\ntest_df &lt;- test_df %&gt;%\n  select(-c(PROX_CHAS))\ntest_sf &lt;- test_sf %&gt;%\n  select(-c(PROX_CHAS))\n\nCHAS variable might not be be a signifcant contributor since its a Singapore policy that motivates health prices, NOT resale prices for house, as CHAS members get discounts for hospital charges, etc. So after removing it we will have 1 less variable.\nSo lets get rs_mlr without PROX_CHAS variable:\n\nrs_mlr &lt;- lm(resale_price ~ FLOOR_AREA_SQM +                  STOREY_ORDER + REMAINING_LEASE_MTHS +\n               PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL  +\n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n                data=train_df)\nsummary(rs_mlr)\n\n\n\n\n\ntrain_data_sp &lt;- as_Spatial(train_data)\ntrain_data_sp\n\nThis code chunk extracts out the x, y coordinates of full, training and testing data sets.\n\ncoords &lt;- st_coordinates(rs_sf)\ncoords_train &lt;- st_coordinates(train_sf)\ncoords_test &lt;- st_coordinates(test_sf)\n\n\n\n\n\nset.seed(1234)\nrs_rp &lt;- rpart(resale_price ~ FLOOR_AREA_SQM +                  STOREY_ORDER + REMAINING_LEASE_MTHS +\n               PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL  +\n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n                data=train_df)\nsummary(rs_rp)\n\nGenerates partitioning explanation diagram, which is a binary tree to explain where the split points occur:\n\nrpart.plot(rs_rp)\n\nGood to use as data scientists can easily refer to diagram to create SQL statements for each of the classfiied groups.\n\n\n\nWe can calibrate the modelto predict HDB resale price using random forest function.\n\n\n\n\nset.seed(1234)\nrs_rf &lt;- ranger(resale_price ~ FLOOR_AREA_SQM +                  STOREY_ORDER + REMAINING_LEASE_MTHS +\n               PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL  +\n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n                data=train_df, \n               importance = \"impurity\")\nrs_rf[[\"variable.importance\"]]\n\nVariance of responses is determined by importance criterion which can be “impurity” or others as well.\nLets take a closer look at the variables’ contribution to the reparitioning process by creating a dataframe from the variable’s importance:\n\nvi &lt;- as.data.frame(rs_rf$variable.importance)\nvi$variables &lt;- rownames(vi)\nvi &lt;- vi  %&gt;%\n  rename(vi = \"rs_rf$variable.importance\")\n\nThis create vi column with the column names.\n\nggplot(vi, \n       aes(x = vi,\n           y = reorder(variables, vi))) + \n  geom_bar(stat = \"identity\")\n\nJust nice all of the variables have differing orders. However, if all the bars are the same size, then it is the quasi-separation issue! The variables are not contributing to the splits! Then, we need to remove those variables are they do not contribute the the divisions.\n\nbw_adaptive &lt;- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_df,\n                  kernel=\"adaptive\",\n                  coords = coords_train,\n                  bw.min = 25,\n                  bw.max = 60,\n                  step = 1,\n                  nthreads = 16,\n                  forest = FALSE,\n                  weighted = TRUE)\n\nWith bandwidth, insert this into the model:\n\nset.seed(1234)\nrs_grf &lt;- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\n\nwrite_rds(rs_grf, \"path\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#reloading-the-model-provided",
    "href": "In-class_Ex/In-class_Ex11/Inclass_Ex11.html#reloading-the-model-provided",
    "title": "In-Class Exercise 9 - week 11",
    "section": "",
    "text": "test_df = cbind()\n\nOnly one column:\n\ngrf_pred = read_rds(\"data/models/grf_pred.rds\")\ngrf_pred_df = as.data.frame(grf_pred)\n\nCombine with another column:\n\ntest_pred = test_df %&gt;%\n  select(RESALE_PRICE) %&gt;%\n  cbind(grf_pred_df)\n\nProblem: Since test_df couldnt be loaded earlier, this is not runnable."
  }
]